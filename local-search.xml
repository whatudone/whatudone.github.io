<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/30/%E6%89%93%E5%8D%B0%E6%9C%BA%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <url>/2023/03/30/%E6%89%93%E5%8D%B0%E6%9C%BA%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="打印机安装驱动失败问题分析"><a href="#打印机安装驱动失败问题分析" class="headerlink" title="打印机安装驱动失败问题分析"></a>打印机安装驱动失败问题分析</h1><h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>&amp;emsp;&amp;emsp;打印机管理程序在0.4.9.3的版本下，升级到0.4.9.5的时候，出现打印机安装驱动失败，在故障排查的过程中也出现类似的无法安装的bug。</p><h2 id="2、问题分析"><a href="#2、问题分析" class="headerlink" title="2、问题分析"></a>2、问题分析</h2><p>&amp;emsp;&amp;emsp;根据ui的提示“安装驱动失败”，应该是调用dbus安装包的接口异常，于是去代码定位到调用dbus安装包附近的代码，查找是否有记录对应的错误日志。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QDBusReply&lt;QDBusObjectPath&gt; objPath = interface-&gt;<span class="hljs-built_in">call</span>(<span class="hljs-string">&quot;InstallPackage&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, m_installPackages.<span class="hljs-built_in">join</span>(<span class="hljs-string">&quot; &quot;</span>));<br><br>    <span class="hljs-keyword">if</span> (objPath.<span class="hljs-built_in">isValid</span>()) &#123;<br>        m_jobPath = objPath.<span class="hljs-built_in">value</span>().<span class="hljs-built_in">path</span>();<br>        <span class="hljs-keyword">if</span> (QDBusConnection::<span class="hljs-built_in">systemBus</span>().<span class="hljs-built_in">connect</span>(<span class="hljs-string">&quot;com.deepin.lastore&quot;</span>,<br>                    m_jobPath,<br>                    <span class="hljs-string">&quot;org.freedesktop.DBus.Properties&quot;</span>,<br>                    <span class="hljs-string">&quot;PropertiesChanged&quot;</span>,<br>                    <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">propertyChanged</span>(QDBusMessage)))) &#123;<br>            <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Start install &quot;</span> &lt;&lt; m_installPackages;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;Connect dbus signal failed&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;DBus error: &quot;</span> &lt;&lt; objPath.<span class="hljs-built_in">error</span>().<span class="hljs-built_in">message</span>();<br>    &#125;<br>&amp;emsp;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;定位到代码之后去日志文件里面查找DBus error：后续输出的具体错误原因。日志输出错误如下：lstat &#x2F;usr&#x2F;bin&#x2F;dde-printer (deleted) no such file or directory。对于这个错误，刚开始以为是dde-printer没有通过白名单验证（DBus的这个安装包的接口需要认证才能调用），后续排查了这个问题。但是在本地二进制存在的情况下，为何报dde-printer不存在？在没有思路的情况下，去虚拟机安装了一个问题iso，通过排除法排除各种干扰因素，最后发现更新完成之后，只要重启了系统，就不会出现这个bug。于是猜测是因为更新了dde-printer二进制程序之后，由于dde-printer一直在后台启动，这时候导致本地程序和内存不一致，所以调用DBus接口时，DBus返回这个错误。</p><h2 id="3、验证流程"><a href="#3、验证流程" class="headerlink" title="3、验证流程"></a>3、验证流程</h2><ol><li><p>在更新完成直接启动程序，查看程序版本</p></li><li><p>杀死dde-printer进程，然后重启，再进行安装打印机驱动</p><p>&amp;emsp;结论是更新完成之后，内存中程序版本仍然是旧版本。重启程序之后在进行安装问题就就解决了。</p></li></ol><h2 id="4、解决代码"><a href="#4、解决代码" class="headerlink" title="4、解决代码"></a>4、解决代码</h2><p>&amp;emsp;&amp;emsp;解决这个问题，常规办法就是在deb包的postinst脚本中重启程序，但是目前dde-printer程序是用户态自启动的程序。如果通过deb安装完成脚本重启程序，那么程序就会变成root权限。所以采取在postinst脚本中发送自定义信号给程序，然后让程序自己重启。postinst脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># restart process after updating</span><br>ProcessName=<span class="hljs-string">&quot;dde-printer -m 1&quot;</span>    <span class="hljs-comment">#进程</span><br>ID=`ps -ef | grep <span class="hljs-string">&quot;<span class="hljs-variable">$ProcessName</span>&quot;</span> | grep -v <span class="hljs-string">&quot;grep&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`  <span class="hljs-comment">#注意此shell脚本的名称，避免自杀</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$ID</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;process id is empty, process is not existed...&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$ID</span> process will restart...&quot;</span><br>    <span class="hljs-built_in">kill</span> -USR1 <span class="hljs-variable">$ID</span>  <span class="hljs-comment">#通知进程重启</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;process has restart...&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;dde-printer重启代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//默认终止的自定义信号，此处作为重启通知</span><br>    <span class="hljs-keyword">if</span> (signo == SIGUSR1) &#123;<br>        <span class="hljs-type">pid_t</span> pid = <span class="hljs-built_in">getpid</span>();<br>        QProcess process;<br>        QString cmd = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;dde-printer -m 1 -r %1&quot;</span>).<span class="hljs-built_in">arg</span>(pid);<br>        process.<span class="hljs-built_in">startDetached</span>(cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 绑定SIGUSR1信号</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">signal</span>(SIGUSR1, handler) == SIG_ERR) <br>&#123;<br>    <span class="hljs-built_in">qWarning</span>(<span class="hljs-string">&quot;Can&#x27;t set handler for SIGUSR1\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!DGuiApplicationHelper::<span class="hljs-built_in">setSingleInstance</span>(<span class="hljs-string">&quot;dde-printer&quot;</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (qApp-&gt;<span class="hljs-built_in">arguments</span>().<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;-r&quot;</span>)) &#123;<br>            <span class="hljs-comment">//重启模式先kill原始进程</span><br>            QString originPid = qApp-&gt;<span class="hljs-built_in">arguments</span>().<span class="hljs-built_in">at</span>(<span class="hljs-number">4</span>).<span class="hljs-built_in">toLocal8Bit</span>();<br>            QProcess process;<br>            QString cmd = <span class="hljs-string">&quot;kill&quot;</span>;<br>            QStringList args;<br>            args &lt;&lt; <span class="hljs-string">&quot;-9&quot;</span> &lt;&lt; originPid;<br>            process.<span class="hljs-built_in">start</span>(cmd, args);<br>            process.<span class="hljs-built_in">waitForFinished</span>();<br>            <span class="hljs-built_in">qInfo</span>() &lt;&lt; <span class="hljs-string">&quot;kill origin process &quot;</span> &lt;&lt; originPid;<br>            <span class="hljs-keyword">if</span> (!DGuiApplicationHelper::<span class="hljs-built_in">setSingleInstance</span>(<span class="hljs-string">&quot;dde-printer&quot;</span>)) &#123;<br>                <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;restart process failed&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-3</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">qInfo</span>() &lt;&lt; <span class="hljs-string">&quot;restart process success&quot;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;dde-printer is running&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;<br>        &#125;<br><br>    &#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h1><p>&amp;emsp;&amp;emsp;对于后台自启程序，在更新时一定要注意重启的问题，因为更新会改变二进制，或者其它配置配置程序，需要重启才能生效。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/30/UOS%E7%B3%BB%E7%BB%9F%E6%89%93%E5%8D%B0%E6%9C%BA%E9%97%AE%E9%A2%98%E7%8E%B0%E5%9C%BA%E6%8C%87%E5%8D%97%20V0.1/"/>
    <url>/2023/03/30/UOS%E7%B3%BB%E7%BB%9F%E6%89%93%E5%8D%B0%E6%9C%BA%E9%97%AE%E9%A2%98%E7%8E%B0%E5%9C%BA%E6%8C%87%E5%8D%97%20V0.1/</url>
    
    <content type="html"><![CDATA[<h2 id="UOS系统打印机问题现场指南-V0-1"><a href="#UOS系统打印机问题现场指南-V0-1" class="headerlink" title="UOS系统打印机问题现场指南 V0.1"></a>UOS系统打印机问题现场指南 V0.1</h2><h3 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h3><ol><li><p>拍摄打印机的型号名牌,很多时候大家只拍摄了厂家的log. 打印机的铭牌上一般有以下信息:</p><ul><li>厂家的品牌Log</li><li>打印机的功能简单描述</li><li>打印机的具体型号 (非常重要)</li><li>打印机的输入电压范围</li><li>打印机的产地</li><li>打印机的具体生成厂家</li></ul></li><li><p>收集 lsusb 命令输出,类似这样的:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Bus</span> <span class="hljs-number">002</span> Device <span class="hljs-number">002</span>: ID <span class="hljs-number">8087</span>:<span class="hljs-number">0024</span> Intel Corp. Integrated Rate Matching Hub Bus <span class="hljs-number">002</span> Device <span class="hljs-number">001</span>: ID <span class="hljs-number">1</span>d6b:<span class="hljs-number">0002</span> Linux Foundation <span class="hljs-number">2</span>.<span class="hljs-number">0</span> root hub Bus <span class="hljs-number">001</span> Device <span class="hljs-number">005</span>: ID <span class="hljs-number">04</span>f2:b2eb Chicony Electronics Co., Ltd  Bus <span class="hljs-number">001</span> Device <span class="hljs-number">004</span>: ID <span class="hljs-number">0</span>a5c:<span class="hljs-number">21</span>e6 Broadcom Corp. BCM20702 Bluetooth <span class="hljs-number">4</span>.<span class="hljs-number">0</span><span class="hljs-meta"> [ThinkPad] Bus 001 Device 007: ID 0000:0538   Bus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></code></pre></td></tr></table></figure></li><li><p>收集 usb_printerid &#x2F;dev&#x2F;usb&#x2F;lp0 输出.</p><ul><li><p>其中参数 &#x2F;dev&#x2F;usb&#x2F;lp0, 要看当时打印机是连接在哪个usb接口上,默认是&#x2F;dev&#x2F;usb&#x2F;lp0;</p></li><li><p>如果 usb_printerid 没有任何输出，就尝试把 &#x2F;dev&#x2F;usb&#x2F;lp0 改成lp1,lp2,lp3等等.</p></li><li><p>比如东芝的某个打印机: <code>MFG:TOSHIBA;CMD:T.32;MDL:e-STUDIO225;</code></p></li><li><p>惠普的某个打印机</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">MFG</span><span class="hljs-symbol">:Hewlett-Packard</span>;<span class="hljs-variable constant_">MDL</span><span class="hljs-symbol">:HP</span> <span class="hljs-title class_">LaserJet</span> <span class="hljs-title class_">Professional</span> <span class="hljs-variable constant_">M1136MFP</span>;<span class="hljs-variable constant_">CMD</span><span class="hljs-symbol">:ZJS</span>,<span class="hljs-variable constant_">HBS</span>,<span class="hljs-variable constant_">PJL</span>,<span class="hljs-variable constant_">ACL</span>,<span class="hljs-variable constant_">HTTP</span>;<span class="hljs-variable constant_">CLS</span><span class="hljs-symbol">:PRINTER</span>;<span class="hljs-variable constant_">DES</span><span class="hljs-symbol">:HP</span> <span class="hljs-title class_">LaserJet</span> <span class="hljs-title class_">Professional</span> <span class="hljs-variable constant_">M1136MFP</span>;<span class="hljs-variable constant_">FWVER</span><span class="hljs-symbol">:</span><span class="hljs-number">20140317</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>收集 &#x2F;etc&#x2F;cups&#x2F;ppd 目录的所有ppd文件</p><ul><li>这个目录的每个ppd文件描述了一个打印机的能力和完成一次打印作业需要那些模块.</li></ul></li><li><p>收集cups的debug日志,步骤如下:</p><ul><li>打开 &#x2F;etc&#x2F;cups&#x2F;cupsd.conf 文件,找到 <code>Loglevel warn</code> 这一行改成<code>Loglevel debug</code></li><li>保存后，执行这个命令重启cups服务: <code>sudo /etc/init.d/cups restart．</code></li><li>再次打印一次文件, cups就会记录详细的打印日志到这个文件 &#x2F;var&#x2F;log&#x2F;cups&#x2F;error_log</li><li>另外还有 access_log 文件(记录提交给cups调度器的请求)和 page_log 文件(记录每页打印的情况).</li></ul></li><li><p>把前面5步的列出信息或文件,再加上打印有问题的文档文件一起压缩一下发回来.</p></li></ol><h3 id="cups-error-log-日志分析方法"><a href="#cups-error-log-日志分析方法" class="headerlink" title="cups error_log 日志分析方法"></a>cups error_log 日志分析方法</h3><h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><ol><li>第1列是日志级别:<ul><li>A - Alert message (LogLevel alert)</li><li>C - Critical error message (LogLevel crit)</li><li>D - Debugging message (LogLevel debug)</li><li>d - Detailed debugging message (LogLevel debug2)</li><li>E - Normal error message (LogLevel error)</li><li>I - Informational message (LogLevel info)</li><li>N - Notice message (LogLevel notice)</li><li>W - Warning message (LogLevel warn)</li><li>X - Emergency error message (LogLevel emerg)</li></ul></li><li>第2列是日志时间和时区</li><li>第3列是具体的日志内容</li><li>更多, 阅读手册: man cupsd-logs</li></ol><h4 id="日志内容的前缀标签"><a href="#日志内容的前缀标签" class="headerlink" title="日志内容的前缀标签"></a>日志内容的前缀标签</h4><p>[Job N], 所有以它开头的日志都是cups进行第N次打印作业的调度的日志, 非常重要,包含了以下信息.</p><ul><li><p>设置的打印参数和环境变量:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] argv[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;Hewlett-Packard-HP-LaserJet-Professional-M1216nfh-MFP&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] argv[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;45&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] argv[<span class="hljs-number">2</span>]=<span class="hljs-string">&quot;deepin&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] argv[<span class="hljs-number">3</span>]=<span class="hljs-string">&quot;安装.pdf&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] argv[<span class="hljs-number">4</span>]=<span class="hljs-string">&quot;1&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] argv[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;finishings=3 number-up=1 job-uuid=urn:uuid:5b4fd9f9-c4f2-3028-6aa5-971abb7f5c8e job-originating-host-name=localhost date-time-at-creation= date-time-at-processing= time-at-creation=1508295549 time-at-processing=1508295549 document-name-supplied=安装.pdf&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] argv[<span class="hljs-number">6</span>]=<span class="hljs-string">&quot;/var/spool/cups/d00045-001&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;CUPS_CACHEDIR=/var/cache/cups&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;CUPS_DATADIR=/usr/share/cups&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">2</span>]=<span class="hljs-string">&quot;CUPS_DOCROOT=/usr/share/cups/doc-root&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">3</span>]=<span class="hljs-string">&quot;CUPS_FONTPATH=/usr/share/cups/fonts&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">4</span>]=<span class="hljs-string">&quot;CUPS_REQUESTROOT=/var/spool/cups&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;CUPS_SERVERBIN=/usr/lib/cups&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">6</span>]=<span class="hljs-string">&quot;CUPS_SERVERROOT=/etc/cups&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">7</span>]=<span class="hljs-string">&quot;CUPS_STATEDIR=/var/run/cups&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">8</span>]=<span class="hljs-string">&quot;HOME=/var/spool/cups/tmp&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">9</span>]=<span class="hljs-string">&quot;PATH=/usr/lib/cups/filter:/usr/bin:/usr/sbin:/bin:/usr/bin&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">10</span>]=<span class="hljs-string">&quot;SERVER_ADMIN=root@deepin-pc&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">11</span>]=<span class="hljs-string">&quot;SOFTWARE=CUPS/2.1.3&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">12</span>]=<span class="hljs-string">&quot;TMPDIR=/var/spool/cups/tmp&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">13</span>]=<span class="hljs-string">&quot;USER=root&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">14</span>]=<span class="hljs-string">&quot;CUPS_MAX_MESSAGE=2047&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">15</span>]=<span class="hljs-string">&quot;CUPS_SERVER=/var/run/cups/cups.sock&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">16</span>]=<span class="hljs-string">&quot;CUPS_ENCRYPTION=IfRequested&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">17</span>]=<span class="hljs-string">&quot;IPP_PORT=631&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">18</span>]=<span class="hljs-string">&quot;CHARSET=utf-8&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">19</span>]=<span class="hljs-string">&quot;LANG=zh_CN.UTF-8&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">20</span>]=<span class="hljs-string">&quot;PPD=/etc/cups/ppd/Hewlett-Packard-HP-LaserJet-Professional-M1216nfh-MFP.ppd&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">21</span>]=<span class="hljs-string">&quot;RIP_MAX_CACHE=128m&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">22</span>]=<span class="hljs-string">&quot;CONTENT_TYPE=application/pdf&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">23</span>]=<span class="hljs-string">&quot;DEVICE_URI=usb://HP/LaserJet%20Professional%20M1216nfh%20MFP?serial=000000000QJA1550PR1a&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">24</span>]=<span class="hljs-string">&quot;PRINTER_INFO=Hewlett-Packard HP LaserJet Professional M1216nfh MFP&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">25</span>]=<span class="hljs-string">&quot;PRINTER_LOCATION=deepin-pc&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">26</span>]=<span class="hljs-string">&quot;PRINTER=Hewlett-Packard-HP-LaserJet-Professional-M1216nfh-MFP&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">27</span>]=<span class="hljs-string">&quot;PRINTER_STATE_REASONS=none&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">28</span>]=<span class="hljs-string">&quot;CUPS_FILETYPE=document&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">29</span>]=<span class="hljs-string">&quot;FINAL_CONTENT_TYPE=application/vnd.cups-pdf&quot;</span>      <span class="hljs-symbol">D</span> [<span class="hljs-number">18</span>/<span class="hljs-symbol">Oct</span>/<span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">45</span>] envp[<span class="hljs-number">30</span>]=<span class="hljs-string">&quot;AUTH_I****&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>需要哪些 filter:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">D [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">45</span>] <span class="hljs-number">2</span> filters <span class="hljs-keyword">for</span> job:      D [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">45</span>] pdftopdf (application<span class="hljs-regexp">/pdf to application/</span>vnd.cups-pdf, cost <span class="hljs-number">66</span>)<br></code></pre></td></tr></table></figure></li><li><p>目标 backend :</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">I [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">45</span>] Started filter <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/cups/</span>filter<span class="hljs-regexp">/pdftopdf (PID 12374)     I [18/Oct/2017:10:59:09 +0800] [Job 45] Started filter /u</span>sr<span class="hljs-regexp">/lib/</span>cups<span class="hljs-regexp">/filter/</span>foomatic-rip (PID <span class="hljs-number">12375</span>)     I [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">09</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">45</span>] Started backend <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/cups/</span>backend/usb (PID <span class="hljs-number">12376</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="进行简单排查-举例"><a href="#进行简单排查-举例" class="headerlink" title="进行简单排查,举例"></a>进行简单排查,举例</h4><ul><li><p>打开日志文件后先搜索 E 级别的日志, 优先排除:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">E [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">18</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">45</span>] Job stopped due to filter errors; please consult the error_log <span class="hljs-keyword">file</span> <span class="hljs-keyword">for</span> details.   E [<span class="hljs-number">30</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">08</span>:<span class="hljs-number">44</span>:<span class="hljs-number">06</span> +<span class="hljs-number">0800</span>] [cups-driverd] Bad driver information <span class="hljs-keyword">file</span> \\\\<span class="hljs-string">&quot;/usr/share/cups/model/uld-samsung/cms/CLP-360sc.cts\\\\&quot;</span>!  E [<span class="hljs-number">30</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">08</span>:<span class="hljs-number">44</span>:<span class="hljs-number">06</span> +<span class="hljs-number">0800</span>] [cups-driverd] Skipping \\\\<span class="hljs-string">&quot;/usr/share/ppd/uld-samsung\\\\&quot;</span>: loop detected!<br></code></pre></td></tr></table></figure></li><li><p>对于惠普的hplip插件的打印机搜索 hplip 字符串, 日志可以看出hplip插件没有安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">D [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">07</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">50</span>] prnt<span class="hljs-regexp">/hpcups/</span>HPCupsFilter.cpp <span class="hljs-number">429</span>: HPCUPS: found Printer Language, it is - ljzjstream  D [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">07</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">50</span>] STATE: +connecting-to-device  D [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">07</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">50</span>] STATE: +hplip.plugin-error  D [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">07</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">50</span>] prnt<span class="hljs-regexp">/hpcups/</span>HPCupsFilter.cpp <span class="hljs-number">486</span>: m_Job initialization failed with error = <span class="hljs-number">48</span>  D [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">07</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">50</span>] prnt<span class="hljs-regexp">/hpcups/</span>HPCupsFilter.cpp <span class="hljs-number">579</span>: HPCUPS: processRasterData returned <span class="hljs-number">1</span>, calling closeFilter()<br></code></pre></td></tr></table></figure></li><li><p>搜索 error 字符串, 这个日志看出,缺少libpopt库</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">D [<span class="hljs-number">26</span><span class="hljs-regexp">/Sep/</span><span class="hljs-number">2017</span>:<span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">21</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">28</span>] <span class="hljs-regexp">/usr/</span>bin/captfilter: error <span class="hljs-keyword">while</span> loading shared libraries: libpopt.so.<span class="hljs-number">0</span>: cannot open shared object <span class="hljs-keyword">file</span>: No such <span class="hljs-keyword">file</span> or directory<br></code></pre></td></tr></table></figure></li><li><p>搜索 status 字符串, 这个日志显示 foomatic-rip运行不正常, 错误码9:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">D [<span class="hljs-number">18</span><span class="hljs-regexp">/Oct/</span><span class="hljs-number">2017</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-number">10</span> +<span class="hljs-number">0800</span>] [Job <span class="hljs-number">45</span>] PID <span class="hljs-number">12375</span> (<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/cups/</span>filter/foomatic-rip) stopped with status <span class="hljs-number">9</span>.<br></code></pre></td></tr></table></figure></li><li><p>偶现错误，cups无法创建临时文件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">D</span> [<span class="hljs-number">26</span>/<span class="hljs-symbol">Aug</span>/<span class="hljs-number">2020</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span>:<span class="hljs-number">30</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">8</span>] envp[<span class="hljs-number">12</span>]=<span class="hljs-string">&quot;TMPDIR=/var/spool/cups/tmp&quot;</span><span class="hljs-symbol">D</span> [<span class="hljs-number">26</span>/<span class="hljs-symbol">Aug</span>/<span class="hljs-number">2020</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span>:<span class="hljs-number">30</span> +<span class="hljs-number">0800</span>] [<span class="hljs-symbol">Job</span> <span class="hljs-number">8</span>] <span class="hljs-symbol">Set</span> job-printer-state-message to <span class="hljs-string">&quot;Can\&#x27;t create temporary file&quot;</span>, current level=<span class="hljs-symbol">ERROR</span><br></code></pre></td></tr></table></figure></li></ul><p>&amp;emsp;&amp;emsp;问题原因：cups是lp用户组，没有TMPDIR目录的写权限。通过getfacl &#x2F;var&#x2F;spool&#x2F;cups&#x2F;tmp可以查看权限问题。解决办法：</p><p>&amp;emsp;&amp;emsp;sudo setfacl -m g:lp:rwx &#x2F;var&#x2F;spool&#x2F;cups&#x2F;tmp</p><p>&amp;emsp;&amp;emsp;sudo setfacl -m d:group:lp:rwx &#x2F;var&#x2F;spool&#x2F;cups&#x2F;</p><ul><li><p>用户组权限问题：</p><p>新版欧拉系统测试打印管理器，发现lpinfo -v可以发现直接的打印机，但是打印管理器自动发现没找到，有一个细节就是用户需要sudo才能执行该命令，但是正常的专业版是不需要的，所以应该是当前用户不在lp和lpadmin组，导致无法管理打印机。输入id命令查看当前用户所属组，发现确实用户默认没有lp和lpadmin组。所以手动添加组即可，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -a -G lp user   <span class="hljs-comment">#给user用户添加lp组sudo usermod -a -G lpadmin user #给user用户添加lpadmin组</span><br></code></pre></td></tr></table></figure><p>&gt; 目前欧拉版和行业版基于centos，所有的打印机驱动没有适配，暂时需要手动下载安装驱动</p></li><li><p>filter权限问题</p><p>安装print-scan这个驱动包，添加打印机打印，cups错误如下：</p><p>正确的filter权限如下图：</p><p>发现现场的filter的owner和group被修改成了非root，手动修改为root就好了，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> root:root file<br></code></pre></td></tr></table></figure></li><li><p>驱动正确安装但是无法打印</p><p>在打印机管理器中安装了推荐的佳能驱动，添加打印机成功，但是无法打印，打印管理器日志提示filter错误，cups日志找到具体问题，提示 libcupsimage找不到。所以直接apt安装这个 libcupsimage2就可以解决。</p></li><li><p>天融信审计软件问题</p><p>正常添加打印机后，无法打印，查看cups日志发现打印机的uri被串改，前缀多了个TDABACKEND0,导致后续的filter-backend流程错误。卸载或者升级该软件重新添加打印机即可。</p></li></ul><h3 id="共享打印机常见问题"><a href="#共享打印机常见问题" class="headerlink" title="共享打印机常见问题"></a>共享打印机常见问题</h3><p>共享打印机的分为两个开关，设置里面的是总开关，打印机列表的右键菜单里面的共享是针对单个打印机，所以需要先在设置里面开启总开关（第一和第二项）。共享Linux打印机，通常使用ipp协议打印机，自动匹配的驱动是ipp everywhere无驱方案。共享windows打印机，需要先在windows开启lpd，然后选择对应的lpd协议打印机。smb协议打印机目前存在问题，尽量避免使用该协议打印机（一般正常情况不会出现，除非搜索不到别的协议打印机）。</p><h3 id="三种添加打印机的区别"><a href="#三种添加打印机的区别" class="headerlink" title="三种添加打印机的区别"></a>三种添加打印机的区别</h3><ul><li><p>自动查找</p><p>自动查找可以发现同网段的网络打印机、同网段的其他用户共享的打印机和直连的USB打印机。</p></li><li><p>手动查找</p><p>手动查找分为两种情况，一种是查找指定ip共享的打印机，一种是查找指定ip的打印机。直接连接指定ip的打印机，协议为socket，端口为9100，所以需要确保ip和端口可以正常访问。</p></li><li><p>URI添加</p><p>这种情况是知道打印机的URI和对应的型号以及驱动，纯手动添加打印机，比如有些打印机的端口不是9100，查找不到，就可以使用这种方式添加打印机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap ip   <span class="hljs-comment">#扫描开放的端口</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="云打印常见问题排查"><a href="#云打印常见问题排查" class="headerlink" title="云打印常见问题排查"></a>云打印常见问题排查</h2><ul><li><p>服务器配置界面无法显示ip</p><p>首先排查服务是否启动，在任务管理器当中查看DeepinCloudPrintService服务是否启动，没有启动就先进入程序安装目录，管理员启动cmd，执行CloudPrint.exe install,手动安装这个服务，查看是否存在错误，常见错误就是说DeepinCloudPrintService这个注册表项已经存在了，所以需要启动注册表编辑器搜索这个项，删掉这个对应的注册表就行，然后重新手动安装服务，或者重新安装这个安装包。</p></li><li><p>客户端能够连接服务器，但是打印任务一直暂停</p><p>首先排查客户端后台服务是否启动，ps aux|grep cloud,看输出的结果里面damon和agent两个后台进程是否启动，目前由于dtk升级导致不兼容的问题，会导致agent这个进程无法启动，直接终端启动&#x2F;usr&#x2F;lib&#x2F;deepin-daemon&#x2F;deepin-cloud-print-agent,会报dtkwidget的无法找到符号的问题。这时候升级libdtkwidget5就行，升级完然后直接启动云打印客户端就可以自动启动agent后台程序，不需要重新启动系统。</p></li><li><p>勾选逐份导致打印出现多份的情况</p><p>原因是5.2.0.0之前的版本，在客户端和服务端都处理了多份这个参数，所以导致打两份出现四份的情况。在5.2.0.0及之后的版本已经修复。</p></li><li><p>无法打印彩色文档</p><p>原因是有两方面，一个是打印软件比如是wps，没有将color参数传递给cups，第二个原因是云打印客户端默认是gray（灰色模式），5.2.0.0及以后的版本修复这个问题。但是打印机也分不同的情况，有的打印机能够识别windows传递给打印机的色彩参数，有的打印机并不能识别这个参数，这种情况也会导致无法打印彩色（这种不属于云打印的问题）。</p></li><li><p>双面打印参数问题</p><p>有的打印机本身支持双面打印，但是在windows上通过驱动读取的结果不正确，显示不支持。导致将打印能力传到客户端时，客户端根据错误的结果生成打印机ppd，然后打印软件比如wps等就没有了双面打印的选项，只有一个手动双面打印。解决办法就是手动修改ppd里面的内容，自己增加双面打印的选项。ppd路径在&#x2F;etc&#x2F;cups&#x2F;ppd&#x2F;目录下，文件名是打印机的名字，添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs textile">*OpenUI *Duplex/2-Sided Printing: PickOne<br>*OrderDependency: 10 AnySetup *Duplex<br>*DefaultDuplex: None<br>*Duplex None/Off (1-Sided): &quot;&lt;&lt;/Duplex false&gt;&gt;setpagedevice&quot;<br>*Duplex DuplexNoTumble/Long-Edge (Portrait): &quot;&lt;&lt;/Duplex true/Tumble false&gt;&gt;setpagedevice&quot;<br>*Duplex DuplexTumble/Short-Edge (Landscape): &quot;&lt;&lt;/Duplex true/Tumble true&gt;&gt;setpagedevice&quot;<br>*CloseUI: *Duplex<br></code></pre></td></tr></table></figure><p>添加完如下图所示：</p><p>wps打印属性添加完结果如下图所示：</p><p>修改完需要重启cups服务，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart cups<br></code></pre></td></tr></table></figure></li></ul><h2 id="云打印日志路径"><a href="#云打印日志路径" class="headerlink" title="云打印日志路径"></a>云打印日志路径</h2><ul><li><p>客户端界面程序 ：~&#x2F;.cache&#x2F;uniontech&#x2F;deepin-cloud-print&#x2F;deepin-cloud-print.log</p></li><li><p>客户端dcp程序 ： &#x2F;var&#x2F;log&#x2F;cups&#x2F;dcp_log</p></li><li><p>服务端界面程序：%temp%&#x2F;deepin-cloud-print-config&#x2F;dcpc.log</p></li><li><p>服务端后台程序：安装目录的Logs&#x2F;cloud-print-server.log</p></li></ul><blockquote><p>1.1.1.1及之后版本服务端的日志都会放在安装目录的Logs目录</p></blockquote><h2 id="云打印缓存文件开关"><a href="#云打印缓存文件开关" class="headerlink" title="云打印缓存文件开关"></a>云打印缓存文件开关</h2><p>为了方便前端排查问题，云打印服务端（1.1.3）和客户端（5.2.1）新增保留缓存文件开关。</p><ul><li><p>服务端</p><p>打开注册表，搜索DeepinCloudPrintServer，将IsCacheMode的值修改为1（默认是0表示不缓存），用完记得改回0。缓存目录在安装目录的Cache目录。截图如下：</p></li><li><p>客户端</p><p>添加一个 &#x2F;usr&#x2F;share&#x2F;dcp&#x2F;dcp.conf 文件(原始不存在，用完记得删除)，缓存路径在&#x2F;var&#x2F;spool&#x2F;dcp&#x2F;SPOOL&#x2F;路径，具体文件名参考dcp日志最后输出的缓存文件名。</p><p>内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[IsCacheMode]</span><br><span class="hljs-attr">Mode</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CMake学习笔记</title>
    <link href="/2021/11/13/CMake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/13/CMake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1、CMake生成vs工程去掉控制台界面"><a href="#1、CMake生成vs工程去掉控制台界面" class="headerlink" title="1、CMake生成vs工程去掉控制台界面"></a>1、CMake生成vs工程去掉控制台界面</h1><p>&amp;emsp;&amp;emsp;在使用CMake生成vs工程（Qt GUI）,启动之后会先启动一个控制台，非常不雅观，这个配置如果是是在qmake的pro中配置，只需要将CONFIG中的console选项去掉即可。在CMake中可以在有如下两种方式解决：</p><ul><li>add_executable</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_executable</span>(&lt;name&gt; [WIN32] [MACOSX_BUNDLE]               [EXCLUDE_FROM_ALL]               source1 source2 ... sourceN)<br></code></pre></td></tr></table></figure><p>创建进程时选择WIN32参数即可。</p><ul><li><p>set_target_properties</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set_target_properties</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES LINK_FLAGS_RELEASE <span class="hljs-string">&quot;/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><p>这两种做法是等价的，但是明显第一个要简单。</p>]]></content>
    
    
    <categories>
      
      <category>CMake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt嵌入CEF浏览器</title>
    <link href="/2021/11/13/Qt%E5%B5%8C%E5%85%A5CEF%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <url>/2021/11/13/Qt%E5%B5%8C%E5%85%A5CEF%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Qt嵌入CEF浏览器"><a href="#Qt嵌入CEF浏览器" class="headerlink" title="Qt嵌入CEF浏览器"></a>Qt嵌入CEF浏览器</h1><p>&amp;emsp;&amp;emsp;主要记录Qt嵌入cef踩过的坑。</p><p>一、QCommandLineParse不正确使用导致无法显示网页</p><p>&amp;emsp;&amp;emsp;Qt已经有事件循环，所以不能直接使用CEF的事件循环，需要将CEF浏览器的界面作为子窗体给Qt窗口，最重要的是初始化时调用CefExcuteProcess创建CEF的子进程，这些子进程从启动参数来看是用来渲染和gpu加速的作用，这些子进程在默认情况下会fork主进程，也就是说这些子进程的入口仍然是主进程的入口，但是启动的参数不一样。因为有这样一个设定，我踩了一个坑，在cef初始化之前调用QCommandLineParse去解析QApplication的参数，这些参数是给主进程提供的命令行参数。但是后面fork的子进程也是从这个入口进入，而且参数和主进程完全没有关系，但是还是会调用QCommandLineParse 的process接口，本来解析也是没有问题的，但是这个process有个大bug，遇到不认识的参数时会出现错误，并且会停止当前的进程，这时就意外的导致CEF创建的子进程并挂住了。Qt和CEF都给出了各自的提示信息，Qt的提示信息如下：</p><blockquote><p>Unknown Options:type no-sandbox xxxxxxxx</p></blockquote><p>CEF给出的提示如下：</p><blockquote><p>Failed to launch GPU process.</p><p>Lost UI shared context</p></blockquote><p>其实这些提示信息已经非常明显，但是刚开始不知道cef的多进程机制，再加上没有仔细了解process这个接口的错误处理机制。其实如果在debug的情况下打个断点，应该很容易发现主入口进入了多次，并且卡在了process这个函数这里。</p>]]></content>
    
    
    <categories>
      
      <category>Qt-CEF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>CEF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt基础教程之常用控件</title>
    <link href="/2021/11/10/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/"/>
    <url>/2021/11/10/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Qt基础教程之常用控件"><a href="#Qt基础教程之常用控件" class="headerlink" title="Qt基础教程之常用控件"></a>Qt基础教程之常用控件</h1><p>&amp;emsp;&amp;emsp;本文作为Qt培训的基础篇，主要是给Qt新手介绍一下Qt的常用控件。在讲这些之前，我觉得对于新手来说首先应该学会使用Qt的IDE，也就是QtCreator。</p><h2 id="一、QtCreator"><a href="#一、QtCreator" class="headerlink" title="一、QtCreator"></a>一、QtCreator</h2><h3 id="1-1、代码格式化"><a href="#1-1、代码格式化" class="headerlink" title="1.1、代码格式化"></a>1.1、代码格式化</h3><p>&amp;emsp;&amp;emsp;多人开发项目需要注意就是代码风格问题，每个人代码风格不一样，在改别人的代码时不小心就会将别人的代码格式化为自己的代码风格，导致git提交代码改动很大，但是都是无效修改，所以需要在项目组内规范代码格式化风格。</p><p><img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-10-20-56-49-image.png"></p><p>&amp;emsp;&amp;emsp; QtCreator默认使用ClangFormat风格格式化代码，但是有个缺点就是无法满足定制化需求，比如去掉多余空行。所以可以下载astyle这个插件，导入到IDE中，然后都使用同一种风格格式化就行。下面我给了一个比较实用的风格供参考。</p><p><img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-10-20-57-28-image.png"></p><h3 id="1-2、Qt语言家"><a href="#1-2、Qt语言家" class="headerlink" title="1.2、Qt语言家"></a>1.2、Qt语言家</h3><p>&amp;emsp;&amp;emsp;开发桌面项目考虑到后续国际化，尽量不要在代码中引用中文，全部使用英文源码，这样可以减少很多编码问题，同时方便后续维护。前面没有其他语言的需求时，只用生成一份中文的翻译即可，这样后续有了其他语言的翻译需求，就不用改源码，而只需要加对应的翻译。qmake中添加翻译如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs textile">TRANSLATIONS  +=  resources/tr_zh.ts  \<br>        resources/tr_en.ts<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;源码中使用tr(“”)包裹需要翻译的英文。</p><p><img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-10-21-18-21-image.png"></p><p>&amp;emsp;&amp;emsp;菜单中《更新翻译》是更新翻译文档的源码.ts类型文件，生成ts文件后可以双击ts文件打开语言家进行编辑，翻译对应的中文。<img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-10-21-23-14-image.png">&amp;emsp;&amp;emsp;《发布翻译》是指将ts源码生成最终程序使用的二进制.qm格式，然后程序去加载对应的qm翻译文件。对于习惯使用ide的人来说，这样操作比较方便。但是如果代码不是人工编译，而是流水线自动编译的话，就需要将这个过程配置在qmake或者cmake的构建阶段，作为一个单独的任务执行。</p><h3 id="1-3、文档注释"><a href="#1-3、文档注释" class="headerlink" title="1.3、文档注释"></a>1.3、文档注释</h3><p>&amp;emsp;&amp;emsp;很多时候阅读别人的代码非常困难，一方面是代码设计问题，一方面就是缺乏注释。QtCreator可以添加注释模板，比如常用的函数注释，头文件注释，下面示例就是头文件注释模板，定义之后，在代码中敲Head就会出现注释提示，可以节省很多时间。</p><p><img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-10-21-37-13-image.png"></p><h3 id="1-4、Qt设计师"><a href="#1-4、Qt设计师" class="headerlink" title="1.4、Qt设计师"></a>1.4、Qt设计师</h3><p>&amp;emsp;&amp;emsp;Qt界面开发有两种模式，一种是纯代码手动布局控件，另外一种就是借助设计师托控件，让IDE帮你自动生成界面代码，你只需要实现逻辑即可。</p><p><img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-10-21-50-02-image.png"></p><h4 id="1-4-1、布局"><a href="#1-4-1、布局" class="headerlink" title="1.4.1、布局"></a>1.4.1、布局</h4><p>&amp;emsp;&amp;emsp;界面如果缺乏布局，就会非常凌乱。常见布局分为三种，垂直、水平和网格。从字面意思就能理解这三种布局的区别。在设计师上放置布局，首先选中控件，然后右键选择菜单中的《布局》，二级菜单中就有对应的三种布局，设置布局之后就可以往布局上拖动控件，如果想要去掉父窗体的布局，选二级菜单中的《打破布局》。</p><p><img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-11-09-27-27-image.png"></p><h4 id="1-4-2、提升控件"><a href="#1-4-2、提升控件" class="headerlink" title="1.4.2、提升控件"></a>1.4.2、提升控件</h4><p>&amp;emsp;&amp;emsp;自定义控件由于没有实现Qt设计师插件，所以无法直接在界面上拖，需要借助《提升控件》这个功能，因为控件的基类都是QWidget,所以一般都是在界面上拖一个QWidget作为基类，然后提升成自定义的派生类。</p><p>&amp;emsp;&amp;emsp;假设你想将一个自定义的CustomWidget(继承于QWidget)放到设计师界面，先放置一个QWidget,然后右键选择《提升为》，出现下面界面之后先将基类选择为QWidget,然后填写对应的类名称，ide会自动填写头文件。然后点击添加，添加完最后点击提升。这样右侧对象树的类就会变成自定义类型。</p><p><img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-11-09-32-12-image.png"></p><h4 id="1-4-3、样式表"><a href="#1-4-3、样式表" class="headerlink" title="1.4.3、样式表"></a>1.4.3、样式表</h4><p>&amp;emsp;&amp;emsp;样式表（Qt Style Sheet）是为了美化界面，和前端界面的CSS一样，但是只是实现了CSS2以及部分CSS3的功能。为控件设置样式表，右键控件选择《改变样式表》，然后输入样式表点击Apply按钮就可以预览效果。</p><p><img src="/Qt%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%5C2021-11-11-09-47-59-image.png"></p><p>&amp;emsp;&amp;emsp;但是对于维护来说这样就非常零散，每个控件里面都有自己的样式表，比较好的做法是将一套皮肤的样式表作为一个独立的文件，在程序启动时由QApplication全局加载，然后在切换皮肤（比如常见的深色和浅色模式）时，也能很方便整体切换。</p><h2 id="二、常用控件介绍"><a href="#二、常用控件介绍" class="headerlink" title="二、常用控件介绍"></a>二、常用控件介绍</h2><p>&amp;emsp;&amp;emsp;Qt的widget控件可以大体分为三种类型，1、窗体控件；2、单体式功能控件；3、容器型控件。容器型控件一般分为两种模式，一种是开箱即用的，内部已经封装好了默认Model，比如QListWidget。第二种就是稍微原始一点的，需要自定义Model的，缺点是用户需要继承Model类比如常用的QStandardItemModel，在此基础上实现model基类提供的虚函数接口，自己管理数据增、删和改等行为。但是优势也是非常明显，控件的用法就会非常灵活，可以快捷实现各种显示需求，比如常见的消息置顶、排序等功能。</p><h3 id="2-1、窗体控件"><a href="#2-1、窗体控件" class="headerlink" title="2.1、窗体控件"></a>2.1、窗体控件</h3><h4 id="2-1-1、QMainWindow"><a href="#2-1-1、QMainWindow" class="headerlink" title="2.1.1、QMainWindow"></a>2.1.1、QMainWindow</h4><p>&amp;emsp;从命名看就知道这是主窗体控件，其实QWidget没有父窗体也可以作为窗体控件，QMainWindow相比QWidget的优势在于已经集成了常用的主窗体所需要的元素，比如菜单栏（QMenuBar）和状态栏（QStatusBar）。QMainWindow使用需要注意的是控件整体已经存在布局了，不能直接给QMainWindow加布局。中央区域的centralWidget才是给用户显示自己控件的地方。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>QPushButton *btn1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>();<br><br>QPushButton *btn2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>();<br><br>QPushButton *btn3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>();<br><br>QHBoxLayout *layout = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QHBoxLayout</span>();<br><br>layout-&gt;<span class="hljs-built_in">addWidget</span>(btn1);<br><br>layout-&gt;<span class="hljs-built_in">addWidget</span>(btn2);<br><br>layout-&gt;<span class="hljs-built_in">addWidget</span>(btn3);<br><br><span class="hljs-comment">//this-&gt;setLayout(layout);   //错误写法</span><br><br>ui-&gt;centralwidget-&gt;<span class="hljs-built_in">setLayout</span>(layout); <span class="hljs-comment">//正确写法</span><br></code></pre></td></tr></table></figure><blockquote><p>错误写法Qt会给出警告“QWidget::setLayout: Attempting to set QLayout “” on MainWindow “MainWindow”, which already has a layout” 。编程的一个细节就是需要从警告学习正确做法，很多时候编译器和IDE等都会给出各种警告，很多时候一些程序异常崩溃问题就藏在这些被忽视的警告中，比如常见的无符号和有符号反转、整型溢出，很多程序都有这种类型的编译警告。一个健壮的程序首先应该从去除程序的编译警告开始。</p></blockquote><h4 id="2-1-2、QDialog"><a href="#2-1-2、QDialog" class="headerlink" title="2.1.2、QDialog"></a>2.1.2、QDialog</h4><p>&amp;emsp;QDialog作为弹出式对话框使用，没有特殊需求使用默认的即可，上面已经集成了文本显示，确定和取消等按钮。这个控件需要注意的是内存释放问题，我看到有一个奇怪的用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QDailog *dialog=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QDialog</span>();<br>dialog-&gt;<span class="hljs-built_in">exec</span>();<br></code></pre></td></tr></table></figure><p>这是很明显的错误用法，导致内存泄漏，exec()是一个阻塞的函数，会进入事件循环，这里并不会导致立即释放窗体对象。正确用法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QDailog dialog;<br>dialog.<span class="hljs-built_in">exec</span>();<br></code></pre></td></tr></table></figure><p>这样对话框结束后出了作用域自动释放内存即可。</p><h4 id="2-1-3、QSplashScreen"><a href="#2-1-3、QSplashScreen" class="headerlink" title="2.1.3、QSplashScreen"></a>2.1.3、QSplashScreen</h4><p>&amp;emsp;&amp;emsp;这是一种常用的软件封面弹窗，在软件启动阶段执行，基本用法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br>      <span class="hljs-function">QPixmap <span class="hljs-title">pixmap</span><span class="hljs-params">(<span class="hljs-string">&quot;:/splash.png&quot;</span>)</span></span>;<br>      <span class="hljs-function">QSplashScreen <span class="hljs-title">splash</span><span class="hljs-params">(pixmap)</span></span>;<br>      splash.<span class="hljs-built_in">show</span>();<br>      app.<span class="hljs-built_in">processEvents</span>();<br>      ...<br>      QMainWindow window;<br>      window.<span class="hljs-built_in">show</span>();<br>      splash.<span class="hljs-built_in">finish</span>(&amp;window);<br>      <span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br>  &#125;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;如果需要做一些动画效果，简单的方式可以加载gif，或者重写该类的paintEvent接口。</p><h3 id="2-2、单体式功能控件"><a href="#2-2、单体式功能控件" class="headerlink" title="2.2、单体式功能控件"></a>2.2、单体式功能控件</h3><h4 id="2-2-1、QPushButton"><a href="#2-2-1、QPushButton" class="headerlink" title="2.2.1、QPushButton"></a>2.2.1、QPushButton</h4><p>&amp;emsp;&amp;emsp;这个控件本身基础功能很简单，就是提供一个按钮，然后给用户提供自定义的点击相应信号槽。比较适合带文字显示的按钮。需要注意的是点击（click）本身并不是一个基础事件，click包含press和release两个动作。这个控件有两个接口需要注意：1、setAutoRepeat，这个设置为true时，只要把按钮按下，就会一直发送pressed(), released(), 和 clicked() 信号。2、setMenu(),这个接口可以给按钮设置菜单。</p><h4 id="2-2-2、QToolButton"><a href="#2-2-2、QToolButton" class="headerlink" title="2.2.2、QToolButton"></a>2.2.2、QToolButton</h4><p>&amp;emsp;&amp;emsp;这个按钮比较适合作为工具栏上的图标按钮，比如word文档上的菜单栏，这个按钮可拓展性比较高，可以结合qss定制成各种类型的按钮。</p><h4 id="2-2-3、QCheckBox"><a href="#2-2-3、QCheckBox" class="headerlink" title="2.2.3、QCheckBox"></a>2.2.3、QCheckBox</h4><p>    这是复选框控件，一般作用就是给用户提供勾选项，如果是多项需要互质只能选择一项，那么可以结合QButtonGroup实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QButtonGroup *group = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QButtonGroup</span>(<span class="hljs-keyword">this</span>);<br>group-&gt;<span class="hljs-built_in">addButton</span>(ui-&gt;checkBox,<span class="hljs-number">1</span>);<br>group-&gt;<span class="hljs-built_in">addButton</span>(ui-&gt;checkBox_2,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h4 id="2-2-4、QComboBox"><a href="#2-2-4、QComboBox" class="headerlink" title="2.2.4、QComboBox"></a>2.2.4、QComboBox</h4><p>&amp;emsp;&amp;emsp;这是下拉框控件，常规用法很简单，这里就不细讲。这里讲两个比较实用的用法：</p><ul><li><p>自动补全</p><p>如果下拉框中选项过多，用户选择起来就会非常困难，所以可以打开可编辑属性，然后提供自动补全功能，这样使用起来就会很方便。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QComboBox *m_ComboBox=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QComboBox</span>(<span class="hljs-keyword">this</span>);<br>m_ComboBox-&gt;<span class="hljs-built_in">setEditable</span>(<span class="hljs-literal">true</span>);<br>QStandardItemModel *model=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItemModel</span>(<span class="hljs-keyword">this</span>);    <span class="hljs-comment">//源数据</span><br>QList&lt;QStandardItem *&gt; row;<br>QStandardItem *blankitem=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(<span class="hljs-string">&quot;&quot;</span>);<br>model-&gt;<span class="hljs-built_in">appendRow</span>(blankitem);<span class="hljs-comment">//增加一行空白</span><br>QStringList list=<span class="hljs-built_in">getList</span>();<span class="hljs-comment">//获取数据函数</span><br>foreach (QStringList name, list) &#123;<br>    <span class="hljs-keyword">if</span>(!name.<span class="hljs-built_in">isEmpty</span>())&#123;<br>        row.<span class="hljs-built_in">clear</span>();<br>        QStandardItem *item=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(name);<br>        model-&gt;<span class="hljs-built_in">appendRow</span>(item);<span class="hljs-comment">//添加一行，2列数据</span><br>    &#125;<br>&#125;<br>m_ComboBox-&gt;<span class="hljs-built_in">setModel</span>(model);<span class="hljs-comment">//QComboBox设置数据源</span><br>   <br>QCompleter *completer=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QCompleter</span>(m_ComboBox);<br>completer-&gt;<span class="hljs-built_in">setCaseSensitivity</span>(Qt::CaseInsensitive);<br>completer-&gt;<span class="hljs-built_in">setModel</span>(model);<br>completer-&gt;<span class="hljs-built_in">setCompletionColumn</span>(m_ComboBox-&gt;<span class="hljs-built_in">modelColumn</span>());<br>completer-&gt;<span class="hljs-built_in">setCompletionMode</span>(QCompleter::UnfilteredPopupCompletion);<br>completer-&gt;<span class="hljs-built_in">setMaxVisibleItems</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//下拉最大高度</span><br>completer-&gt;<span class="hljs-built_in">popup</span>()-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QListView&#123;font:75 12pt \&quot;微软雅黑\&quot;;subcontrol-origin: padding;subcontrol-position: top right;width: 20px;&#125;&quot;</span>);<span class="hljs-comment">//设置弹出的补全列表样式</span><br>   <br>m_ComboBox-&gt;<span class="hljs-built_in">setCompleter</span>(completer);<span class="hljs-comment">//设置自动补全</span><br></code></pre></td></tr></table></figure></li><li><p>自定义下拉List界面</p><p>默认下拉框的List界面样式不够丰富可以调用setView()接口传入自定义的View。</p></li></ul><h4 id="2-2-5、QLineEdit"><a href="#2-2-5、QLineEdit" class="headerlink" title="2.2.5、QLineEdit"></a>2.2.5、QLineEdit</h4><p>&amp;emsp;&amp;emsp;文本输入框，重点接口：</p><ul><li><p>setEchoMode()设置显示模式，可以设置显示模式，比如输入时显示点或者星号作为密码框具体四种模式可以查看文档详细了解。</p></li><li><p>setPlaceholderText设置默认显示文本，一般作为提示信息，用户编辑时就会覆盖。</p></li></ul><h4 id="2-2-5、QLabel"><a href="#2-2-5、QLabel" class="headerlink" title="2.2.5、QLabel"></a>2.2.5、QLabel</h4><p>&amp;emsp;&amp;emsp;这个控件一般有两种用法，1、显示文本；2、显示图片，支持gif图片。</p><h4 id="2-2-6、QTextEdit"><a href="#2-2-6、QTextEdit" class="headerlink" title="2.2.6、QTextEdit"></a>2.2.6、QTextEdit</h4><p>&amp;emsp;&amp;emsp;这个是富文本编辑框，支持HTML用法，有时候为了简单方便做出复杂的效果，可以直接使用现成的HTML的语法，比如实现语法高亮等。利用这个控件可以做一个简单的word文档编辑器。这里介绍一下插入图片的两种实现方法：</p><ul><li><p>Qt API</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">QImage <span class="hljs-title">image</span><span class="hljs-params">(<span class="hljs-string">&quot;:/Images/qq&quot;</span>)</span></span>;<br><br><span class="hljs-keyword">if</span> (image.<span class="hljs-built_in">isNull</span>()) <br>        <span class="hljs-keyword">return</span>;<br>  <br><span class="hljs-type">int</span> width = text_edit-&gt;<span class="hljs-built_in">viewport</span>()-&gt;<span class="hljs-built_in">width</span>();<br><span class="hljs-type">int</span> height = text_edit-&gt;<span class="hljs-built_in">viewport</span>()-&gt;<span class="hljs-built_in">height</span>();<br><span class="hljs-keyword">if</span> (image.<span class="hljs-built_in">width</span>() &gt; width || image.<span class="hljs-built_in">height</span>() &gt; height) &#123;<br>        image = image.<span class="hljs-built_in">scaled</span>(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, Qt::KeepAspectRatio, Qt::SmoothTransformation);<br>&#125;<br>  <br>QTextCursor cursor = text_edit-&gt;<span class="hljs-built_in">textCursor</span>();<br>QTextDocument *document = text_edit-&gt;<span class="hljs-built_in">document</span>();<br>cursor.<span class="hljs-built_in">movePosition</span>(QTextCursor::End);<br>  <br><br>document-&gt;<span class="hljs-built_in">addResource</span>(QTextDocument::ImageResource, <span class="hljs-built_in">QUrl</span>(<span class="hljs-string">&quot;:/Images/qq&quot;</span>),  <span class="hljs-built_in">QVariant</span>(image));<br>  <br><span class="hljs-comment">//插入图像，使用QTextCursor API文档：</span><br>QTextImageFormat image_format;<br>image_format.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;:/Images/qq&quot;</span>);<br>cursor.<span class="hljs-built_in">insertImage</span>(image_format);<br></code></pre></td></tr></table></figure></li><li><p>HTML</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">text_edit-&gt;<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;&lt;img src=\&quot;mydata://image.png\&quot; /&gt;&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3、容器型控件"><a href="#2-3、容器型控件" class="headerlink" title="2.3、容器型控件"></a>2.3、容器型控件</h3><p>&amp;emsp;&amp;emsp;容器型控件参考stl标准库中各种容器，比如std::list&lt;&#x3D;&gt;QListWidget(QListView)</p><h4 id="2-3-1、QListWidget与QListView"><a href="#2-3-1、QListWidget与QListView" class="headerlink" title="2.3.1、QListWidget与QListView"></a>2.3.1、QListWidget与QListView</h4><p>&amp;emsp;&amp;emsp;这两个都是作为列表控件，QListWidget已经封装了Model组件，用户能够操作的就是QListWidgetItem,而QListView仅仅只是预留了接口，并没有集成Model组件，需要用户自己去实现Model类的接口。</p><ul><li><p>QListWidget基础操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QListWidgetItem *newItem = <span class="hljs-keyword">new</span> QListWidgetItem;<br>newItem-&gt;<span class="hljs-built_in">setText</span>(itemText);<br><br>listWidget-&gt;<span class="hljs-built_in">insertItem</span>(row, newItem);<br></code></pre></td></tr></table></figure></li></ul><p>对于这个控件来说只需要掌握它的几种信号发射时机区别即可，比如currentItemChanged(QListWidgetItem *current, QListWidgetItem *previous)信号是告诉你选择的项目发生变化，并且给出了前后两个Item的指针方便进一步操作。这里QListWidgetItem有个接口void  setData(int  role,  const  QVariant  &amp;value)。这个可以给每个Item按照角色（role）存储自定义的数据，通常用户setText时其实就是把数据存储到了Qt::DisplayRole对应的数据中，Qt自定义的这些role一般最好不要手动通过setData去修改。为此Qt提供了Qt::UserRole,用户自己的数据存放在用户角色就行。</p><ul><li><p>QListView</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ListView               = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QListView(<span class="hljs-params">this</span>)</span>;<br><br>StandardItemModel      = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QStandardItemModel(<span class="hljs-params">this</span>)</span>;<br><br>     <br>QStandardItem* item1    = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QStandardItem(QIcon(<span class="hljs-string">&quot;1.bmp&quot;</span>)</span>, <span class="hljs-string">&quot;item1&quot;</span>);<br><br>QStandardItem* item2    = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QStandardItem(QIcon(<span class="hljs-string">&quot;2.bmp&quot;</span>)</span>, <span class="hljs-string">&quot;item2&quot;</span>);<br><br>QStandardItem* item3    = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QStandardItem(<span class="hljs-string">&quot;item3&quot;</span>)</span>;<br>StandardItemModel-&gt;append<span class="hljs-constructor">Row(<span class="hljs-params">item1</span>)</span>;<br><br>StandardItemModel-&gt;append<span class="hljs-constructor">Row(<span class="hljs-params">item2</span>)</span>;<br><br>StandardItemModel-&gt;append<span class="hljs-constructor">Row(<span class="hljs-params">item3</span>)</span>;<br><br>     <br>ListView-&gt;set<span class="hljs-constructor">IconSize(QSize(40, 30)</span>);<br><br>ListView-&gt;set<span class="hljs-constructor">Model(<span class="hljs-params">iStandardItemModel</span>)</span>;<br><br></code></pre></td></tr></table></figure></li></ul><p>&amp;emsp;&amp;emsp;这种用法是最基础的，没有重新派生QListView也没有派生QStandardItemModel,如果有需求需要自己管理Model里面的数据，那么可以如下继承QAbstractItemModel去实现虚函数接口。QStandardItemModel可以和QListView配合也可以和其他view配合，具体取决于原始数据模型是什么类型的数据结构。</p><h4 id="2-3-2、QTreeWidget和QTreeView"><a href="#2-3-2、QTreeWidget和QTreeView" class="headerlink" title="2.3.2、QTreeWidget和QTreeView"></a>2.3.2、QTreeWidget和QTreeView</h4><p>&amp;emsp;&amp;emsp;树形结构控件一般是用来显示工程结构之类的树状数据，存储数据一般是xml或者json格式。QDomDocument可以解析xml文档，虽然性能比tinyxml低，但是操作简单。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QTreeWidget *treeWidget = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QTreeWidget</span>();<br><br>treeWidget-&gt;<span class="hljs-built_in">setColumnCount</span>(<span class="hljs-number">1</span>);<br>QList&lt;QTreeWidgetItem *&gt; items;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>    items.<span class="hljs-built_in">append</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">QTreeWidgetItem</span>((QTreeWidget*)<span class="hljs-number">0</span>,      <span class="hljs-built_in">QStringList</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;item: %1&quot;</span>).<span class="hljs-built_in">arg</span>(i))));<br><br>treeWidget-&gt;<span class="hljs-built_in">insertTopLevelItems</span>(<span class="hljs-number">0</span>, items);<br></code></pre></td></tr></table></figure><p>这是给树形控件设置成一列，然后给插入了10个顶层Item,注意一点就是每一列可以有多个顶层Item，然后树形控件也可以设置多列。</p><h4 id="2-3-3、QTableWidget和QTableView"><a href="#2-3-3、QTableWidget和QTableView" class="headerlink" title="2.3.3、QTableWidget和QTableView"></a>2.3.3、QTableWidget和QTableView</h4><p>&amp;emsp;&amp;emsp;表格控件一般少量数据就可以直接用QTableWidget，如果结合数据库显示大量表格内容，对于这种情况可以用QTableView配合两个特殊Model：1、QSqlTableModel；2、QSqlQueryModel。第一个Model封装了数据库的常用操作，可以方便查询以及更新数据并实时刷新view界面，第二个则是自由度更高，可以使用自定义sql的语句去查询数据，并于复杂的多表查询比较适合。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tableWidget = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QTableWidget</span>(<span class="hljs-keyword">this</span>);<br><br>tableWidget-&gt;<span class="hljs-built_in">setRowCount</span>(<span class="hljs-number">10</span>);<br>tableWidget-&gt;<span class="hljs-built_in">setColumnCount</span>(<span class="hljs-number">5</span>);<br><br>QTableWidgetItem *newItem = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QTableWidgetItem</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;%1&quot;</span>).<span class="hljs-built_in">arg</span>(<br>    (row+<span class="hljs-number">1</span>)*(column+<span class="hljs-number">1</span>)));<br>tableWidget-&gt;<span class="hljs-built_in">setItem</span>(row, column, newItem);<br></code></pre></td></tr></table></figure><p>需要注意到插入空白行列之后，里面的QTableWidgetItem是nullptr，只要setItem填充过之后才是有内容的，所以通过Item去获取指针之后，最好需要判空。</p>]]></content>
    
    
    <categories>
      
      <category>Qt基础教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt应用无法在远程桌面启动</title>
    <link href="/2021/11/02/Qt%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%90%AF%E5%8A%A8/"/>
    <url>/2021/11/02/Qt%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>通过windows自带的远程工具访问远程机器，然后在远程机器上启动qt发布好的应用，提示LoadLibrary Failed with Error 87: 参数不正确或者LoadLibrary Failed with Error 126: 模块未找到。通过查找资料，发现这是RDP协议在有多个显卡(独显和核显)的远程机器上的bug，只要将intel的集显给禁用掉就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>RDP</tag>
      
      <tag>opengl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态加载Dll注意事项</title>
    <link href="/2021/10/28/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDDll%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2021/10/28/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDDll%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="动态加载dll注意事项"><a href="#动态加载dll注意事项" class="headerlink" title="动态加载dll注意事项"></a>动态加载dll注意事项</h1>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QtConcurrent异步并发</title>
    <link href="/2021/10/18/QtConcurrent%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/"/>
    <url>/2021/10/18/QtConcurrent%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Qt并发模块"><a href="#Qt并发模块" class="headerlink" title="Qt并发模块"></a>Qt并发模块</h1><p>Qt对于多线程开发提供了QThread,这种方式需要使用者重写该类的run()虚函数，或者如果不需要控制run()里面的线程运行逻辑，只是单纯的想跑个线程，就可以直接调用QObject::moveToThread(QThread *thread)接口，这样QObject的派生类中的所有槽函数都会在thread线程中执行。但是这种还是过于繁琐，始终都需要继承指定类增加多余的操作，而不能像std::thread那样直接执行函数。QtConcurrent模块就可以实现类似的操作并且功能更加强大。</p><h2 id="QtConcurrent主要用法"><a href="#QtConcurrent主要用法" class="headerlink" title="QtConcurrent主要用法"></a>QtConcurrent主要用法</h2><h3 id="1、QtConcurrent-run"><a href="#1、QtConcurrent-run" class="headerlink" title="1、QtConcurrent::run()"></a>1、QtConcurrent::run()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; QThread::<span class="hljs-built_in">currentThreadId</span>();<br>    <span class="hljs-keyword">return</span> a * a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">runThreadTest</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; QThread::<span class="hljs-built_in">currentThreadId</span>();<br><br>    QFuture&lt;<span class="hljs-type">int</span>&gt; result = QtConcurrent::<span class="hljs-built_in">run</span>(test, <span class="hljs-number">10</span>);<br>    <span class="hljs-comment">// 1 同步</span><br><br><span class="hljs-comment">//    qDebug() &lt;&lt; result.result();</span><br>    <span class="hljs-comment">// 2 异步</span><br>    QFutureWatcher&lt;<span class="hljs-type">int</span>&gt; *watch = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QFutureWatcher</span>&lt;<span class="hljs-type">int</span>&gt;();<br>    <span class="hljs-built_in">connect</span>(watch, &amp;QFutureWatcher&lt;<span class="hljs-type">int</span>&gt;::finished, <span class="hljs-keyword">this</span>, [ watch]() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; watch-&gt;<span class="hljs-built_in">future</span>().<span class="hljs-built_in">result</span>();<br>        watch-&gt;<span class="hljs-built_in">deleteLater</span>();<br>    &#125;);<br>    watch-&gt;<span class="hljs-built_in">setFuture</span>(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种用法是最基础的，和std::thread基本一致，但是比标准库好的是它可以直接通过QFuture<T>模板类返回函数的运行值，如果直接在后面调用result.result()，这时候它就会一直等待线程结束返回结果，是一个同步操作，这种使用场景感觉很少。然后Qt又提供了一个</p><p>QFutureWatcher模板类实现异步获取线程返回值，只需要绑定QFuture同时监听finished信号，在对应槽函数获取结果。这种只适用于QFuture对像中只有一个返回值的情况。</p><h3 id="2、QtConcurrent-mapped"><a href="#2、QtConcurrent-mapped" class="headerlink" title="2、QtConcurrent::mapped()"></a>2、QtConcurrent::mapped()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QList&lt;<span class="hljs-type">int</span>&gt; inputList&#123;<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>&#125;;<br><br>QFuture&lt;<span class="hljs-type">int</span>&gt; result = QtConcurrent::<span class="hljs-built_in">mapped</span>(inputList, test);<br>QFutureWatcher&lt;<span class="hljs-type">int</span>&gt; *watch = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QFutureWatcher</span>&lt;<span class="hljs-type">int</span>&gt;();<br><span class="hljs-built_in">connect</span>(watch, &amp;QFutureWatcher&lt;<span class="hljs-type">int</span>&gt;::finished, <span class="hljs-keyword">this</span>, [ watch]() &#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;all finished&quot;</span>;<br>    watch-&gt;<span class="hljs-built_in">deleteLater</span>();<br>&#125;);<br><span class="hljs-built_in">connect</span>(watch, &amp;QFutureWatcher&lt;<span class="hljs-type">int</span>&gt;::resultReadyAt, <span class="hljs-keyword">this</span>, [ watch](<span class="hljs-type">int</span> resultIndex) &#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;index=&quot;</span> &lt;&lt; resultIndex &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; watch-&gt;<span class="hljs-built_in">future</span>().<span class="hljs-built_in">resultAt</span>(resultIndex);<br>&#125;);<br><span class="hljs-built_in">connect</span>(watch, &amp;QFutureWatcher&lt;<span class="hljs-type">int</span>&gt;::progressValueChanged, <span class="hljs-keyword">this</span>, [ watch](<span class="hljs-type">int</span> value) &#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;progress=&quot;</span> &lt;&lt; value;<br>&#125;);<br>watch-&gt;<span class="hljs-built_in">setFuture</span>(result);<br></code></pre></td></tr></table></figure><p>mapped可以传入一个序列进去，然后并发调用传入的函数，序列中的每个参数都以const引用传递给函数使用。这种情况下QFuture会存在多个结果，所以需要监听resultReadyAt信号，表示该index对应的线程计算结束，可以取返回值。</p><h3 id="2、QtConcurrent-map"><a href="#2、QtConcurrent-map" class="headerlink" title="2、QtConcurrent::map()"></a>2、QtConcurrent::map()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; QThread::<span class="hljs-built_in">currentThreadId</span>();<br>    a = a * a;<br><br>&#125;<br>QList&lt;<span class="hljs-type">int</span>&gt; inputList&#123;<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">runThreadTest</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <br>    QFuture&lt;<span class="hljs-type">void</span>&gt; result = QtConcurrent::<span class="hljs-built_in">map</span>(inputList, test);<br>    QFutureWatcher&lt;<span class="hljs-type">void</span>&gt; *watch = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QFutureWatcher</span>&lt;<span class="hljs-type">void</span>&gt;();<br>    <span class="hljs-built_in">connect</span>(watch, &amp;QFutureWatcher&lt;<span class="hljs-type">int</span>&gt;::finished, <span class="hljs-keyword">this</span>, [ watch]() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;all finished&quot;</span> &lt;&lt; inputList;<br>        watch-&gt;<span class="hljs-built_in">deleteLater</span>();<br>    &#125;);<br>    <span class="hljs-built_in">connect</span>(watch, &amp;QFutureWatcher&lt;<span class="hljs-type">int</span>&gt;::progressValueChanged, <span class="hljs-keyword">this</span>, [ watch](<span class="hljs-type">int</span> value) &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;progress=&quot;</span> &lt;&lt; value;<br>    &#125;);<br>    watch-&gt;<span class="hljs-built_in">setFuture</span>(result);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>map和mapped的区别在于它指挥返回一个QFuture<void>的对象，也就是说它不会通过resultReadyAt通知你去获取计算的返回值。但是它第一个参数是传非常量引用的形式，所以可以在计算函数中通过引用形式返回结果。</p><h1 id="未完待续。。。。。。"><a href="#未完待续。。。。。。" class="headerlink" title="未完待续。。。。。。"></a>未完待续。。。。。。</h1>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt命令行参数解析</title>
    <link href="/2021/10/18/Qt%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <url>/2021/10/18/Qt%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Qt命令行参数解析"><a href="#Qt命令行参数解析" class="headerlink" title="Qt命令行参数解析"></a>Qt命令行参数解析</h1><p>命令行工具一般支持通过–help获取参数用法，帮助用户掌握使用方法。Qt也提供了相关功能，主要涉及到QCommandLineParser和QCommandLineOption这两个类。使用方法就是添加自己的QCommandLineOption到QCommandLineParser中，然后通过QCommandLineParser去解析QCoreApplication中的参数。使用样例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>QCoreApplication::<span class="hljs-built_in">setOrganizationName</span>(<span class="hljs-string">&quot;Qt&quot;</span>);<br><br>QCoreApplication::<span class="hljs-built_in">setOrganizationDomain</span>(<span class="hljs-string">&quot;Qt.com&quot;</span>);<br><br>QCoreApplication::<span class="hljs-built_in">setApplicationName</span>(<span class="hljs-string">&quot;Test&quot;</span>);<br><br>QCoreApplication::<span class="hljs-built_in">setApplicationVersion</span>(<span class="hljs-string">&quot;1.0&quot;</span>);<br><br>QCommandLineParser parser;<br>parser.<span class="hljs-built_in">setApplicationDescription</span>(<span class="hljs-string">&quot;帮助&quot;</span>);<br>parser.<span class="hljs-built_in">addHelpOption</span>();<br>parser.<span class="hljs-built_in">addVersionOption</span>();<br><br><span class="hljs-comment">//QCommandLineOption 如果只是没有对应值的选项就可以只给他传递两个参数，如果需要获取参数对应的值</span><br><span class="hljs-comment">//就至少需要传递三个参数，第三个参数表示要获取后面对应的值，第四个参数表示默认的选项</span><br><span class="hljs-function">QCommandLineOption <span class="hljs-title">hostOption</span><span class="hljs-params">(QStringList() &lt;&lt; <span class="hljs-string">&quot;i&quot;</span> &lt;&lt; <span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-string">&quot;数据库ip地址&quot;</span>, <span class="hljs-string">&quot;ip&quot;</span>)</span></span>;<br>parser.<span class="hljs-built_in">addOption</span>(hostOption);<br><br><span class="hljs-comment">// A boolean option with multiple names (-u, --user)</span><br><span class="hljs-function">QCommandLineOption <span class="hljs-title">userOption</span><span class="hljs-params">(QStringList() &lt;&lt; <span class="hljs-string">&quot;u&quot;</span> &lt;&lt; <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;用户名&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>)</span></span>;<br>parser.<span class="hljs-built_in">addOption</span>(userOption);<br><br><span class="hljs-function">QCommandLineOption <span class="hljs-title">passwordOption</span><span class="hljs-params">(QStringList() &lt;&lt; <span class="hljs-string">&quot;p&quot;</span> &lt;&lt; <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;密码&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)</span></span>;<br>parser.<span class="hljs-built_in">addOption</span>(passwordOption);<br><br>parser.<span class="hljs-built_in">process</span>(a);<br><br><span class="hljs-type">bool</span> hasHost = parser.<span class="hljs-built_in">isSet</span>(hostOption);<br><span class="hljs-keyword">if</span> (hasHost) &#123;<br>    QString host = parser.<span class="hljs-built_in">value</span>(hostOption);<br>    QString username = parser.<span class="hljs-built_in">value</span>(userOption);<br>    QString password = parser.<span class="hljs-built_in">value</span>(passwordOption);<br>&#125;<br></code></pre></td></tr></table></figure><p>QCommandLineParser已经提供了help(-h;–help)和version(-v;–version)的等选项，直接通过addVersionOption()等接口加入即可，然后这个接口会去从QCoreApplication::setApplicationVersion(“xxx”)这里取数据。所以自定义的选项最好不要和这些内置的选项命名冲突。自定义的选项有两种，一种只是提供一个开关，表示是否开启某个功能，这种情况只需要给QCommandLineOption传递两个参数即可。如果参数后面跟着对应的值，那么就需要给QCommandLineOption传至少三个参数，第三个参数表示获取后面值的存储名称，第四个参数可选，表示默认的参数值。如果没传第三个参数，会导致无法解析到参数后面跟着的值。</p>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>命令行参数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stl常用算法</title>
    <link href="/2021/05/03/stl%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    <url>/2021/05/03/stl%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="STL常用算法"><a href="#STL常用算法" class="headerlink" title="STL常用算法"></a>STL常用算法</h1><p>STL里面的容器是非常频繁使用的，但是关于算法部分可能使用不是太多，导致简洁的STL容器往往搭配繁琐低效的自实现算法。为此此章专门记录一些常用的STL算法。主要涉及到的头文件为&lt;algorithm&gt;和&lt;numeric&gt;。</p><h2 id="查询算法"><a href="#查询算法" class="headerlink" title="查询算法"></a>查询算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;binders.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; ivec&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">20</span>&#125;;<br>    vector&lt;string&gt; svec&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;god&quot;</span>, <span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>&#125;;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * std::adjacent_find</span><br><span class="hljs-comment">     * 查找相邻重复的元素,默认版本是两个相同的元素为判断条件。对于数值型的数据一般按照默认规则</span><br><span class="hljs-comment">     * 即可，对于字符串类型的数据，可能会使用长度相同作为判断条件。STL大部分的算法都提供自定义</span><br><span class="hljs-comment">     * 规则入口。</span><br><span class="hljs-comment">    */</span><br>    cout &lt;&lt; *std::<span class="hljs-built_in">adjacent_find</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>()) &lt;&lt; endl;<br>    cout &lt;&lt; *std::<span class="hljs-built_in">adjacent_find</span>(svec.<span class="hljs-built_in">begin</span>(), svec.<span class="hljs-built_in">end</span>()) &lt;&lt; endl;<br>    cout &lt;&lt; *std::<span class="hljs-built_in">adjacent_find</span>(svec.<span class="hljs-built_in">begin</span>(), svec.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> string &amp; left,<br>    <span class="hljs-type">const</span> string &amp; right) &#123;<br>        <span class="hljs-keyword">return</span> left.<span class="hljs-built_in">size</span>() == right.<span class="hljs-built_in">size</span>();<br>    &#125;) &lt;&lt; endl;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *count</span><br><span class="hljs-comment">     * 计算给定范围内指定的值的个数</span><br><span class="hljs-comment">     * count_if</span><br><span class="hljs-comment">     * 按照自定义规则计算给定范围内指定的值的个数</span><br><span class="hljs-comment">    */</span><br>    cout &lt;&lt; std::<span class="hljs-built_in">count</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>) &lt;&lt; endl;<br>    cout &lt;&lt; std::<span class="hljs-built_in">count_if</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), std::<span class="hljs-built_in">bind</span>(std::<span class="hljs-built_in">less</span>&lt;<span class="hljs-type">int</span>&gt;(),  std::placeholders::_1, <span class="hljs-number">10</span>)) &lt;&lt; endl;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * std::binary_search</span><br><span class="hljs-comment">     * 二分查找，需要先对数据进行排序，然后才能使用二分查找，不然会一直返回false</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">//    std::sort(ivec.begin(), ivec.end());</span><br>    cout &lt;&lt; std::boolalpha &lt;&lt; std::<span class="hljs-built_in">binary_search</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">400</span>) &lt;&lt; endl;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * std::lower_bound 、std::upper_bound、 std::equal_range</span><br><span class="hljs-comment">     * 二分查找，需要先对数据进行排序。std::equal_range为前两个操作的综合操作，会</span><br><span class="hljs-comment">     * 得到一个pair类型的结果，first表示std::lower_bound的结果，second表示upper_bound</span><br><span class="hljs-comment">     * 的结果，都是迭代器类型。std::lower_bound表示查找序列中第一个大于或等于指定值的值，</span><br><span class="hljs-comment">     * 而std::upper_bound表示查找第一个大于指定值的值，和前者的不同之处在于是否包含等于。</span><br><span class="hljs-comment">    */</span><br>    cout &lt;&lt; *std::<span class="hljs-built_in">lower_bound</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">8</span>) &lt;&lt; endl;<br>    cout &lt;&lt; *std::<span class="hljs-built_in">upper_bound</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">8</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">auto</span> pairIt = std::<span class="hljs-built_in">equal_range</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">6</span>);<br>    cout &lt;&lt; *pairIt.first &lt;&lt; endl;<br>    cout &lt;&lt; *pairIt.second &lt;&lt; endl;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * std::find</span><br><span class="hljs-comment">     * 查找元素是否存在，存在返回该元素的迭代器，不存在则返回end()</span><br><span class="hljs-comment">     * std::find_if</span><br><span class="hljs-comment">     * find的增加版，可以自定义规则</span><br><span class="hljs-comment">    */</span><br>    cout &lt;&lt; *std::<span class="hljs-built_in">find</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">12</span>) &lt;&lt; endl;<br>    cout &lt;&lt; *std::<span class="hljs-built_in">find_if</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), std::<span class="hljs-built_in">bind</span>(std::<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;(),  std::placeholders::_1, <span class="hljs-number">12</span>)) &lt;&lt; endl;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * std::search</span><br><span class="hljs-comment">     * 在前者序列中搜索后者序列是否存在，存在返回前者序列中被查找到的序列首位置</span><br><span class="hljs-comment">     * std::search_n</span><br><span class="hljs-comment">     * 在序列中查找是否存在连续n个一样的值，重点是连续，而不单是数量</span><br><span class="hljs-comment">    */</span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; ivec1&#123;<span class="hljs-number">12</span>, <span class="hljs-number">20</span>&#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;search:&quot;</span> &lt;&lt; *std::<span class="hljs-built_in">search</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), ivec1.<span class="hljs-built_in">begin</span>(), ivec1.<span class="hljs-built_in">end</span>()) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;search_n:&quot;</span> &lt;&lt; *std::<span class="hljs-built_in">search_n</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">2</span>, <span class="hljs-number">6</span>) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>stl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stl</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SANE扫描仪驱动开发</title>
    <link href="/2021/04/30/sane%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    <url>/2021/04/30/sane%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="SANE扫描仪驱动开发"><a href="#SANE扫描仪驱动开发" class="headerlink" title="SANE扫描仪驱动开发"></a>SANE扫描仪驱动开发</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>&amp;emsp;&amp;emsp;Linux下的扫描仪驱动类型主要是sane协议,其他的还有跨平台的twain协议，但是在Linux上比较少见。<br>&amp;emsp;&amp;emsp;SANE全称Scanner Access Now Easy，是一个开源项目，项目地址<a href="http://www.sane-project.org/source.html">http://www.sane-project.org/source.html</a>。项目总体分为两个部分，sane-backends和sane-frontends。sane-backends包括backends(后端，也就是sane的驱动模块)，命令行工具scanimage，网络扫描守护进程（saned）和SANE_API。sane-frontends包含xscanimage和xcam两个图形化界面程序，和一个命令行扫描工具scanadf。分为两部分之后，开发者可以只需要关心需要实现的部分。比如驱动开发者只需要了解如何实现一个后端（backends）即可，而应用开发者只需要关注sane的API调用流程。下面重点介绍驱动开发部分，关于这些扫描工具可以查看帮助手册了解用法。</p><h2 id="二、驱动框架流程详解"><a href="#二、驱动框架流程详解" class="headerlink" title="二、驱动框架流程详解"></a>二、驱动框架流程详解</h2><h3 id="2-1、整体流程"><a href="#2-1、整体流程" class="headerlink" title="2.1、整体流程"></a>2.1、整体流程</h3><p>&amp;emsp;&amp;emsp;想要开发sane的后端，首先要了解应用调用后端API的流程，整体流程图如下：</p><p><img src="/sane%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/process.png" alt="sane流程图"></p><p>&amp;emsp;&amp;emsp;上述流程只是一般通用性扫描流程，不同扫描软件的实现可能会存在细微差异。</p><h3 id="2-2、流程详解"><a href="#2-2、流程详解" class="headerlink" title="2.2、流程详解"></a>2.2、流程详解</h3><h4 id="2-2-1、sane-init"><a href="#2-2-1、sane-init" class="headerlink" title="2.2.1、sane_init"></a>2.2.1、sane_init</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">SANE_Status<br><span class="hljs-title function_">sane_init</span><span class="hljs-params">(SANE_Int *version_code, SANE_Auth_Callback authorize)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;这是驱动的入口，主要作用在于初始化设备。一般每个厂商的驱动会配置一个配置文件放在&#x2F;etc&#x2F;sane.d目录。对于usb设备，里面会记录设备的挂载路径、VID（厂商ID）和PID（产品ID）。sane_init时就会读取这个配置文件做一些检查。认证这个可以根据需要定制这个回调函数，一般sane的驱动没有实现这个。</p><blockquote><p>sane的API返回值全部都是SANE_Status，所以在驱动开发时要注意每个细分的步骤都要返回对应的状态，这样扫描软件才能根据状态做出正确的判断。</p></blockquote><h4 id="2-2-2、sane-open"><a href="#2-2-2、sane-open" class="headerlink" title="2.2.2、sane_open"></a>2.2.2、sane_open</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">SANE_Status<br><span class="hljs-title function_">sane_open</span> <span class="hljs-params">(SANE_String_Const name, SANE_Handle * h)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;此接口用于通过参数name建立与对应设备句柄的连接。遍历设备列表，根据name找到指定设备，并将此设备转换成句柄h。</p><h4 id="2-2-3、sane-get-devices"><a href="#2-2-3、sane-get-devices" class="headerlink" title="2.2.3、sane_get_devices"></a>2.2.3、sane_get_devices</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">SANE_Status<br><span class="hljs-title function_">sane_get_devices</span> <span class="hljs-params">(<span class="hljs-type">const</span> SANE_Device * **device_list, SANE_Bool local_only)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;应用调用这个接口获取这个驱动对应的设备列表，local_only参数表示仅获取本地设备，但是如果你的驱动没有提供远程设备，就可以忽略这个参数。设备的数量和设备对应的属性也是在sane_init阶段就可以确定。这里只用返回数据即可。</p><h4 id="2-2-4、sane-get-option-descriptor"><a href="#2-2-4、sane-get-option-descriptor" class="headerlink" title="2.2.4、sane_get_option_descriptor"></a>2.2.4、sane_get_option_descriptor</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> SANE_Option_Descriptor *<br><span class="hljs-title function_">sane_get_option_descriptor</span> <span class="hljs-params">(SANE_Handle handle, SANE_Int option)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;应用通过handle告诉驱动对应的设备，然后option是对应的属性列表的下标，一般驱动会在设备结构体里面维护一个属性数组，记录设备的各种支持的属性，比如色彩模式、进纸模式和分辨率等。驱动会在这里返回对应设备的指定属性给扫描软件。扫描软件的获取逻辑是循环调用这个接口直到驱动返回NULL，表示属性全部返回。</p><h4 id="2-2-5、sane-control-option"><a href="#2-2-5、sane-control-option" class="headerlink" title="2.2.5、sane_control_option"></a>2.2.5、sane_control_option</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">SANE_Status<br><span class="hljs-title function_">sane_control_option</span> <span class="hljs-params">(SANE_Handle handle,</span><br><span class="hljs-params">                     SANE_Int option,</span><br><span class="hljs-params">                     SANE_Action action, <span class="hljs-type">void</span> *value, SANE_Int * info)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;这里是扫描软件获取属性默认值和设置属性值的入口。在前一个阶段软件已经获取到了支持的属性列表，这里就会获取默认值用于显示初始选项，用户后面更改属性的选项时也是通过这个入口。区分是设置还是获取属性就要通过action，action定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">  &#123;</span><br>    SANE_ACTION_GET_VALUE = <span class="hljs-number">0</span>,<br>    SANE_ACTION_SET_VALUE,<br>    SANE_ACTION_SET_AUTO<br>  &#125;<br>SANE_Action;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;从枚举值的命名方式就能很明显的知道每个action对应的意义。驱动在这里需要根据不同的action进入不同的逻辑。</p><h4 id="2-2-6、sane-start"><a href="#2-2-6、sane-start" class="headerlink" title="2.2.6、sane_start"></a>2.2.6、sane_start</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">SANE_Status<br><span class="hljs-title function_">sane_start</span> <span class="hljs-params">(SANE_Handle handle)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;这里是启动扫描的入口，根据handle映射到对应设备，然后根据前面设置的各种属性去从设备里面获取图像，缓存到内存中，并解析图片的信息。</p><h4 id="2-2-7、sane-get-parameters"><a href="#2-2-7、sane-get-parameters" class="headerlink" title="2.2.7、sane_get_parameters"></a>2.2.7、sane_get_parameters</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">SANE_Status<br><span class="hljs-title function_">sane_get_parameters</span> <span class="hljs-params">(SANE_Handle handle, SANE_Parameters * params)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;应用从这个接口获取上次sane_start阶段从设备那里获取的图片缓存的详细信息，params参数的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    SANE_Frame format;<br>    SANE_Bool last_frame;<br>    SANE_Int bytes_per_line;<br>    SANE_Int pixels_per_line;<br>    SANE_Int lines;<br>    SANE_Int depth;<br>  &#125;<br>SANE_Parameters;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;params参数值取决于扫描时用户选择的参数，比如分辨率，色彩模式等。应用就是通过这些参数知道图片详细数据，然后对图片做对应的处理。</p><h4 id="2-2-8、sane-read"><a href="#2-2-8、sane-read" class="headerlink" title="2.2.8、sane_read"></a>2.2.8、sane_read</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">SANE_Status<br><span class="hljs-title function_">sane_read</span> <span class="hljs-params">(SANE_Handle handle, SANE_Byte * buf, SANE_Int max_len,</span><br><span class="hljs-params">       SANE_Int * len)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;当应用在上一个步骤获取到图片的信息之后，就会开始调用这个API读取缓存的图片数据，驱动需要在没有超出max_len的上限内存大小的情况下不断循环从上次偏移值的地方继续给buf缓存区写入数据。当数据全部发送完成之后，给应用返回SANE_STATUS_EOF的结束标志，应用就会结束本次扫描，这就完成一次基本的扫描流程。</p><p>&amp;emsp;&amp;emsp;当然不同类型的扫描仪循环结束条件不同，一般ADF(Automatic Document Feeder)自动进纸类型，会一直重复sane_start-&gt;sane_get_parameters-&gt;sane_read这个流程，直到纸张全部扫描完成，最终在sane_start的给应用返回SANE_STATUS_NO_DOCS，这样应用就会停止循环。FLATBED平板进纸类型则是一次扫描只会扫描一张纸。</p><h4 id="2-2-9、sane-cancle"><a href="#2-2-9、sane-cancle" class="headerlink" title="2.2.9、sane_cancle"></a>2.2.9、sane_cancle</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">sane_cancel</span><span class="hljs-params">(SANE_Handle handle)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;设置取消标志位为SANE_TRUE，在扫描的时候可以根据这个标志位做停止扫描和释放资源等操作。</p><h4 id="2-2-10、sane-close"><a href="#2-2-10、sane-close" class="headerlink" title="2.2.10、sane_close"></a>2.2.10、sane_close</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">sane_close</span><span class="hljs-params">(SANE_Handle handle)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;关闭扫描仪设备的文件描述符，针对不同的类型（SCSI或USB等）扫描仪可以调用不同的方法。关闭之后释放结构体资源即可。</p><h4 id="2-2-11、sane-exit"><a href="#2-2-11、sane-exit" class="headerlink" title="2.2.11、sane_exit"></a>2.2.11、sane_exit</h4><p>&amp;emsp;&amp;emsp;原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">sane_exit</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;释放所有资源避免内存泄露等问题。</p><h2 id="三、开发细则"><a href="#三、开发细则" class="headerlink" title="三、开发细则"></a>三、开发细则</h2><p>&amp;emsp;&amp;emsp;上述章节主要是讲解sane驱动的流程，以及每个流程需要实现的功能。但是实际开发的时候还是有很多细节需要注意，下面主要讲解开发中经常遇到的问题。</p><h3 id="3-1、驱动配置"><a href="#3-1、驱动配置" class="headerlink" title="3.1、驱动配置"></a>3.1、驱动配置</h3><p>&amp;emsp;&amp;emsp;驱动开发完成以后，会生成一个动态链接库，那么SANE是如何加载你的驱动呢？在&#x2F;etc目录下有个sane.d文件夹，这是默认的用于存放SANE配置文件的位置，也可以通过SANE_CONFIG_DIR来设置一个指定的目录。&#x2F;etc&#x2F;sane.d&#x2F;dll.conf是用来指定SANE动态加载后端的配置文件，可以手动在某一行前面加#来屏蔽不希望被加载的后端。<br>&amp;emsp;&amp;emsp;第三方的后端文件也可以放在&#x2F;etc&#x2F;sane.d&#x2F;dll.d&#x2F;目录下，文件以后端名称命名。后端文件中写入我们自己实现的后端的名称，这样SANE就能动态加载到我们实现的后端了。  </p><h3 id="3-2、开发包"><a href="#3-2、开发包" class="headerlink" title="3.2、开发包"></a>3.2、开发包</h3><p>&amp;emsp;&amp;emsp;在进行开发时，虽然安装了libsane-dev，但是其中只有sane.h和saneopts.h这两个头文件，还有很多其他头文件不在开发包里面，这个是这个SANE作者强制性要求的。所以如果需要其他的头文件，需要在官网下载项目，手动将SANE的一些头文件拷到项目中。  </p><h3 id="3-3、扫描参数列表"><a href="#3-3、扫描参数列表" class="headerlink" title="3.3、扫描参数列表"></a>3.3、扫描参数列表</h3><p>&amp;emsp;&amp;emsp;扫描参数描述存在于后端的一个结构体中，这个结构体的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    SANE_String_Const name;<br>    SANE_String_Const title;<br>    SANE_String_Const desc;<br>    SANE_Value_Type type;<br>    SANE_Unit unit;<br>    SANE_Int size;<br>    SANE_Int cap;<br><br>    SANE_Constraint_Type constraint_type;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">      &#123;</span><br>    <span class="hljs-type">const</span> SANE_String_Const *string_list;<br>    <span class="hljs-type">const</span> SANE_Word *word_list;<br>    <span class="hljs-type">const</span> SANE_Range *range;<br>      &#125;<br>    constraint;<br>  &#125;<br>SANE_Option_Descriptor;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;下面的例子是已经实现的一个关于分辨率列表的属性结构体。通过此例子对此结构体的各项成员变量做一些说明。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> SANE_Word s_RemoteScannerResolutionList[] = &#123;<br>    <span class="hljs-number">6</span>, <span class="hljs-number">75</span>, <span class="hljs-number">150</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">2400</span><br>&#125;;<br><br>SANE_Option_Descriptor &#123;<br>    SANE_NAME_SCAN_RESOLUTION,<br>    SANE_TITLE_SCAN_RESOLUTION,<br>    SANE_DESC_SCAN_RESOLUTION,<br>    SANE_TYPE_INT,<br>    SANE_UNIT_DPI,<br>    <span class="hljs-keyword">sizeof</span>(SANE_Word),<br>    SANE_CAP_SOFT_SELECT | SANE_CAP_SOFT_DETECT | SANE_CAP_AUTOMATIC,<br>    SANE_CONSTRAINT_WORD_LIST,<br>    &#123;<br>        (SANE_String_Const *)s_RemoteScannerResolutionList<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3-3-1、name-amp-title-amp-desc"><a href="#3-3-1、name-amp-title-amp-desc" class="headerlink" title="3.3.1、name&amp;title&amp;desc"></a>3.3.1、name&amp;title&amp;desc</h4><p>&amp;emsp;&amp;emsp;这三个成员变量是对当前扫描参数的描述，类型都是字符串，只需要注意如果使用自定义的描述，title和desc要使用SANE_I18N()将描述字符串包起来即可。</p><h4 id="3-3-2、type"><a href="#3-3-2、type" class="headerlink" title="3.3.2、type"></a>3.3.2、type</h4><p>&amp;emsp;&amp;emsp;type指定参数值的类型，共有以下几种类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">  &#123;</span><br>    SANE_TYPE_BOOL = <span class="hljs-number">0</span>,<br>    SANE_TYPE_INT,<br>    SANE_TYPE_FIXED,<br>    SANE_TYPE_STRING,<br>    SANE_TYPE_BUTTON,<br>    SANE_TYPE_GROUP<br>  &#125;<br>SANE_Value_Type;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;例子中使用的是SANE_TYPE_INT，表示参数值是int型的数据。</p><h4 id="3-3-3、unit"><a href="#3-3-3、unit" class="headerlink" title="3.3.3、unit"></a>3.3.3、unit</h4><p>&amp;emsp;&amp;emsp;unit指定参数值的单位，共有以下几种类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">  &#123;</span><br>    SANE_UNIT_NONE = <span class="hljs-number">0</span>,<br>    SANE_UNIT_PIXEL,<br>    SANE_UNIT_BIT,        <br>    SANE_UNIT_MM,        <br>    SANE_UNIT_DPI,<br>    SANE_UNIT_PERCENT,<br>    SANE_UNIT_MICROSECOND<br>  &#125;<br>SANE_Unit;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;例子中使用的是SANE_UNIT_DPI，表示参数值的单位是dots&#x2F;inch，对应分辨率的单位。如果是色彩模式等无单位的属性值，则应选择SANE_UNIT_NONE。根据属性选择对应的单位即可。</p><h4 id="3-3-4、size"><a href="#3-3-4、size" class="headerlink" title="3.3.4、size"></a>3.3.4、size</h4><p>&amp;emsp;&amp;emsp;size表示单个属性值的长度，需要注意的是，如果size设定的较短，属性值会被截断，导致扫描属性值在传输的时候出现异常。例子中选择的是分辨率，数据不会太大，size设置成8就够了；如果是字符串型的数据，则需要至少将size设置成列表中最长字符串的长度。</p><h4 id="3-3-5、cap"><a href="#3-3-5、cap" class="headerlink" title="3.3.5、cap"></a>3.3.5、cap</h4><p>&amp;emsp;&amp;emsp;cap表示此属性支持的属性，共有以下几种类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">SANE_CAP_SOFT_SELECT   <br>SANE_CAP_HARD_SELECT    <br>SANE_CAP_SOFT_DETECT    <br>SANE_CAP_EMULATED        <br>SANE_CAP_AUTOMATIC    <br>SANE_CAP_INACTIVE        <br>SANE_CAP_ADVANCED          <br></code></pre></td></tr></table></figure><ul><li>SANE_CAP_SOFT_SELECT<br>表示此属性可以通过sane_control_option()设置。</li><li>SANE_CAP_HARD_SELECT<br>表示此属性可以通过硬件（例如拨动开关）设置。  </li><li>SANE_CAP_SOFT_DETECT<br>表示此属性可以被软件探测到。  </li><li>SANE_CAP_EMULATED<br>如果设置了此功能，则表示该设备不直接支持该选项，而是在后端中对其进行仿真。  </li><li>SANE_CAP_AUTOMATIC<br>如果设置了此功能，则表示后端（或设备）能够自动选择合理的选项值。  </li><li>SANE_CAP_INACTIVE<br>如果设置了此功能，则表示该选项当前未激活（例如，仅当另一个选项设置为其他值时，该选项才有意义）。  </li><li>SANE_CAP_ADVANCED<br>如果设置了此功能，则表明该选项应被视为“高级用户选项”。前端通常以比常规选项不那么显眼的方式显示此类选项。</li></ul><p>&amp;emsp;&amp;emsp;例子中的分辨率列表希望实现的效果是能通过软件设置以及能自动选择正确的选项值，因此将cap设置成SANE_CAP_SOFT_SELECT | SANE_CAP_SOFT_DETECT | SANE_CAP_AUTOMATIC。其他属性根据实际需要进行类似的设置即可。  </p><h4 id="3-3-6、constraint-type"><a href="#3-3-6、constraint-type" class="headerlink" title="3.3.6、constraint_type"></a>3.3.6、constraint_type</h4><p>&amp;emsp;&amp;emsp;constraint_type指定属性描述列表的类型，共有以下几种类型。  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span><br>  &#123;<br>    SANE_CONSTRAINT_NONE = <span class="hljs-number">0</span>,<br>    SANE_CONSTRAINT_RANGE,<br>    SANE_CONSTRAINT_WORD_LIST,<br>    SANE_CONSTRAINT_STRING_LIST<br>  &#125;<br>SANE_Constraint_Type;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;例子中的分辨率列表是一个int型的数组，因此将constraint_type设置成SANE_CONSTRAINT_WORD_LIST。如果是色彩模式这种string型数组，则应该将constraint_type设置成SANE_CONSTRAINT_STRING_LIST。</p><h4 id="3-3-7、constraint"><a href="#3-3-7、constraint" class="headerlink" title="3.3.7、constraint"></a>3.3.7、constraint</h4><p>&amp;emsp;&amp;emsp;constraint是属性描述的列表，即属性列表的数据。列表有三种类型，分别是int型列表、string型列表和范围型列表。</p><ul><li><p>int型列表<br>int型列表可以用来描述分辨率等属性，赋值方式如下所示。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> SANE_Word resolutionList[] = &#123;<br>  <span class="hljs-number">8</span>, <span class="hljs-number">75</span>, <span class="hljs-number">150</span>, <span class="hljs-number">200</span>, <span class="hljs-number">240</span>， <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>, <span class="hljs-number">600</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;resolutionList[0]表示列表中选项值的个数，显示效果如下图。<br><img src="/sane%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/intlist.png" alt="int型列表显示效果图"></p></li><li><p>string型列表<br>string型列表可以用来描述色彩模式、纸张尺寸、进纸方式等属性，赋值方式如下所示。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">SANE_String_Const pageSizeList[] = &#123;<br>  <span class="hljs-string">&quot;A3&quot;</span>，<br>  <span class="hljs-string">&quot;A4&quot;</span>，<br>  <span class="hljs-string">&quot;B4&quot;</span>，<br>  <span class="hljs-string">&quot;A5&quot;</span>,<br>  <span class="hljs-string">&quot;B5&quot;</span>,<br>  <span class="hljs-string">&quot;A6&quot;</span>,<br>  <span class="hljs-string">&quot;B6&quot;</span>,<br>  <span class="hljs-literal">nullptr</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;pageSizeList列表中最后一项必须是nullptr，表示列表选项值结束，否则会发生异常。显示效果如下图。<br><img src="/sane%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/intlist.png" alt="string型列表显示效果图"></p></li><li><p>range型列表<br>range型列表可以用来描述对比度、亮度等属性，赋值方式如下所示。  </p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">SANE_Range resolutionRange = &#123;<br><span class="hljs-built_in">  50,</span><br><span class="hljs-built_in">  300,</span><br>  <span class="hljs-number">0</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;resolutionRange第一项表示范围下限，第二项表示范围上限，第三项表示步进（0表示步进为1）。显示效果如下图。<br><img src="/sane%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/rangelist.png" alt="range型列表显示效果图"></p></li></ul><h3 id="3-4、设备交互"><a href="#3-4、设备交互" class="headerlink" title="3.4、设备交互"></a>3.4、设备交互</h3><p>&amp;emsp;&amp;emsp;本小节重点介绍如何通过SANE提供的API和不同类型的设备进行交互。</p><h4 id="3-4-1-、与USB扫描仪的交互"><a href="#3-4-1-、与USB扫描仪的交互" class="headerlink" title="3.4.1 、与USB扫描仪的交互"></a>3.4.1 、与USB扫描仪的交互</h4><h5 id="3-4-1-1、sane-init阶段"><a href="#3-4-1-1、sane-init阶段" class="headerlink" title="3.4.1.1、sane_init阶段"></a>3.4.1.1、sane_init阶段</h5><ul><li>sanei_usb_init()<br>&amp;emsp;&amp;emsp;首先调用此接口，获取所有可用的usb设备。  </li><li>sanei_config_open(const char *filename)<br>&amp;emsp;&amp;emsp;加载指定设备对应的配置文件配置文件。  </li><li>sanei_config_read(char *str, int n, FILE *stream)<br>&amp;emsp;&amp;emsp;读取配置文件，获取设备的VID（厂商ID）和PID（产品ID）,跳过配置文件中的空行和以“#”开头的行，根据PID和VID对比获取本驱动支持的扫描设备列表。  </li><li>sanei_usb_attach_matching_devices (const char *name,SANE_Status (*attach) (const char *dev))<br>&amp;emsp;&amp;emsp;将扫描仪的VID、PID、设备名绑定，以便后面直接使用设备名能够访问指定设备。</li></ul><h5 id="3-4-1-2、sane-open阶段"><a href="#3-4-1-2、sane-open阶段" class="headerlink" title="3.4.1.2、sane_open阶段"></a>3.4.1.2、sane_open阶段</h5><ul><li>sanei_usb_open (SANE_String_Const devname, SANE_Int * dn)<br>&amp;emsp;&amp;emsp;根据sane_open传过来的设备名，传入此接口，打开指定设备，dn指向的是设备列表中该设备的下标。</li></ul><h5 id="3-4-1-3、sane-start阶段"><a href="#3-4-1-3、sane-start阶段" class="headerlink" title="3.4.1.3、sane_start阶段"></a>3.4.1.3、sane_start阶段</h5><ul><li>sanei_usb_write_bulk (SANE_Int dn, const SANE_Byte * buffer, size_t * size)<br>&amp;emsp;&amp;emsp;在sane_start中重复调用这个接口，为指定的USB设备设置期望使用的扫描参数，size返回真实写入的长度。设置完所有参数后，再次调用这个接口，将buffer设置成对应的扫描指令，即可控制扫描仪开始扫描工作。</li></ul><h5 id="3-4-1-4-sane-close阶段"><a href="#3-4-1-4-sane-close阶段" class="headerlink" title="3.4.1.4 sane_close阶段"></a>3.4.1.4 sane_close阶段</h5><ul><li>sanei_usb_close (SANE_Int dn)<br>&amp;emsp;&amp;emsp;传入的参数是设备列表中该设备的下标，根据此下标关闭指定的usb设备。</li></ul><h4 id="3-4-2、与SCSI扫描仪的交互"><a href="#3-4-2、与SCSI扫描仪的交互" class="headerlink" title="3.4.2、与SCSI扫描仪的交互"></a>3.4.2、与SCSI扫描仪的交互</h4><h5 id="3-4-2-1、sane-init阶段"><a href="#3-4-2-1、sane-init阶段" class="headerlink" title="3.4.2.1、sane_init阶段"></a>3.4.2.1、sane_init阶段</h5><ul><li>sanei_config_open(const char *filename)<br>&amp;emsp;&amp;emsp;加载指定设备对应的配置文件配置文件。  </li><li>sanei_config_read(char *str, int n, FILE *stream)<br>&amp;emsp;&amp;emsp;读取配置文件,跳过配置文件中的空行和以“#”开头的行。  </li><li>sanei_usb_attach_matching_devices (const char *name,SANE_Status (*attach) (const char *dev))<br>&amp;emsp;&amp;emsp;将扫描仪的VID、PID、设备名绑定，以便后面直接使用设备名能够访问指定设备。</li></ul><h5 id="3-4-2-2、sane-open阶段"><a href="#3-4-2-2、sane-open阶段" class="headerlink" title="3.4.2.2、sane_open阶段"></a>3.4.2.2、sane_open阶段</h5><ul><li>sanei_scsi_open (const char *dev, int *fdp, SANEI_SCSI_Sense_Handler handler, void *handler_arg)<br>&amp;emsp;&amp;emsp;根据sane_open传过来的设备名，打开一个指定的SCSI设备，并且返回设备的文件描述符。</li></ul><h5 id="3-4-2-3、sane-start阶段"><a href="#3-4-2-3、sane-start阶段" class="headerlink" title="3.4.2.3、sane_start阶段"></a>3.4.2.3、sane_start阶段</h5><ul><li><p>sanei_scsi_cmd2 (int fd,const void *cmd, size_t cmd_size,const void *src, size_t src_size,void *dst, size_t * dst_size)  </p><p>&amp;emsp;&amp;emsp;在sane_start中重复调用这个接口，为指定的SCSI设备设置期望使用的扫描参数。这个接口比较便捷，相当于同时调用了sanei_scsi_req_enter2()和sanei_scsi_req_wait()这两个接口。设置完所有参数后，再次调用这个接口，将cmd设置成对应的扫描指令，即可控制扫描仪开始扫描工作。</p></li></ul><h5 id="3-4-2-4、sane-close阶段"><a href="#3-4-2-4、sane-close阶段" class="headerlink" title="3.4.2.4、sane_close阶段"></a>3.4.2.4、sane_close阶段</h5><ul><li>sanei_usb_close (SANE_Int dn)<br>&amp;emsp;&amp;emsp;传入的参数是设备列表中该设备的下标，根据此下标关闭指定的SCSI设备。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux驱动开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SANE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>com初始化线程问题</title>
    <link href="/2021/04/03/com%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/03/com%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Com简介"><a href="#Com简介" class="headerlink" title="Com简介"></a>Com简介</h1><p>Com接口本质是原始Windows API的封装，使用Com的应用程序相当于是一个RPC客户端，去跟Com的server去交互。</p><h1 id="STA和MTA"><a href="#STA和MTA" class="headerlink" title="STA和MTA"></a>STA和MTA</h1><p>使用Com接口首先就是要初始化，就需要使用相关的两个接口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">CoInitialize</span>();<br><span class="hljs-built_in">CoInitializeEx</span>();<span class="hljs-comment">//从字面意思就可以看出这是上个接口的扩展，支持更多的参数</span><br></code></pre></td></tr></table></figure><p>CoInitializeEx第二个参数，是一个枚举值，支持以下几种类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">tagCOINIT</span><br>&#123;<br>  COINIT_APARTMENTTHREADED  = <span class="hljs-number">0x2</span>,      <span class="hljs-comment">// Apartment model</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span>  (_WIN32_WINNT &gt;= 0x0400 ) || defined(_WIN32_DCOM) <span class="hljs-comment">// DCOM</span></span><br>  <span class="hljs-comment">// These constants are only valid on Windows NT 4.0</span><br>  COINIT_MULTITHREADED      = COINITBASE_MULTITHREADED,<br>  COINIT_DISABLE_OLE1DDE    = <span class="hljs-number">0x4</span>,      <span class="hljs-comment">// Don&#x27;t use DDE for Ole1 support.</span><br>  COINIT_SPEED_OVER_MEMORY  = <span class="hljs-number">0x8</span>,      <span class="hljs-comment">// Trade memory for speed.</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// DCOM</span></span><br>&#125; COINIT;<br></code></pre></td></tr></table></figure><p>其中COINIT_APARTMENTTHREADED表示单线程初始化（STA），和直接用CoInitialize(0)是一样的。COINIT_MULTITHREADED表示多线程初始化(MTA)。这两种模式的区别在于，STA模式只针对当前调用线程，也就是在哪个线程初始化，就只能在哪个线程调用Com接口。如果在别的线程调用Com接口，就会抛出未初始化的错误码（CO_E_NOTINITIALIZED）。</p><p>如果使用MTA模式，只需要在一个线程初始化，通常是主线程，就可以在其他线程调用Com接口，通过windows消息将当前线程的操作转发到初始化线程，进行排队处理。这种情况下需要应用程序自己保证线程安全。</p><p>有初始化就有卸载释放资源，只需要调用CoUninitialize()即可。STA模式在哪个线程初始化就在哪个线程结束时卸载。而MTA只需要在一个线程初始化，在该线程结束时卸载即可。</p>]]></content>
    
    
    <categories>
      
      <category>Windows API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Com</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows获取网卡信息</title>
    <link href="/2021/03/28/Windows%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF/"/>
    <url>/2021/03/28/Windows%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&amp;emsp;&amp;emsp;这是一个Qt项目，需求是显示连接网卡的ip，过滤掉断开的和虚拟网卡等。本来想直接使用Qt提供的QNetworkConfigurationManager,但是在虚拟机里面这个接口某些情况无法检测到网卡配置，最后还是采用Windows API稳妥方案解决。WinAPI封装的com接口里面可以使用wmi nic查询网卡硬件相关的信息，但是这个接口主要是提供硬件信息，ip是个保留项，里面没有填充数据。所以还是直接使用&lt;iphlpapi.h&gt;里面接口。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC(x) HeapAlloc(GetProcessHeap(), 0, (x))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FREE(x) HeapFree(GetProcessHeap(), 0, (x))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WORKING_BUFFER_SIZE 15000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_TRIES 3</span><br><span class="hljs-type">void</span> queryNetcardIP&#123;<br>    DWORD dwRetVal = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// Set the flags to pass to GetAdaptersAddresses</span><br><br>    ULONG flags = GAA_FLAG_INCLUDE_PREFIX;<br><br>    <span class="hljs-comment">// default to unspecified address family (both)</span><br>    ULONG family = AF_UNSPEC;<br><br>    PIP_ADAPTER_ADDRESSES pAddresses = <span class="hljs-literal">NULL</span>;<br>    ULONG outBufLen = <span class="hljs-number">0</span>;<br>    ULONG Iterations = <span class="hljs-number">0</span>;<br><br>    PIP_ADAPTER_ADDRESSES pCurrAddresses = <span class="hljs-literal">NULL</span>;<br><br>    IP_ADAPTER_PREFIX *pPrefix = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//指定ipv4</span><br>    family = AF_INET;<br><br>    <span class="hljs-comment">// Allocate a 15 KB buffer to start with.</span><br>    outBufLen = WORKING_BUFFER_SIZE;<br><br>    <span class="hljs-keyword">do</span> &#123;<br><br>        pAddresses = (IP_ADAPTER_ADDRESSES *) <span class="hljs-built_in">MALLOC</span>(outBufLen);<br>        <span class="hljs-keyword">if</span> (pAddresses == <span class="hljs-literal">NULL</span>) &#123;<br>           <span class="hljs-keyword">return</span>;         <br><br>        &#125;<br>        dwRetVal =<br>            <span class="hljs-built_in">GetAdaptersAddresses</span>(family, flags, <span class="hljs-literal">NULL</span>, pAddresses, &amp;outBufLen);<br><br>        <span class="hljs-keyword">if</span> (dwRetVal == ERROR_BUFFER_OVERFLOW) &#123;<br>            <span class="hljs-built_in">FREE</span>(pAddresses);<br>            pAddresses = <span class="hljs-literal">NULL</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        Iterations++;<br><br>    &#125; <span class="hljs-keyword">while</span> ((dwRetVal == ERROR_BUFFER_OVERFLOW) &amp;&amp; (Iterations &lt; MAX_TRIES));<br><br>    <span class="hljs-keyword">if</span> (dwRetVal == NO_ERROR) &#123;<br>        <span class="hljs-comment">// If successful, output some information from the data we received</span><br>        pCurrAddresses = pAddresses;<br>        QStringList list;<br>        <span class="hljs-keyword">while</span> (pCurrAddresses) &#123;<br>        <span class="hljs-comment">//去掉VMWare和VirtualBox创建的虚拟网卡，过滤掉断开连接的网卡(OperStatus=2)，过滤掉环回网卡</span><br><br>            QString description = QString::<span class="hljs-built_in">fromWCharArray</span>(pCurrAddresses-&gt;Description);<br><br>            <span class="hljs-keyword">if</span> (description.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;VirtualBox&quot;</span>, Qt::CaseInsensitive)<br>                    || description.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;VMware&quot;</span>, Qt::CaseInsensitive)<br><br>                    || (pCurrAddresses-&gt;OperStatus == <span class="hljs-number">2</span>)<br>                    || (pCurrAddresses-&gt;IfType == IF_TYPE_SOFTWARE_LOOPBACK))<br>               ) &#123;<br>                pCurrAddresses = pCurrAddresses-&gt;Next;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            pPrefix = pCurrAddresses-&gt;FirstPrefix;<br>            <span class="hljs-keyword">if</span> (pPrefix) &#123;<br>                <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; pPrefix != <span class="hljs-literal">NULL</span>; i++) &#123;<br>                <span class="hljs-comment">//一个网卡的里面包含多个ip，网关、真实ip、广播地址等，第二个是真实ip</span><br><br>                    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>                        sockaddr_in *address = (sockaddr_in *) pPrefix-&gt;Address.lpSockaddr;<br>                        list.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">inet_ntoa</span>(address-&gt;sin_addr));<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    pPrefix = pPrefix-&gt;Next;<br>                &#125;<br>            &#125;<br><br>            pCurrAddresses = pCurrAddresses-&gt;Next;<br>        &#125;<br>        <span class="hljs-built_in">qInfo</span>() &lt;&lt; list;<br>    &#125; <br>    <span class="hljs-keyword">if</span> (pAddresses) &#123;<br>        <span class="hljs-built_in">FREE</span>(pAddresses);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实PIP_ADAPTER_ADDRESSES这个结构体里面还有很多其他重要信息，比如网卡速率，网卡类型等。</p>]]></content>
    
    
    <categories>
      
      <category>Windows API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>ip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用设计模式</title>
    <link href="/2021/03/13/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/03/13/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、常用设计模式"><a href="#一、常用设计模式" class="headerlink" title="一、常用设计模式"></a>一、常用设计模式</h1><p>设计模式是一种解决问题的方案，不同模式的问题抽象出对应的方案。类似于建筑蓝图，设计模式可能没有像算法一样那么详细的描述实施的步骤，只是给出解决问题的指导思想，具体实现细节因人而异。</p><h2 id="1、单例"><a href="#1、单例" class="headerlink" title="1、单例"></a>1、单例</h2><p>单例模式使用频率很高，比如Qt的QCoreApplication::instance()。单例作用在于保证一个类只创建一个实例，所有用户只能通过特定接口访问唯一的实例，而不能自己创建新的实例。常用于代码里面涉及到管理的类型。代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SINGLETON_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SINGLETON_H</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton *<span class="hljs-title">getInstance</span><span class="hljs-params">(<span class="hljs-type">int</span> instanceID)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!m_pSelf) &#123;<br>            m_pSelf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>(instanceID);<br>        &#125;<br>        <span class="hljs-keyword">return</span> m_pSelf;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getInstanceID</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_InstanceID;<br>    &#125;<br>    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">const</span> Singleton &amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> =(<span class="hljs-type">const</span> Singleton &amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">int</span> data): <span class="hljs-built_in">m_InstanceID</span>(data) &#123;&#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> Singleton *m_pSelf;<br>    <span class="hljs-type">int</span> m_InstanceID;<br>&#125;;<br><br>Singleton *Singleton::m_pSelf = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// SINGLETON_H</span></span><br></code></pre></td></tr></table></figure><p>c++11的静态变量已经是线程安全的，所以不需要加锁了。下面示例演示该方案的单例是否在多线程模式生效。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> func = [](<span class="hljs-type">int</span> id) &#123;<br>    cout &lt;&lt; Singleton::<span class="hljs-built_in">getInstance</span>(id)-&gt;<span class="hljs-built_in">getInstanceID</span>() &lt;&lt; endl;<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> var = <span class="hljs-number">0</span>; var &lt; <span class="hljs-number">10</span>; ++var) &#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">thread1</span><span class="hljs-params">(func, var)</span></span>;<br>    thread1.<span class="hljs-built_in">join</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Singleton.png"></p><p>通过运行结果可以看出10个线程只常见了1个实例。</p><h2 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h2><p>工厂模式使用非常广泛，因为它可以复用基础元素，容易扩充新的产品，并且通过工厂将创建操作封装起来，使用者只需要按照不同类型使用工厂创建不同的产品即可，缺点就是每个产品需要创建一个新类。代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> FACTORY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FACTORY_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">enum</span>  &#123;<br>        Type = <span class="hljs-number">0</span>,<br>        UserType = <span class="hljs-number">65535</span><br>    &#125;;<br>    <span class="hljs-built_in">Product</span>() &#123;std::cout &lt;&lt; <span class="hljs-built_in">type</span>() &lt;&lt; std::endl;&#125;<br>    ~<span class="hljs-built_in">Product</span>() &#123;&#125;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//do something for Base Product</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">type</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> Type;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    std::string m_productName;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductType1</span>: <span class="hljs-keyword">public</span> Product<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">enum</span> &#123;<br>        Type = <span class="hljs-number">1</span><br>    &#125;;<br>    <span class="hljs-built_in">ProductType1</span>() &#123;std::cout &lt;&lt; <span class="hljs-built_in">type</span>() &lt;&lt; std::endl;&#125;<br>    ~<span class="hljs-built_in">ProductType1</span>() &#123;&#125;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//do something for type1</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> Type;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductType2</span>: <span class="hljs-keyword">public</span> Product<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">enum</span> &#123;<br>        Type = <span class="hljs-number">2</span><br>    &#125;;<br>    <span class="hljs-built_in">ProductType2</span>() &#123;std::cout &lt;&lt; <span class="hljs-built_in">type</span>() &lt;&lt; std::endl;&#125;<br>    ~<span class="hljs-built_in">ProductType2</span>() &#123;&#125;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//do something for type2</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> Type;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Factory</span>() = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-function"><span class="hljs-type">static</span> Product *<span class="hljs-title">createProduct</span><span class="hljs-params">(<span class="hljs-type">int</span> type)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Product</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ProductType1</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ProductType2</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;This product not support yet.&quot;</span> &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// FACTORY_H</span></span><br></code></pre></td></tr></table></figure><p>使用示例示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Product *p1 = Factory::<span class="hljs-built_in">createProduct</span>(<span class="hljs-number">1</span>);<br>Product *p2 = Factory::<span class="hljs-built_in">createProduct</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (p1)<br>    <span class="hljs-keyword">delete</span> p1;<br><span class="hljs-keyword">if</span> (p2)<br>    <span class="hljs-keyword">delete</span> p2;<br></code></pre></td></tr></table></figure><p>工厂类也可以按照不同产品创建不同工厂，这样的话一个产品就需要一个对应的工厂，为了减少工厂类，所以我采取在同一个工厂根据类型的不同创建不同的产品。</p><h2 id="3、抽象工厂模式"><a href="#3、抽象工厂模式" class="headerlink" title="3、抽象工厂模式"></a>3、抽象工厂模式</h2><p>抽象工厂模式是工厂模式的扩展，工厂模式只能生产不同的类型的产品，加入同一个产品存在多个风格，这就可以创建一个抽象工厂类，然后派生工厂类创建同一风格的系列产品。按照抽象工厂的思路来说，这就需要每一个风格对应一个派生类工厂，这样的实现我觉得太过于繁琐，所以还是可以参照上述工厂模式的实现，只需要在createProduct接口中扩展一个风格参数即可，同理如果还有分类可以继续增加参数。</p><h2 id="4、生成器模式"><a href="#4、生成器模式" class="headerlink" title="4、生成器模式"></a>4、生成器模式</h2><p>生成器模式也是工厂模式的扩展，工厂模式只是关注于创建的产品的结果，而生成器模式则是关注于拆分产品创建的流程，复用其中通用的基础操作。比如一栋房子，基础操作打地基，吊顶，装修等。每一栋房子都创建一套自己的建造方式就很费事，如果把这些基础操作拆分，不同类型的房子使用不同的基础操作进行组合就可以建造不同类型的房子。基于这种思路就需要一个建造者（Builder）具有所有的基础操作，然后能够在建造后返回结果。用户可以直接使用建造者去组合操作创建产品，也可以利用一个经理（Manager）去组合固定的操作，让它去指挥建造者，只需要从经理处返回结果即可。代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> BUILDER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUILDER_H</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">House</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">House</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setFoundation</span><span class="hljs-params">(<span class="hljs-type">bool</span> flag)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_hasFoundation = flag;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setRoof</span><span class="hljs-params">(<span class="hljs-type">bool</span> flag)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_hasRoof = flag;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setWindowCount</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_windowCount = count;<br>    &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">bool</span> m_hasFoundation;<br>    <span class="hljs-type">bool</span> m_hasRoof;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> m_windowCount;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Builder</span>() &#123;&#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Builder</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">buildFoundation</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">buildRoof</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">buildWindow</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> House *<span class="hljs-title">getHouse</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder1</span>: <span class="hljs-keyword">public</span> Builder<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Builder1</span>(): <span class="hljs-built_in">m_pHouse</span>(<span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-built_in">init</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildFoundation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_pHouse-&gt;<span class="hljs-built_in">setFoundation</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildRoof</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_pHouse-&gt;<span class="hljs-built_in">setRoof</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildWindow</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_pHouse-&gt;<span class="hljs-built_in">setWindowCount</span>(count);<br>    &#125;<br>    ~<span class="hljs-built_in">Builder1</span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_pHouse) &#123;<br>            <span class="hljs-keyword">delete</span> m_pHouse;<br>            m_pHouse = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">House *<span class="hljs-title">getHouse</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//经过一系列建造获得的最终结果</span><br>        House *pHouse = m_pHouse;<br>        <span class="hljs-built_in">init</span>();<br>        <span class="hljs-keyword">return</span> pHouse;<br>    &#125;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_pHouse = <span class="hljs-keyword">new</span> House;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    House *m_pHouse;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Manager</span>(Builder *pBuilder)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (pBuilder) &#123;<br>            m_pBuilder = pBuilder;<br>        &#125;<br>    &#125;<br>    ~<span class="hljs-built_in">Manager</span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_pBuilder) &#123;<br>            <span class="hljs-keyword">delete</span> m_pBuilder;<br>            m_pBuilder = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildBasicHouse</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_pBuilder-&gt;<span class="hljs-built_in">buildFoundation</span>();<br>        m_pBuilder-&gt;<span class="hljs-built_in">buildRoof</span>();<br>        m_pBuilder-&gt;<span class="hljs-built_in">buildWindow</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildFancyHouse</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_pBuilder-&gt;<span class="hljs-built_in">buildFoundation</span>();<br>        m_pBuilder-&gt;<span class="hljs-built_in">buildRoof</span>();<br>        m_pBuilder-&gt;<span class="hljs-built_in">buildWindow</span>(<span class="hljs-number">4</span>);<br>    &#125;<br><br>    <span class="hljs-function">House *<span class="hljs-title">getHouse</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_pBuilder-&gt;<span class="hljs-built_in">getHouse</span>();<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    Builder *m_pBuilder;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// BUILDER_H</span></span><br></code></pre></td></tr></table></figure><h2 id="5、桥接模式"><a href="#5、桥接模式" class="headerlink" title="5、桥接模式"></a>5、桥接模式</h2><p>跨平台的GUI框架，比如Qt之类，我们基本只是使用其中最上层的API，对于这些API是如何跨平台的，用户一般接触不到。这就是桥接模式的作用，将一个复杂的功能，分为抽象层和实现层。抽象层和实现层可以独立进行开发，耦合性很低。要开发维护代码也会更加简单，只需要修改相关的模块即可。这也是利用组合模式的一种扩展。如果将功能集中在一个层次里面实现，随着规模越来越大，维护起来的难度也会越来越大，因为维护者需要对整个功能完全了解才能准确的去修改相关代码，不然会引起连锁反应。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> BRIDGE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BRIDGE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiImplementation</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">GuiImplementation</span>() &#123;&#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">GuiImplementation</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">createWinodw</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiImplementationWindows</span>: <span class="hljs-keyword">public</span> GuiImplementation<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createWinodw</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Create window in windows platform &quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiImplementationLinux</span>: <span class="hljs-keyword">public</span> GuiImplementation<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createWinodw</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Create window in linux platform &quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiCreator</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">GuiCreator</span>()<br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WIN32</span><br>        m_pImplementation = <span class="hljs-keyword">new</span> GuiImplementationWindows;<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> <span class="hljs-keyword">define</span> LINUX</span><br>        m_pImplementation = <span class="hljs-keyword">new</span> GuiImplementationLinux;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        m_pImplementation = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>    ~<span class="hljs-built_in">GuiCreator</span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_pImplementation) &#123;<br>            <span class="hljs-keyword">delete</span> m_pImplementation;<br>            m_pImplementation = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createWindow</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (m_pImplementation) &#123;<br>            m_pImplementation-&gt;<span class="hljs-built_in">createWinodw</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;This platform has not implemented!&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    GuiImplementation *m_pImplementation;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// BRIDGE_H</span></span><br><br></code></pre></td></tr></table></figure><p>实现和抽象的组合，我这里为了用户方便使用，直接通过宏定义来在编译期确定，某些情况下没有这些可利用的宏定义，那么可以把实现类作为抽象类的构造函数参数传递进来，具体使用哪个实现类由用户自己决定。</p><h2 id="6、观察者模式"><a href="#6、观察者模式" class="headerlink" title="6、观察者模式"></a>6、观察者模式</h2><p>现实中观察者模式的例子非常多，比如一个商城，上面有一些货物预售，但是不知道什么时候会上架，这时候顾客只能每天重复去查看该商品是否上架，顾客会觉得繁琐，或者商店在到货后通知所有人，不关心的顾客会觉得被骚扰。这时候通常是采取订阅的方式，只有订阅过的用户才会收到到货通知。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SUBSCRIPTION_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUBSCRIPTION_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ISubscriber</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">ISubscriber</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;message)</span> </span>= <span class="hljs-number">0</span>;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ISubject</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">ISubject</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">addMember</span><span class="hljs-params">(ISubscriber *)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">removeMember</span><span class="hljs-params">(ISubscriber *)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subscriber</span>: <span class="hljs-keyword">public</span> ISubscriber<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Subscriber</span>(ISubject *pSubject): <span class="hljs-built_in">m_pSubject</span>(pSubject)<br>    &#123;<br>        ++m_staticID;<br>        m_ID = m_staticID;<br>        m_pSubject-&gt;<span class="hljs-built_in">addMember</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    ~<span class="hljs-built_in">Subscriber</span>()<br>    &#123;<br>        m_pSubject-&gt;<span class="hljs-built_in">removeMember</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;messages)</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;ID:&quot;</span> &lt;&lt; m_ID &lt;&lt; <span class="hljs-string">&quot; Received a new message: &quot;</span> &lt;&lt; messages &lt;&lt; endl;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_staticID;<br>    <span class="hljs-type">int</span> m_ID;<br>    ISubject *m_pSubject;<br>&#125;;<br><br><span class="hljs-type">int</span> Subscriber::m_staticID = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span>: <span class="hljs-keyword">public</span> ISubject<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Subject</span>(): <span class="hljs-built_in">m_message</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    &#123;<br><br>    &#125;<br>    ~<span class="hljs-built_in">Subject</span>()<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Subject destroyed&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addMember</span><span class="hljs-params">(ISubscriber *pSubcriber)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_subcriberList.<span class="hljs-built_in">emplace_back</span>(pSubcriber);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeMember</span><span class="hljs-params">(ISubscriber *pSubcriber)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_subcriberList.<span class="hljs-built_in">remove</span>(pSubcriber);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> pSubscriber : m_subcriberList) &#123;<br>            pSubscriber-&gt;<span class="hljs-built_in">update</span>(m_message);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">generateNewMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;message)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (message == m_message) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            m_message = message;<br>            <span class="hljs-built_in">notify</span>();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    std::list&lt;ISubscriber *&gt; m_subcriberList;<br>    string m_message;<br><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// SUBSCRIPTION_H</span></span><br><br></code></pre></td></tr></table></figure><p>以上代码适合简单的消息订阅，如果复杂的情况下，可能消息的类型会有很多，比如窗口会有点击事件，绘制事件等，可以采用继承的方式封装一个基类消息，其他消息继承该基类。同时发布消息的对象也可能有很多，这时候可以把消息的发布和通知拆分出来，发布者单纯只是发布消息，具体消息的转发由一个集中的事件分发器去执行，比如Qt的application。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用数据结构和算法</title>
    <link href="/2021/03/13/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <url>/2021/03/13/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>编写代码时我们经常会用到各种别人造好的轮子，比如比较常用的c++标准库，这里面就涉及到很多基本的数据结构以及算法。例如std::vector，std::array数组，std::list双向链表，std::forward_list单向链表及std::sort排序算法等。这章主要分别介绍常用数据结构的实现和常用算法实现。</p><h1 id="二、常用数据结构"><a href="#二、常用数据结构" class="headerlink" title="二、常用数据结构"></a>二、常用数据结构</h1><h2 id="2-1、数组"><a href="#2-1、数组" class="headerlink" title="2.1、数组"></a>2.1、数组</h2><p>数组比较容易理解，就是一块连续的内存。一个简答的动态数组实现如下：</p><p>头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LRVECTOR_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LRVECTOR_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T &gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRVector</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LRVector</span>();<br>    ~<span class="hljs-built_in">LRVector</span>();<br><br>    T &amp;<span class="hljs-keyword">operator</span>[](<span class="hljs-type">size_t</span> index) <span class="hljs-type">const</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;data)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reserve</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printAll</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">size_t</span> m_size;<br>    <span class="hljs-type">size_t</span> m_capacity;<br><br>    T *m_pDataArray;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// LRVECTOR_H</span></span><br></code></pre></td></tr></table></figure><p>源文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lrvector.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>LRVector&lt;T&gt;::<span class="hljs-built_in">LRVector</span>():<br>    <span class="hljs-built_in">m_size</span>(<span class="hljs-number">0</span>),<br>    <span class="hljs-built_in">m_capacity</span>(<span class="hljs-number">4</span>)<br>&#123;<br>    <span class="hljs-built_in">init</span>();<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>LRVector&lt;T&gt;::~<span class="hljs-built_in">LRVector</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (m_pDataArray) &#123;<br>        <span class="hljs-keyword">delete</span> []m_pDataArray;<br>        m_pDataArray = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>T &amp;LRVector&lt;T&gt;::<span class="hljs-keyword">operator</span>[](<span class="hljs-type">size_t</span> index) <span class="hljs-type">const</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (index &lt; m_size) &#123;<br>        <span class="hljs-keyword">return</span> m_pDataArray[index];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;index out of range&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> LRVector&lt;T&gt;::<span class="hljs-built_in">push_back</span>(<span class="hljs-type">const</span> T &amp;data)<br>&#123;<br>    <span class="hljs-comment">/*内存足够直接追加赋值，不够则进行扩容然后再赋值*/</span><br>    <span class="hljs-keyword">if</span> (m_size &gt;= m_capacity) &#123;<br>        <span class="hljs-built_in">reserve</span>(m_capacity * <span class="hljs-number">2</span>);<br>    &#125;<br>    m_pDataArray[m_size] = data;<br>    ++m_size;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> LRVector&lt;T&gt;::<span class="hljs-built_in">resize</span>(<span class="hljs-type">size_t</span> size)<br>&#123;<br>    <span class="hljs-keyword">if</span> (size &lt;= m_capacity) &#123;<br>        m_size = size;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> LRVector&lt;T&gt;::<span class="hljs-built_in">reserve</span>(<span class="hljs-type">size_t</span> size)<br>&#123;<br>    <span class="hljs-comment">/*先判断内存大小已经足够，不够重新分配完整内存，将原始数据拷贝过来，然后销毁原始内存，将指针指向新分配的内存*/</span><br>    <span class="hljs-keyword">if</span> (size &lt;= m_capacity) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    T *pDataArrayTmp = <span class="hljs-keyword">new</span> T[size];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> index = <span class="hljs-number">0</span>; index &lt; m_size; ++index) &#123;<br>        pDataArrayTmp[index] = m_pDataArray[index];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (m_pDataArray) &#123;<br>        <span class="hljs-keyword">delete</span> []m_pDataArray;<br>        m_pDataArray = pDataArrayTmp;<br>    &#125;<br>    m_capacity = size;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">size_t</span> LRVector&lt;T&gt;::<span class="hljs-built_in">size</span>() <span class="hljs-type">const</span><br>&#123;<br>    <span class="hljs-keyword">return</span> m_size;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">size_t</span> LRVector&lt;T&gt;::<span class="hljs-built_in">capacity</span>() <span class="hljs-type">const</span><br>&#123;<br>    <span class="hljs-keyword">return</span> m_capacity;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> LRVector&lt;T&gt;::<span class="hljs-built_in">printAll</span>()<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> index = <span class="hljs-number">0</span>; index &lt; m_size; ++index) &#123;<br>        std::cout &lt;&lt; m_pDataArray[index] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;size=&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="hljs-string">&quot; capacity=&quot;</span> &lt;&lt; m_capacity &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> LRVector&lt;T&gt;::<span class="hljs-built_in">init</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (m_capacity &gt; <span class="hljs-number">0</span>) &#123;<br>        m_pDataArray = <span class="hljs-keyword">new</span> T[m_capacity];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用模板简单实现了一个模板动态数组，由于头文件和实现分离了，可以直接包含cpp。</p><h2 id="2-2、单向链表"><a href="#2-2、单向链表" class="headerlink" title="2.2、单向链表"></a>2.2、单向链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> FORWARDLIST_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FORWARDLIST_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 模板单向链表</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForwardList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ForwardNode</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">ForwardNode</span>(<span class="hljs-type">const</span> T &amp;data): <span class="hljs-built_in">m_data</span>(data), <span class="hljs-built_in">m_pNextNode</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br><br>        T m_data;<br>        ForwardNode *m_pNextNode;<br>    &#125;;<br><br>    <span class="hljs-built_in">ForwardList</span>(): <span class="hljs-built_in">m_pHead</span>(<span class="hljs-literal">nullptr</span>)<br>    &#123;<br><br>    &#125;<br><br>    ~<span class="hljs-built_in">ForwardList</span>()<br>    &#123;<br>        <span class="hljs-built_in">clear</span>();<br>    &#125;<br><br>    <span class="hljs-function">T &amp;<span class="hljs-title">front</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (m_pHead) &#123;<br>            <span class="hljs-keyword">return</span> m_pHead-&gt;m_data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushFront</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;val)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!m_pHead) &#123;<br>            ForwardNode *pNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ForwardNode</span>(val);<br>            m_pHead = pNode;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">auto</span> temp = m_pHead;<br>            ForwardNode *pNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ForwardNode</span>(val);<br>            m_pHead = pNode;<br>            m_pHead-&gt;m_pNextNode = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">popFront</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (m_pHead) &#123;<br>            <span class="hljs-keyword">auto</span> temp = m_pHead-&gt;m_pNextNode;<br>            <span class="hljs-keyword">delete</span> m_pHead;<br>            m_pHead = temp;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertAfter</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;val, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!m_pHead) &#123;<br>            ForwardNode *pNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ForwardNode</span>(val);<br>            m_pHead = pNode;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> currentPos = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">auto</span> currentNode = m_pHead;<br>            <span class="hljs-keyword">while</span> (currentPos &lt; pos) &#123;<br>                <span class="hljs-keyword">auto</span> nextNode = currentNode-&gt;m_pNextNode;<br>                <span class="hljs-keyword">if</span> (nextNode) &#123;<br>                    ++currentPos;<br>                    currentNode = nextNode;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">auto</span> temp = currentNode-&gt;m_pNextNode;<br>            ForwardNode *pNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ForwardNode</span>(val);<br>            currentNode-&gt;m_pNextNode = pNode;<br>            pNode-&gt;m_pNextNode = temp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">auto</span> temp = m_pHead;<br>        <span class="hljs-keyword">while</span> (temp) &#123;<br>            std::cout &lt;&lt; temp-&gt;m_data &lt;&lt; <span class="hljs-string">&quot; &quot;</span> ;<br>            temp = temp-&gt;m_pNextNode;<br>        &#125;<br>        std::cout &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;val)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * p作为上一个节点</span><br><span class="hljs-comment">         * q作为要找到需要删除的节点</span><br><span class="hljs-comment">        */</span><br>        ForwardNode *currentNode = <span class="hljs-literal">nullptr</span>;<br>        ForwardNode *preNode = <span class="hljs-literal">nullptr</span>;<br>        currentNode = m_pHead;<br>        <span class="hljs-keyword">while</span> (currentNode &amp;&amp; currentNode-&gt;m_data != val) &#123;<br>            preNode = currentNode;<br>            currentNode = currentNode-&gt;m_pNextNode;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (currentNode) &#123;<br>            <span class="hljs-keyword">if</span> (currentNode == m_pHead) &#123;<br>                m_pHead = m_pHead-&gt;m_pNextNode;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                preNode-&gt;m_pNextNode = currentNode-&gt;m_pNextNode;<br><br>            &#125;<br>            <span class="hljs-keyword">delete</span> currentNode;<br>            currentNode = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (m_pHead) &#123;<br>            ForwardNode *pre = m_pHead;<br>            ForwardNode *next = m_pHead-&gt;m_pNextNode;<br>            pre-&gt;m_pNextNode = <span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-keyword">while</span> (next) &#123;<br>                m_pHead = next-&gt;m_pNextNode;<br>                next-&gt;m_pNextNode = pre;<br>                pre = next;<br>                next = m_pHead;<br>            &#125;<br>            m_pHead = pre;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span> (m_pHead) &#123;<br>            <span class="hljs-keyword">auto</span> temp = m_pHead;<br>            m_pHead = m_pHead-&gt;m_pNextNode;<br>            <span class="hljs-keyword">delete</span> temp;<br>            temp = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>    ForwardNode *m_pHead;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// FORWARDLIST_H</span></span><br></code></pre></td></tr></table></figure><p>这是一个模板单向链表，实现了简单的前后插入、删除、清空、反转等操作。</p><h2 id="2-3、双向链表"><a href="#2-3、双向链表" class="headerlink" title="2.3、双向链表"></a>2.3、双向链表</h2><h2 id="2-4、二叉树"><a href="#2-4、二叉树" class="headerlink" title="2.4、二叉树"></a>2.4、二叉树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> BINARYTREE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BINARYTREE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;initializer_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryNode</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">BinaryNode</span>(<span class="hljs-type">int</span> value): <span class="hljs-built_in">m_value</span>(value), <span class="hljs-built_in">m_pLeftNode</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">m_pRightNode</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-type">int</span> m_value;<br>    BinaryNode *m_pLeftNode;<br>    BinaryNode *m_pRightNode;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">BinaryTree</span>(<span class="hljs-type">const</span> initializer_list&lt;<span class="hljs-type">int</span>&gt; &amp;list)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (list.<span class="hljs-built_in">size</span>() &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> rootValue = *list.<span class="hljs-built_in">begin</span>();<br>        m_pRootNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BinaryNode</span>(rootValue);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = list.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>; iter &lt; list.<span class="hljs-built_in">end</span>(); ++iter) &#123;<br>            <span class="hljs-built_in">insertNode</span>(m_pRootNode, *iter);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertNode</span><span class="hljs-params">(BinaryNode *pNode, <span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!pNode) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Node is nullptr&quot;</span> &lt;&lt; endl;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!pNode-&gt;m_pLeftNode) &#123;<br>                pNode-&gt;m_pLeftNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BinaryNode</span>(value);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!pNode-&gt;m_pRightNode) &#123;<br>                pNode-&gt;m_pRightNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BinaryNode</span>(value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">insertNode</span>(pNode-&gt;m_pLeftNode, value);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 广度</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BreadthFirstTraverse</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!m_pRootNode) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Root node is nullptr&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        queue&lt;BinaryNode *&gt; queue;<br>        queue.<span class="hljs-built_in">push</span>(m_pRootNode);<br>        <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>            BinaryNode *temp = queue.<span class="hljs-built_in">front</span>();<br>            cout &lt;&lt; temp-&gt;m_value &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            queue.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (temp-&gt;m_pLeftNode) &#123;<br>                queue.<span class="hljs-built_in">push</span>(temp-&gt;m_pLeftNode);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp-&gt;m_pRightNode) &#123;<br>                queue.<span class="hljs-built_in">push</span>(temp-&gt;m_pRightNode);<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; endl;<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 前序：root-&gt;left-&gt;right</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deepthFrontFirstTraverse</span><span class="hljs-params">(BinaryNode *pNode)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (pNode) &#123;<br>            cout &lt;&lt; pNode-&gt;m_value &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">deepthFrontFirstTraverse</span>(pNode-&gt;m_pLeftNode);<br>            <span class="hljs-built_in">deepthFrontFirstTraverse</span>(pNode-&gt;m_pRightNode);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deepthFrontFirstTraverse</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (m_pRootNode) &#123;<br>            <span class="hljs-built_in">deepthFrontFirstTraverse</span>(m_pRootNode);<br>            cout &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 中序：left-&gt;root-&gt;right</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deepthMiddleFirstTraverse</span><span class="hljs-params">(BinaryNode *pNode)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (pNode) &#123;<br>            <span class="hljs-built_in">deepthMiddleFirstTraverse</span>(pNode-&gt;m_pLeftNode);<br>            cout &lt;&lt; pNode-&gt;m_value &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">deepthMiddleFirstTraverse</span>(pNode-&gt;m_pRightNode);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deepthMiddleFirstTraverse</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (m_pRootNode) &#123;<br>            <span class="hljs-built_in">deepthMiddleFirstTraverse</span>(m_pRootNode);<br>            cout &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 后序：left-&gt;right-&gt;root</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deepthBackFirstTraverse</span><span class="hljs-params">(BinaryNode *pNode)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (pNode) &#123;<br>            <span class="hljs-built_in">deepthBackFirstTraverse</span>(pNode-&gt;m_pLeftNode);<br>            <span class="hljs-built_in">deepthBackFirstTraverse</span>(pNode-&gt;m_pRightNode);<br>            cout &lt;&lt; pNode-&gt;m_value &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deepthBackFirstTraverse</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (m_pRootNode) &#123;<br>            <span class="hljs-built_in">deepthBackFirstTraverse</span>(m_pRootNode);<br>            cout &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    BinaryNode *m_pRootNode;<br><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// BINARYTREE_H</span></span><br><br></code></pre></td></tr></table></figure><p>上述代码实现了一个简单的二叉树创建（还有问题），三种深度优先遍历和广度优先遍历。</p><p>前、中、后三种深度优先遍历是针对根节点和左右节点相对顺序，遍历时每个节点的顺序都是如此。</p><h1 id="三、常用算法"><a href="#三、常用算法" class="headerlink" title="三、常用算法"></a>三、常用算法</h1><h2 id="3-1、排序算法"><a href="#3-1、排序算法" class="headerlink" title="3.1、排序算法"></a>3.1、排序算法</h2><ul><li><p>冒泡排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*冒泡排序 O(n2) 基本思路：先把首位的当做最小的，然后遍历比较，</span><br><span class="hljs-comment"> *找到比他更小的就交换位置，每一趟循环筛选出来的最小的放在本次循环的首位，</span><br><span class="hljs-comment"> *然后去掉最小的继续排序剩余的数据，也就是把外层循环的起点向后偏移1位。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;origin)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = origin.<span class="hljs-built_in">begin</span>(); it != origin.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it1 = it + <span class="hljs-number">1</span>; it1 &lt; origin.<span class="hljs-built_in">end</span>(); ++it1) &#123;<br>            <span class="hljs-keyword">if</span> (*it1 &lt; *it) &#123;<br>                std::<span class="hljs-built_in">swap</span>(*it1, *it);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>插入排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*插入排序 O(n^2) ，具体耗费时间和有序区相关，如果情况比较好，最低n-1,</span><br><span class="hljs-comment"> *而冒泡这种时间固定为n^2,所以选择排序算法应该根据实际情况进行选择</span><br><span class="hljs-comment"> *基本思路，默认将第一位数据作为有序区域，后面的数据作为无序区域，</span><br><span class="hljs-comment"> *从无序区循环取数据（正序），跟有序区的数据从最相邻的位置进行比较（倒序），</span><br><span class="hljs-comment"> *如果无序区数据小于有序区域，则将有序区域数据移动到后一个位置，</span><br><span class="hljs-comment"> *直到没有有序数据比他小，就可以将该数据插入到当前有序区域序号的后面，</span><br><span class="hljs-comment"> *形成新的有序区域，然后逐渐扩大有序区域，完成排序。这个逻辑可以理解为有一排带数字</span><br><span class="hljs-comment"> *球体,插入的过程就是把前面比他大的球挤到后面去，直到没有球数字比他小，</span><br><span class="hljs-comment"> *他就会停下来，插入到比他小的球前面，然后循环，就这样每次有序区增加1个，</span><br><span class="hljs-comment"> *直到无序区消失</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;list)</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count = list.<span class="hljs-built_in">size</span>();<br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>     <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br>     <span class="hljs-comment">//第一层循环无序区域，起点下标为1</span><br>     <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; count; ++i)<br>     &#123;<br>         temp = list[i];<br>         <span class="hljs-comment">//第二层循环和有序区逐个对比直到没有人比他小</span><br>         <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; (list[j] &gt; temp); j--)<br>         &#123;<br>            list[j + <span class="hljs-number">1</span>] = list[j];<br>         &#125;<br>         list[j + <span class="hljs-number">1</span>] = temp;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>快速排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*快速排序，时间复杂度n(log n)</span><br><span class="hljs-comment"> *基本思路：p归位，分割，递归。先找到第一位的值的正确位置（左边比他小，右边比他大），将它放到找到的位置，</span><br><span class="hljs-comment"> *然后将数组以找到的位置分割为两部分，分别对两部分再进行递归。</span><br><span class="hljs-comment">*/</span><br> vector&lt;<span class="hljs-type">int</span>&gt;::<span class="hljs-function">iterator <span class="hljs-title">partition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;::iterator left, vector&lt;<span class="hljs-type">int</span>&gt;::iterator right)</span></span><br><span class="hljs-function"> </span>&#123;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *取出左边第一位的值，这里将它理解为是空位，所以此时left为空位，假设</span><br><span class="hljs-comment">     *left为p点，那么就需要先倒序找到右边第一个比他小的，把right索引移到</span><br><span class="hljs-comment">     *该位置，假设此时right为p点，取出right的值填充到原来的p点的空位，此时</span><br><span class="hljs-comment">     *right索引成为新的p点。根据p点特性在去找正序查找左边比它大的，以left</span><br><span class="hljs-comment">     *索引为起点递增。找到后left成为新的p点，取出他的值给上一个p点空位。这样</span><br><span class="hljs-comment">     *完成一次整体操作之后，left索引和right索引会向中间压缩，如果left</span><br><span class="hljs-comment">     *索引小于right索引，说明中间还有部分序列没有遍历到。去掉左右遍历完的</span><br><span class="hljs-comment">     *部分，新的序列又回到开始的状态，然后继续循环。直到找到left和right</span><br><span class="hljs-comment">     *重叠，这时候把最初的取出的值放到p点，此时左边就都是小于它的值，右边</span><br><span class="hljs-comment">     *都是大于它的值。</span><br><span class="hljs-comment">    */</span><br>     <span class="hljs-type">int</span> temp = *left;<br>     <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>         <span class="hljs-comment">//倒序查找右边第一个比他小的值</span><br>         <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; *right &gt;= temp) &#123;<br>              --right;<br>         &#125;<br>         <span class="hljs-comment">//找到结果，将该值放到空位，这里原本的位置变成新的空位</span><br>         *left = *right;<br>         <span class="hljs-comment">//正序查找左边第一个比他大的值</span><br>         <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; *left &lt;= temp) &#123;<br>              ++left;<br>         &#125;<br>         <span class="hljs-comment">//找到结果，将该值放到空位，这里原本的位置变成新的空位</span><br>         *right = *left;<br>     &#125;<br>     *left = temp;<br>     <span class="hljs-keyword">return</span> left;<br> &#125;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSortPrivate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;::iterator left, vector&lt;<span class="hljs-type">int</span>&gt;::iterator right)</span></span><br><span class="hljs-function"> </span>&#123;<br>     <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>         vector&lt;<span class="hljs-type">int</span>&gt;::iterator mid = <span class="hljs-built_in">partition</span>(left, right);<br>         <span class="hljs-built_in">quickSortPrivate</span>(left, mid - <span class="hljs-number">1</span>);<br>         <span class="hljs-built_in">quickSortPrivate</span>(mid + <span class="hljs-number">1</span>, right);<br>     &#125;<br> &#125;<br><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;list)</span></span><br><span class="hljs-function"> </span>&#123;<br>      <span class="hljs-built_in">quickSortPrivate</span>(list.<span class="hljs-built_in">begin</span>(), list.<span class="hljs-built_in">end</span>() - <span class="hljs-number">1</span>);<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>std标准库排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//std排序标准库，作为基准时间参考</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stdSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;list)</span></span><br><span class="hljs-function"> </span>&#123;<br>     std::<span class="hljs-built_in">sort</span>(list.<span class="hljs-built_in">begin</span>(), list.<span class="hljs-built_in">end</span>());<br> &#125;<br></code></pre></td></tr></table></figure></li></ul><p>四种排序算法耗时对比，依次为冒泡排序，插入排序，标准库排序，快速排序。测试以std::vector<int>为数据类型，为了排除数据的分布情况影响排序的效率，采取随机分配指定数量的数据进行测试，消耗时间通过std::chrono::steady_clock::now()前后的差值得出。数据如下：</p><table><thead><tr><th>数据大小&#x2F;耗时（纳秒）</th><th>冒泡排序</th><th>插入排序</th><th>标准库排序</th><th>快速排序</th></tr></thead><tbody><tr><td>1000</td><td>568800</td><td>85200</td><td>38900</td><td>44000</td></tr><tr><td>10000</td><td>131781600</td><td>9355300</td><td>554700</td><td>511900</td></tr></tbody></table><p>可以看出冒泡排序效率最低，随着数据数量增长效率越来越低，标准库的效率和快速排序非常接近，效率很高，日常使用可以直接使用标准库。</p><h2 id="3-2、遍历二叉树"><a href="#3-2、遍历二叉树" class="headerlink" title="3.2、遍历二叉树"></a>3.2、遍历二叉树</h2><p>二叉树遍历分为广度优先和深度优先，深度优先又分为前、中、后序优先。</p><ul><li><p>广度优先</p></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构，算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cups用户认证实现细节</title>
    <link href="/2021/02/19/cups%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
    <url>/2021/02/19/cups%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>目前打印管理器依赖系统给用户默认分配的lpadmin和lp用户组，才能正常管理打印机和打印测试页。一旦新建一个用户，没有lpadmin权限，切换到新用户打印管理器就无法正常工作。所以需要采用cups的授权机制，让非lpadmin用户组的用户也可以管理打印机。</p><h2 id="2、技术细节"><a href="#2、技术细节" class="headerlink" title="2、技术细节"></a>2、技术细节</h2><h4 id="2-1、cups权限配置"><a href="#2-1、cups权限配置" class="headerlink" title="2.1、cups权限配置"></a>2.1、cups权限配置</h4><p>cups在&#x2F;etc&#x2F;cups&#x2F;cups-files.conf中定义了SystemGroup lpadmin，在&#x2F;etc&#x2F;cups&#x2F;cupsd.conf中user @SYSTEM就表示lpadmin组的用户。当一个用户不在lpadmin组时，执行需要该用户组权限的操作时cups会给出”1025  已禁止”的错误提示，对应cups的状态值为IPP_STATUS_ERROR_FORBIDDEN。IPP_STATUS_ERROR_CUPS_AUTHENTICATION_CANCELED</p><h4 id="2-2、总体思路"><a href="#2-2、总体思路" class="headerlink" title="2.2、总体思路"></a>2.2、总体思路</h4><p>既然权限不够那说明需要提升权限，重点就是让当前连接以root用户身份执行ipp请求，这就需要cupsSetUser()这个接口（该接口针对线程，多线程程序需要每个线程都进行设置，后续相关接口也是如此）。关键是程序里面如何动态获取root密码，这就需要通过用户交互来让用户自己输入密码，然后在cups的密码回调函数里面返回该密码。所以需要使用polkit触发系统的授权对话框，刚好cups-pk-helper已经提供了需要的action，使用其中定义的all-edit即可。</p><h4 id="2-2、授权流程"><a href="#2-2、授权流程" class="headerlink" title="2.2、授权流程"></a>2.2、授权流程</h4><ul><li><p>启动的时候解锁弹出授权界面</p></li><li><p>存储授权界面填充的用户名和密码</p></li><li><p>建立一个连接，通过setPasswordCB设置回调，并通过setCupsUser()设置用户名。回调里面先返回空密码，认证失败之后再尝试返回用户填充的密码。</p></li><li><p>上述连接认证成功之后才让用户继续其他和cups相关的操作</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cups</tag>
      
      <tag>authen</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux发现外设设备命令行工具</title>
    <link href="/2021/02/08/Linux%E5%8F%91%E7%8E%B0%E5%A4%96%E8%AE%BE%E8%AE%BE%E5%A4%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/02/08/Linux%E5%8F%91%E7%8E%B0%E5%A4%96%E8%AE%BE%E8%AE%BE%E5%A4%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>介绍一些简单的设备发现工具（打印机和扫描仪不同，发现不等于能够使用，需要添加操作。扫描仪是发现就可以使用）。</p><h2 id="打印机"><a href="#打印机" class="headerlink" title="打印机"></a>打印机</h2><ul><li><p>usb</p><p>sudo &#x2F;usr&#x2F;lib&#x2F;cups&#x2F;backend&#x2F;usb</p></li><li><p>网络</p><p>sudo &#x2F;usr&#x2F;lib&#x2F;cups&#x2F;backend&#x2F;socket</p><p>sudo &#x2F;usr&#x2F;lib&#x2F;cups&#x2F;backend&#x2F;snmp</p></li><li><p>惠普</p><p>sudo &#x2F;usr&#x2F;lib&#x2F;cups&#x2F;backend&#x2F;hp     （惠普自己的发现工具）</p></li></ul><p>这个目录下还有其他协议的工具可以按照需求使用。</p><h2 id="扫描仪"><a href="#扫描仪" class="headerlink" title="扫描仪"></a>扫描仪</h2><p>scanimage -L</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试问题总结</title>
    <link href="/2021/01/30/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/30/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="c-常见面试题总结"><a href="#c-常见面试题总结" class="headerlink" title="c++常见面试题总结"></a>c++常见面试题总结</h1><h2 id="1、c-基础"><a href="#1、c-基础" class="headerlink" title="1、c++基础"></a>1、c++基础</h2><ul><li><p>虚析构和多态</p><p>多态就是利用继承基类重写虚函数virtual和动态绑定来实现调用基类函数，在运行期根据绑定的不同类型的子类，去调用子类的接口。这里就衍生出一个虚析构问题，假如基类的析构函数没有声明virtual，那么释放基类指针的时候也不会调用派生类的析构函数。对于需要在派生类中释放资源的类就会出现内存泄漏的问题，所以如果基类中存在虚函数，那么一般是会去继承重写虚函数的，这时候把基类的析构函数也顺便定义成virtual。</p></li><li><p>深拷贝和浅拷贝</p><p>简单理解就是深拷贝重新分配内存然后将原始内容拷贝过来，而浅拷贝没有重新分配内存，只是从引用了已经存在的资源。简单内置类型比如int型一般不用考虑这些问题，对于复杂类或结构体，如果存在需要释放的资源并且没有提供自定义的拷贝构造函数，编译器会提供默认的拷贝构造函数，那么一旦发生拷贝，默认拷贝提供的是浅拷贝。所以这两个对象都将共用一份资源，一旦释放其中一个的资源，而另外一个对象再去访问共用的的资源就会触发异常。</p></li><li><p>std容器时间复杂度</p><table><thead><tr><th></th><th>访问</th><th>插入</th><th>删除</th><th>是否连续内存</th></tr></thead><tbody><tr><td>vector</td><td>O(1)</td><td>尾部O(1)，其他位置O(n)</td><td>尾部O(1)，其他位置O(n)</td><td>是</td></tr><tr><td>deque</td><td>O(1)</td><td>头尾部O(1),中间O(n)</td><td>头尾部O(1),中间O(n)</td><td>是</td></tr><tr><td>list</td><td>O(n)</td><td>任意位置O(1)</td><td>任意位置O(1)</td><td>否</td></tr><tr><td>map</td><td>O(log<sup>n</sup>)红黑树查询删除插入时间都一样</td><td>O(log<sup>n</sup>)</td><td>O(log<sup>n</sup>)</td><td>否</td></tr><tr><td>set</td><td>O(log<sup>n</sup>)</td><td>O(log<sup>n</sup>)</td><td>O(log<sup>n</sup>)</td><td>否</td></tr><tr><td>unordered_map</td><td>哈希表实现O(1)，最坏情况O(n)</td><td>O(1)，最坏情况O(n)</td><td>O(1)，最坏情况O(n)</td><td>否</td></tr><tr><td>unordered_set</td><td>哈希表实现O(1)，最坏情况O(n)</td><td>O(1)，最坏情况O(n)</td><td>O(1)，最坏情况O(n)</td><td>否</td></tr></tbody></table></li><li><p>优缺点对比</p><table><thead><tr><th></th><th>优点</th><th>缺点</th><th align="left">适用场景</th></tr></thead><tbody><tr><td>vector</td><td>支持随机访问，不需要维护额外的数据所以内存占用小，尾部插入或删除速度快。</td><td>插入和删除如果在中间，需要往后或往前整体移动插入或删除的位置后面的内存，数据量大的话消耗就大。所以在已知数据大小的情况下可以调用reserver预先分配内存</td><td align="left">需要经常随机访问，插入删除等操作少</td></tr><tr><td>deque</td><td>双向队列，兼有vector随机访问，同时又可以像list一样可以快速在两端pop，push</td><td>中间位置插入删除比较耗时，需要移动元素</td><td align="left">频繁随机访问，在两端插入删除数据</td></tr><tr><td>list</td><td>任意位置插入删除效率高，头尾访问快</td><td>内存不连续所以无法随机访问</td><td align="left">频繁任意位置插入删除数据</td></tr><tr><td>forward_list</td><td>单向链表所以比list内存占用小，随机插入效率高</td><td>不支持随机访问</td><td align="left">不需要双向迭代数据</td></tr><tr><td>set</td><td>红黑树（平衡二叉树）实现，元素自动排序并唯一</td><td>插入元素需要重新排序，降低效率</td><td align="left">需要自动排序并保持数据唯一</td></tr><tr><td>map</td><td>红黑树（平衡二叉树）实现，元素自动排序并且键值对映射关系唯一</td><td>插入元素需要重新排序，降低效率</td><td align="left">需要排序且数据为字典形式</td></tr><tr><td>unordered_set</td><td>哈希表实现无序排序，查找速度快,大量数据下插入删除均比set快，因为很难遇到最坏情况</td><td>哈希表额外内存占用</td><td align="left">不需要自动排序并保持数据唯一</td></tr><tr><td>unordered_map</td><td>哈希表实现不会排序，查找速度快，大量数据下插入删除均比map快</td><td>哈希表额外内存占用</td><td align="left">不需要排序且数据为字典形式</td></tr></tbody></table></li></ul><ul><li><p>priority_queue(优先级队列)与队列(queue)</p><p>优先级队列是在队列先进先出的基础上，增加优先级的规则，可以分为最大优先级和最小优先级。本质是在插入数据的时候按照优先级排序，可以有相同优先级。实现原理是堆。</p></li><li><p>静态局部对象、静态全局对象、全局对象区别</p><table><thead><tr><th></th><th>内存位置</th><th>作用域</th></tr></thead><tbody><tr><td>静态局部对象</td><td>静态区，程序结束释放</td><td>作用于特定类或者函数</td></tr><tr><td>静态全局对象</td><td>静态区，程序结束释放</td><td>作用于整个编译单元（cpp）,对其他编译单元无效。</td></tr><tr><td>全局对象</td><td>静态区，程序结束释放</td><td>作用于所有编译单元，只需要包含声明的头文件。在.h中使用extern声明，在.cpp初始化。</td></tr></tbody></table></li><li><p>进程和线程的区别</p><ol><li><p>进程是操作系统分配资源的基本单位，线程是处理器调度和执行任务的基本单位。</p></li><li><p>同一进程的线程共享进程的地址空间和资源，不同进程之间是独立的地址空间和资源。</p></li><li><p>进程一般包含多个线程，当一个线程崩溃会导致整个进程崩溃。</p></li></ol></li></ul><h2 id="2、Qt基础"><a href="#2、Qt基础" class="headerlink" title="2、Qt基础"></a>2、Qt基础</h2><ul><li><p>connect第五个参数的用法</p><p>默认参数Qt::AutoConnection，当receiver和sender在同一个线程时，使用Qt::DirectConnection，当不在一个线程时，会切换成Qt::QueuedConnection。从字面意思就能发现这两者的区别，Qt::DirectConnection表示直接连接，当信号发送的时候会立即触发槽函数，所以是同步。而Qt::QueuedConnection由于两个对象不在同一个线程，槽函数不会立即触发，会进入事件循环，所以是异步执行。当没有receiver的时候，槽函数会在sender线程执行。</p><p>Qt::BlockingQueuedConnection是Qt::QueuedConnection的同步版，除了会在receiver线程执行槽函数以外，sender线程会一直卡住等待槽函数执行完成。所以使用这个连接类型，一定要确认sender和receiver在不同线程，如果在同一个线程会导致死锁。</p><p>Qt::UniqueConnection是一个辅助标志位，和其他连接类型一起使用，用|（逻辑OR）拼接，用来确保同一组对象和槽函数不会多次连接。</p></li><li><p>QObject对象和线程关系</p><p>继承QObject的对象都是不能跨线程调用的，QObject在哪个线程创建它就属于哪个线程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread</span>: <span class="hljs-keyword">public</span> QThread<br>&#123;<br>    Q_OBJECTMeta-Object Compiler<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Thread</span>()<br>    &#123;<br>        m_pObject = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QObject</span>();<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; QThread::<span class="hljs-built_in">currentThread</span>();<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; m_pObject-&gt;<span class="hljs-built_in">thread</span>();<br>    &#125;<br>    ~<span class="hljs-built_in">Thread</span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_pObject) &#123;<br>            m_pObject-&gt;<span class="hljs-built_in">deleteLater</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m_pObject1) &#123;<br>            m_pObject1-&gt;<span class="hljs-built_in">deleteLater</span>();<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_pObject1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QObject</span>();<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; QThread::<span class="hljs-built_in">currentThread</span>();<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; m_pObject1-&gt;<span class="hljs-built_in">thread</span>();<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    QObject *m_pObject;<br>    QObject *m_pObject1;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个例子就能发现QObject对象的所属线程和当前创建时线程一致。在Thread的构造函数里面创建时还没有启动线程，这时m_pObject的所属线程和Thread类的对象是同一个。run函数由于是在新线程中执行，所以m_pObject1也属于新线程。当出现跨线程警告时，不妨输出一下当前线程和对象所属线程比较一下，就能排查出问题。</p></li><li><p>信号槽原理</p><p>信号槽的实现基础在于moc，全称是Meta-Object Compiler(元对象编译器)，在使用信号槽时，需要在类的定义中加一个Q_OBJECT宏定义。这个宏定义展开如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> Q_OBJECT \</span><br><span class="hljs-meta">public: \</span><br><span class="hljs-meta">    QT_WARNING_PUSH \</span><br><span class="hljs-meta">    Q_OBJECT_NO_OVERRIDE_WARNING \</span><br><span class="hljs-meta">    static const QMetaObject staticMetaObject; \</span><br><span class="hljs-meta">    virtual const QMetaObject *metaObject() const; \</span><br><span class="hljs-meta">    virtual void *qt_metacast(const char *); \</span><br><span class="hljs-meta">    virtual int qt_metacall(QMetaObject::Call, int, void **); \</span><br><span class="hljs-meta">    QT_TR_FUNCTIONS \</span><br><span class="hljs-meta">private: \</span><br><span class="hljs-meta">    Q_OBJECT_NO_ATTRIBUTES_WARNING \</span><br><span class="hljs-meta">    Q_DECL_HIDDEN_STATIC_METACALL static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); \</span><br><span class="hljs-meta">    QT_WARNING_POP \</span><br><span class="hljs-meta">    struct QPrivateSignal &#123;&#125;; \</span><br><span class="hljs-meta">    QT_ANNOTATE_CLASS(qt_qobject, <span class="hljs-string">&quot;&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>moc工具就是自动帮我们实现宏定义展开的函数，所以在编译目录下会存在一个moc_xxx.cpp。我们自定义的信号其实也是个函数，实现也在这个moc生成的cpp中。</p><p>这是关于信号在moc的cpp中的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// SIGNAL 0</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QMetaObject::<span class="hljs-built_in">activate</span>(<span class="hljs-keyword">this</span>, &amp;staticMetaObject, <span class="hljs-number">0</span>, <span class="hljs-literal">nullptr</span>);<br>&#125;<br><br><span class="hljs-comment">// SIGNAL 1</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::test1</span><span class="hljs-params">(<span class="hljs-type">int</span> _t1)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *_a[] = &#123; <span class="hljs-literal">nullptr</span>, <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">void</span>*&gt;(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">void</span>*&gt;(&amp;_t1)) &#125;;<br>    QMetaObject::<span class="hljs-built_in">activate</span>(<span class="hljs-keyword">this</span>, &amp;staticMetaObject, <span class="hljs-number">1</span>, _a);<br>&#125;<br></code></pre></td></tr></table></figure><p>信号槽利用观察者模式，在connect的时候将接收者添加到通知列表中，发送信号就是执行QMetaObject::activate，然后通过回调执行接收者的槽函数。</p></li></ul><h2 id="3、Win32原生绘制界面流程"><a href="#3、Win32原生绘制界面流程" class="headerlink" title="3、Win32原生绘制界面流程"></a>3、Win32原生绘制界面流程</h2><ol><li><p>RegisterClassEx首先是注册窗口类型，这里注册的是真正的窗口。里面lpfnWndProc参数用于传入自定义的事件循环处理函数，lpszClassName用于声明窗口的类型名称。</p></li><li><p>CreateWindowEx创建窗口，会用到上一步中的lpszClassName。</p></li><li><p>WM_PAINT是回调函数中消息的一种，在这里使用GDI接口在窗口的DC（设备上下文，我一般理解为画板）画图。比如常见的LineTo等函数。GDI基于c语言，GDI+基于cpp开发，是GDI的扩展，简化了GDI的操作并升级了它的功能。</p></li></ol><h2 id="4、计算机基础"><a href="#4、计算机基础" class="headerlink" title="4、计算机基础"></a>4、计算机基础</h2><h3 id="4-1、七层网络模型和四层网络模型"><a href="#4-1、七层网络模型和四层网络模型" class="headerlink" title="4.1、七层网络模型和四层网络模型"></a>4.1、七层网络模型和四层网络模型</h3><ul><li><p>OSI七层模型</p><ol><li><p>应用层</p></li><li><p>表示层</p></li><li><p>会话层</p></li><li><p>传输层</p></li><li><p>网络层</p></li><li><p>数据链路层</p></li><li><p>物理层</p></li></ol></li><li><p>TCP&#x2F;IP协议族</p><ol><li><p>应用层（http、https、ftp、telnet等上层协议）</p></li><li><p>传输层（tcp、udp两种传输协议）</p></li><li><p>网络层（处理ip包和icmp包等基础最小传输单位）</p></li><li><p>网络接口层（和硬件的驱动和操作系统底层接口交互）</p></li></ol><p>TCP&#x2F;IP是一个协议族包含很多协议，这个四层模型和OSI模型范围不同，没有包含物理层的，但是具有一定的对应关系。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp11及以上新特性学习</title>
    <link href="/2021/01/30/cpp11%E5%8F%8A%E4%BB%A5%E4%B8%8A%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/30/cpp11%E5%8F%8A%E4%BB%A5%E4%B8%8A%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1、c-11"><a href="#1、c-11" class="headerlink" title="1、c++11"></a>1、c++11</h1><h2 id="1-1、尾返回类型"><a href="#1-1、尾返回类型" class="headerlink" title="1.1、尾返回类型"></a>1.1、尾返回类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> -&gt; <span class="hljs-type">int</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><p>auto在c++11中无法直接作为返回类型，需要使用尾返回类型，在c++14中可以直接使用auto，而不用尾返回类型。这种写法很累赘，因为一般用法在于使用匿名lambda函数时需要返回值，可以这么使用。</p><h2 id="1-2、默认模板类型"><a href="#1-2、默认模板类型" class="headerlink" title="1.2、默认模板类型"></a>1.2、默认模板类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T = <span class="hljs-type">int</span>, <span class="hljs-keyword">typename</span> T1 = <span class="hljs-type">int</span>&gt;<br><span class="hljs-keyword">auto</span> <span class="hljs-built_in">add1</span>(T a, T1 b) -&gt; <span class="hljs-keyword">decltype</span>(a + b)<br>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3、委托构造函数"><a href="#1-3、委托构造函数" class="headerlink" title="1.3、委托构造函数"></a>1.3、委托构造函数</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Base<br>&#123;<br>public:<br>    <span class="hljs-constructor">Base()</span><br>    &#123;<br>        value1 = <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-constructor">Base(<span class="hljs-params">int</span> <span class="hljs-params">value</span>)</span>: <span class="hljs-constructor">Base()</span><br>    &#123;<br>        value2 = value;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">int</span> value1;<br>    <span class="hljs-built_in">int</span> value2;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用这种形式好处在于如果一个类存在一个公共的初始化需求，比如Person这个基类，name和age这个参数是大家都需要的，就可以把它们抽出来放在一个公共的构造函数里面，需要其他参数的就可以使用委托构造初始化公共部分，然后再初始化自己特定的参数，从而减少不必要的代码。</p><h2 id="1-4、final和override"><a href="#1-4、final和override" class="headerlink" title="1.4、final和override"></a>1.4、final和override</h2><p>override用于告诉编译器该函数需要重载基类的相同函数，如果没有就会报错，意义在于明确代码中对于该函数的使用意图。</p><p>final可以用于终止重载虚函数或者终止继承类。</p><h2 id="1-5、枚举类"><a href="#1-5、枚举类" class="headerlink" title="1.5、枚举类"></a>1.5、枚举类</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">enum_class</span> : <span class="hljs-symbol">uint</span> &#123;<br>    A = <span class="hljs-number">1</span>,<br>    B = <span class="hljs-number">2</span>,<br>    C = <span class="hljs-number">3</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>枚举类是为了避免老式枚举和整数之间的隐式转化，导致行为不明确。使用枚举类就可以强制只能在该枚举类中的元素进行对比，变相检查传入参数的类型错误。另外老式的枚举值如果没用限定作用域会造成污染，同一个命名空间定义重复的枚举值会造成编译错误，放在特定的命名空间比较推荐。而枚举类则本身限定了作用域。</p><h2 id="1-6、lambda表达式"><a href="#1-6、lambda表达式" class="headerlink" title="1.6、lambda表达式"></a>1.6、lambda表达式</h2><ul><li><p>基本语法</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">auto lambda_example = [捕获列表]<span class="hljs-comment">(参数列表)</span> mutable<span class="hljs-comment">(可选)</span> 异常属性 -&gt; 返回类型 &#123;<br>    <span class="hljs-comment">//函数体</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>捕获列表两种类型</p><ul><li><p>值捕获</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">auto</span> handle = [ value ]() &#123;<br>        <span class="hljs-keyword">return</span> value;<br>&#125;;<br>value = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> value1 = <span class="hljs-built_in">handle</span>();<br></code></pre></td></tr></table></figure><p>这种情况需要注意拷贝发生在lambda创建时，也就是value &#x3D;10时，后续value的值发生变化，lambda里面的value也不会发生变化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">auto</span> handle = [ = ]() &#123;<br><span class="hljs-keyword">return</span> value;<br>&#125;;<br>value = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> value1 = <span class="hljs-built_in">handle</span>();<br></code></pre></td></tr></table></figure><p>“&#x3D;”表示值捕获当前作用域内lambda表达式之前定义的所有变量，如果变量在lambda创建之后定义的，那么是无法捕获的，会报未定义编译错误。</p><p>一般没加mutable关键字的lambda表达式按照值捕获时是无法改变捕获的值，加上mutable之后，就可以在lambda表达式范围内改变该值，并且该值会一直为最新的值而不是刚被捕获时的初始值。但是这个修改不会影响外部的原始的变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">auto</span> lambda1 = [value]() <span class="hljs-keyword">mutable</span> -&gt;<span class="hljs-type">int</span>&#123;<span class="hljs-keyword">return</span> ++value;&#125;;<br>std::cout &lt;&lt; <span class="hljs-built_in">lambda1</span>() &lt;&lt; std::endl;   <span class="hljs-comment">//11</span><br><br>std::cout &lt;&lt; <span class="hljs-built_in">lambda1</span>() &lt;&lt; std::endl;   <span class="hljs-comment">//12</span><br><br>std::cout &lt;&lt; value &lt;&lt; std::endl;       <span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure></li><li><p>引用捕获</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">auto</span> handle = [ &amp;value ]() &#123;<br> <span class="hljs-keyword">return</span> value;<br>&#125;;<br>value = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> value1 = <span class="hljs-built_in">handle</span>();<br></code></pre></td></tr></table></figure><p>此时发生引用捕获，当value的值发生变化，lambda里面的value值也会跟着变化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">auto</span> handle = [ &amp; ]() &#123;<br> <span class="hljs-keyword">return</span> value;<br>&#125;;<br>value = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> value1 = <span class="hljs-built_in">handle</span>();<br></code></pre></td></tr></table></figure><p>同理“&amp;”表示引用捕获当前作用域内lambda表达式之前定义的所有变量，如果变量在lambda创建之后定义的，那么是无法捕获的。</p></li></ul></li></ul><h2 id="1-7、std-function"><a href="#1-7、std-function" class="headerlink" title="1.7、std::function"></a>1.7、std::function</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br>std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; func = add;<br><br>std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; func1 = [](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) -&gt;<span class="hljs-type">int</span>&#123;<br>        <span class="hljs-keyword">return</span> x + y;<br>    &#125;;;<br><span class="hljs-keyword">auto</span> result = <span class="hljs-built_in">func1</span>(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>);<br></code></pre></td></tr></table></figure><p>std::function是一个模板函数类型，可以由相同参数类型加返回类型的函数指针或者lambda表达式实例化，然后直接传参调用。现在很多算法api都允许自定义操作，比如std::sort就可以按照自定义规则进行排序，这时候就可以用到std::function。</p><h2 id="1-8、std-bind和std-placeholders"><a href="#1-8、std-bind和std-placeholders" class="headerlink" title="1.8、std::bind和std::placeholders"></a>1.8、std::bind和std::placeholders</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> bindFunc = std::<span class="hljs-built_in">bind</span>(add, std::placeholders::_1, <span class="hljs-number">10</span>);<br>    Math math;<br>    <span class="hljs-keyword">auto</span> bindFunc1 = std::<span class="hljs-built_in">bind</span>(&amp;Math::add, math,std::placeholders::_1, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">bindFunc</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>std::bind作用在于将一个函数配合std::placeholders（占位符）生成一个新的可调用对象。有些情况类似于重载一个默认参数的新版本函数。需要注意的是作用于一个类的成员函数时，需要将对应的类的对象作为第一个参数传递进去。一个常用用法是std::thread需要使用成员函数时，就可以采用std::bind重新生成一个可调用的函数。</p><h2 id="1-9、std-move和右值"><a href="#1-9、std-move和右值" class="headerlink" title="1.9、std::move和右值"></a>1.9、std::move和右值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string str = <span class="hljs-string">&quot;string&quot;</span>;<br>std::vector&lt;std::string&gt; vec;<br><br>vec.<span class="hljs-built_in">push_back</span>(str);<br><br>vec.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(str));<br></code></pre></td></tr></table></figure><p>std::move会将一个左值转化为一个右值也就是字面常量，一般用法是当一个对象在本次使用后会释放掉，那么可以使用std::move将它的资源所有权直接转给需要的人，避免拷贝一份。第一次调用push_back时，str拷贝了一份，第二次调用时，str被转化为右值，也就是没有发生拷贝，只是把str对应的资源转移给了vec，这时候str被清空。</p><h2 id="1-10、mutable"><a href="#1-10、mutable" class="headerlink" title="1.10、mutable"></a>1.10、mutable</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Counter</span>() : <span class="hljs-built_in">value_</span>(<span class="hljs-number">0</span>) &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(<span class="hljs-keyword">this</span>-&gt;mutex_)</span></span>;<br>        <span class="hljs-keyword">return</span> value_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increment</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>        ++value_;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-type">int64_t</span> value_;<br>    <span class="hljs-keyword">mutable</span> std::mutex mutex_;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Counter</span>(<span class="hljs-type">const</span> Counter&amp;) = <span class="hljs-keyword">delete</span>;<br>    Counter&amp; <span class="hljs-keyword">operator</span>= (<span class="hljs-type">const</span> Counter&amp;) = <span class="hljs-keyword">delete</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>本代码是实现一个线程安全的计数类，value()函数被const修饰，也就是说想要在这个函数里面保证对象内部状态不被修改，但是需要调用互斥锁，这时候使用mutable修饰mutex_就是告诉编译器这个变量不属于该类的内部状态，所以可以修改它。</p><h2 id="1-11、atomic"><a href="#1-11、atomic" class="headerlink" title="1.11、atomic"></a>1.11、atomic</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-type">int</span> c;<br>&#125;;<br>std::atomic&lt;<span class="hljs-type">int</span>&gt; atomic_int;<br>std::atomic&lt;A&gt; atomic_struct;<br>std::cout &lt;&lt; atomic_int.<span class="hljs-built_in">is_lock_free</span>() &lt;&lt; std::endl;   <span class="hljs-comment">//true</span><br>std::cout &lt;&lt; atomic_struct.<span class="hljs-built_in">is_lock_free</span>() &lt;&lt; std::endl; <span class="hljs-comment">//false</span><br><br>atomic_int=<span class="hljs-number">10</span>;   <span class="hljs-comment">//非原子操作</span><br>atomic_int.<span class="hljs-built_in">store</span>(<span class="hljs-number">10</span>);  <span class="hljs-comment">//原子操作</span><br><br>std::cout &lt;&lt; atomic_int.<span class="hljs-built_in">load</span>() &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>atomic是用来在多线程中保证数据同步，可以替代互斥锁，效率更高。但是需要注意的是这个模板类型需要满足trivially-copyable（普通复制）。上述结构体和内置int型都可以使用atomic模板，但是非结构体类型可以进行无锁的原子操作，而结构体类型是有锁的原子操作。atomic模板类可以直接像原始类型一样直接赋值和访问，但是这样是非原子的操作，而使用模板类提供的store()进行赋值操作，和load()进行访问，这两个操作是原子操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::atomic_flag lock = ATOMIC_FLAG_INIT;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Func</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!lock.<span class="hljs-built_in">test_and_set</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ID:&quot;</span> &lt;&lt; value &lt;&lt; std::endl;<br>    &#125;<br>    lock.<span class="hljs-built_in">clear</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    std::vector&lt;std::thread&gt; threadVec;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> var = <span class="hljs-number">0</span>; var &lt; <span class="hljs-number">10</span>; ++var) &#123;<br>        threadVec.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">thread</span>(Func, var));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> var = <span class="hljs-number">0</span>; var &lt; <span class="hljs-number">10</span>; ++var) &#123;<br>        threadVec.<span class="hljs-built_in">at</span>(var).<span class="hljs-built_in">join</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>atomic_flag是原子布尔类型，和std::atomic<bool>不同的是它保证是原子操作，无法拷贝和移动。作用类似于锁。使用时先要使用ATOMIC_FLAG_INIT进行初始化，这时atomic_flag表示标志位为空。test_and_set()就是检查标志位是否被设置过，如果是返回true，如果不是就返回false，并且会对标志位进行设置。clear()表示清空标志位。</p><h1 id="2、c-14"><a href="#2、c-14" class="headerlink" title="2、c++14"></a>2、c++14</h1><h2 id="2-1、lambda"><a href="#2-1、lambda" class="headerlink" title="2.1、lambda"></a>2.1、lambda</h2><ul><li><p>右值捕获</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> u_ptr = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">auto</span> handle = [ value= std::<span class="hljs-built_in">move</span>(u_ptr) ]() &#123;<br>       <span class="hljs-keyword">return</span> *value;<br>&#125;;<br></code></pre></td></tr></table></figure><p>c++11只能捕获左值，c++14可以捕获右值。std::make_unique作为独占指针，当使用std::move转化为右值，u_ptr就失去了资源的所有权变成了一个null（空值）。</p></li><li><p>泛型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> my_lambda = [](<span class="hljs-keyword">auto</span> x, <span class="hljs-keyword">auto</span> y) &#123;<br>       <span class="hljs-keyword">return</span> x + y;<br> &#125;;<br><span class="hljs-keyword">auto</span> result = <span class="hljs-built_in">my_lambda</span>(<span class="hljs-number">10.1</span>, <span class="hljs-number">11</span>);<br></code></pre></td></tr></table></figure><p>c++11参数列表类型需要明确，c++14可以使用auto，让编译器去推导参数类型。</p></li></ul><h1 id="3、c-17"><a href="#3、c-17" class="headerlink" title="3、c++17"></a>3、c++17</h1><h2 id="3-1、if-constexpr"><a href="#3-1、if-constexpr" class="headerlink" title="3.1、if constexpr"></a>3.1、if constexpr</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">typename</span> T0, <span class="hljs-keyword">typename</span> ... T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printf</span><span class="hljs-params">(T0 t0, T... t)</span></span><br><span class="hljs-function"></span>&#123;<br>    std :: cout &lt;&lt; t0 &lt;&lt; std :: endl ;<br>    <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span><span class="hljs-params">(<span class="hljs-keyword">sizeof</span> ...(t) &gt; <span class="hljs-number">0</span>)</span> <span class="hljs-title">printf</span><span class="hljs-params">(t ...)</span> </span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>if constexpr（折叠表达式）的作用在于编译期确认条件的值，从而在编译器就可以决定进入哪个分支，而不需要在运行期再去判断，提高运行效率。上述代码用于可变长模板解包，如果没有if constexpr 那么就只能采用递归形式一层层分解模板参数个数直到最后一个，就需要额外提供一个终止递归模板函数。</p><h2 id="3-2、decomposition-declaration"><a href="#3-2、decomposition-declaration" class="headerlink" title="3.2、decomposition declaration"></a>3.2、decomposition declaration</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::map&lt;<span class="hljs-type">int</span>, std::string&gt; map = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;1&quot;</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;[key, value] : map) &#123;<br><br>        cout &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; value &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>分解声明，方便拆解map的key和对应的value，不必去调用它的first和second接口。</p><h1 id="4、std常用标准库"><a href="#4、std常用标准库" class="headerlink" title="4、std常用标准库"></a>4、std常用标准库</h1><h2 id="4-1、容器"><a href="#4-1、容器" class="headerlink" title="4.1、容器"></a>4.1、容器</h2><ul><li><p>std::array和std::vector</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    std::array&lt;<span class="hljs-type">int</span>, 4&gt; arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<span class="hljs-comment">//初始化列表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;v : arr) &#123;     <span class="hljs-comment">//范围for</span><br>       cout &lt;&lt; v &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">foo</span>(arr.<span class="hljs-built_in">data</span>(), arr.<span class="hljs-built_in">size</span>());  <span class="hljs-comment">//和c风格数组类型进行转化</span><br><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-comment">//vec.reserve(4);              //不使用初始化列表时，可以使用reserve预先分配需要的指定大小的内存，避免初始化数据时多次重新分配内存大小。</span><br>    ulong size = vec.<span class="hljs-built_in">size</span>();       <span class="hljs-comment">//4</span><br><br>    ulong cap = vec.<span class="hljs-built_in">capacity</span>();    <span class="hljs-comment">//4</span><br><br>    vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);               <br><br>    size = vec.<span class="hljs-built_in">size</span>();             <span class="hljs-comment">//5</span><br><br>    cap = vec.<span class="hljs-built_in">capacity</span>();          <span class="hljs-comment">//8(这里重新分配的机制实际测试时是初始容量大小的两倍)</span><br><br>    vec.<span class="hljs-built_in">clear</span>();<br><br>    size = vec.<span class="hljs-built_in">size</span>();             <span class="hljs-comment">//0</span><br><br>    cap = vec.<span class="hljs-built_in">capacity</span>();          <span class="hljs-comment">//8</span><br><br>    vec.<span class="hljs-built_in">shrink_to_fit</span>();           <span class="hljs-comment">//将内存大小调整为和实际数据长度一致，可以减少系统内存的使用</span><br><br>    size = vec.<span class="hljs-built_in">size</span>();             <span class="hljs-comment">//0</span><br><br>    cap = vec.<span class="hljs-built_in">capacity</span>();          <span class="hljs-comment">//0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>std::array用于固定大小的数组，用于替代c语言的指针数组，std::vector作为动态数组，会根据初始化值事先分配一个内存大小，而不是每次都插入数据都重新分配内存大小，只有当数据长度大于预分配的内存大小才会重新分配内存大小。当删除其中的元素时也不会释放对应的内存，需要手动调用shrink_to_fit()。</p></li><li><p>std::map和std::unordered_map</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::map&lt;<span class="hljs-type">int</span>, std::string&gt; map = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;1&quot;</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;[key, value] : map) &#123;<br>        cout &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; value &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *1:1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    *2:2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    *3:3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br><br>    std::unordered_map&lt;<span class="hljs-type">int</span>, std::string&gt; unorderer_map = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;1&quot;</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;[key, value] : unorderer_map) &#123;<br>        cout &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; value &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *2:2</span><br><span class="hljs-comment">    *3:3</span><br><span class="hljs-comment">    *1:1</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure><p>std::map作为有序容器，使用平衡二叉树（例如红黑树）实现，会按照key进行排序，而std::unordered_map是无序容器，采用hash表实现，不会进行排序。无序容器在插入和查询数据时效率比有序容器大幅度提高，但是无序容器会需要额外的内存存储哈希表，比有序容器消耗更多的内存。所以需要使用map时，如果不考虑顺序和内存占用，尽量采用无序容器。</p></li><li><p>std::list和std::forward_list</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::forward_list&lt;<span class="hljs-type">int</span>&gt; for_list&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>&#125;;<br>for_list.<span class="hljs-built_in">remove_if</span>(std::<span class="hljs-built_in">bind</span>(std::<span class="hljs-built_in">less</span>&lt;<span class="hljs-type">int</span>&gt;(),  std::placeholders::_1, <span class="hljs-number">10</span>));<span class="hljs-comment">//删除小于10的元素</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;value : for_list) &#123;<br><br>     cout &lt;&lt; value &lt;&lt; endl;<br><br>&#125;<br><span class="hljs-keyword">auto</span> size = std::<span class="hljs-built_in">distance</span>(std::<span class="hljs-built_in">begin</span>(for_list), std::<span class="hljs-built_in">end</span>(for_list));<br></code></pre></td></tr></table></figure><p>std::list是双向链表，而std::forward_list是单向链表，所以少了很多操作接口，比如没有back()返回最后一个元素引用。同时也没有size()返回大小，需要配合std::distance计算大小。std::forward_list优势是内存占用小，插入效率高。</p></li><li><p>std::tuple</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> char_value;<br><span class="hljs-type">double</span> double_value;<br>std::tuple&lt; <span class="hljs-type">char</span>, <span class="hljs-type">double</span>&gt; tuple1&#123;<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-number">10.02</span>&#125;;<br>cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-type">char</span>&gt;(tuple1) &lt;&lt; endl;<span class="hljs-comment">//以数据类型作为模板参数获取对应的值，但是需要注意如果存在多个相同类型的值就无法获取，会产生编译错误</span><br>cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">0</span>&gt;(tuple1) &lt;&lt; endl;<span class="hljs-comment">//以下标为模板参数，但是需要是一个编译期确定的常量。</span><br>std::<span class="hljs-built_in">tie</span>(char_value, double_value) = tuple1;<span class="hljs-comment">//c++11使用std::tie解析数据</span><br><br>std::cout &lt;&lt; char_value &lt;&lt; <span class="hljs-string">&quot;;&quot;</span> &lt;&lt; double_value &lt;&lt; endl;<br>std::tuple&lt;<span class="hljs-type">int</span>, std::string, <span class="hljs-type">bool</span>&gt; tuple2;<br>tuple2 = std::<span class="hljs-built_in">make_tuple</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;tuple&quot;</span>, <span class="hljs-literal">false</span>);<br><br>std::tuple tuple3 = std::<span class="hljs-built_in">tuple_cat</span>(tuple1, tuple2);<span class="hljs-comment">//拼接两个tuple</span><br><br><span class="hljs-keyword">auto</span> &amp;[char_value1, double_value1, int_value, string_value, bool_value] = tuple3;<span class="hljs-comment">//c++17中可以类似python结构化绑定，需要注意[]中的变量不能是已经定义过的，不然会导致重定义。</span><br><br><span class="hljs-keyword">auto</span> tuple_size = std::tuple_size&lt; <span class="hljs-keyword">decltype</span>(tuple3)&gt;::value;<span class="hljs-comment">//计算大小</span><br><br>cout &lt;&lt; tuple_size &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>std::tuple（元组）作用在于将任意个数的数据绑定为一个整体，是一个轻量化数据结构体，类似std::pair的升级版，std::pair只能绑定两个数据。</p></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="5、内存管理"><a href="#5、内存管理" class="headerlink" title="5、内存管理"></a>5、内存管理</h1><h3 id="5-1、RAII"><a href="#5-1、RAII" class="headerlink" title="5.1、RAII"></a>5.1、RAII</h3><p>c++11之前一般内存管理比较常用的模式RAII,总体思路就是构造函数中初始化资源，在析构函数中释放资源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Math</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b): <span class="hljs-built_in">left</span>(a), <span class="hljs-built_in">right</span>(b)<br>    &#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> left + right;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> left;<br>    <span class="hljs-type">int</span> right;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RAIIClass</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">RAIIClass</span>(Args... arg): <span class="hljs-built_in">m_pValue</span>(<span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!m_pValue) &#123;<br>            <span class="hljs-comment">//通过std::forward完美转发参数，不然编译器会把arg作为类型</span><br><br>            m_pValue = <span class="hljs-keyword">new</span> <span class="hljs-built_in">T</span>(std::forward&lt;Args&gt;(arg)...);<br>        &#125;<br>    &#125;<br>    ~<span class="hljs-built_in">RAIIClass</span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_pValue) &#123;<br>            <span class="hljs-keyword">delete</span> m_pValue;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function">T *<span class="hljs-title">get</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> m_pValue;<br>    &#125;<br><br><br>    <span class="hljs-built_in">RAIIClass</span>(<span class="hljs-type">const</span>  RAIIClass &amp;) = <span class="hljs-keyword">delete</span> ;<br>    RAIIClass &amp;<span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> RAIIClass &amp;) = <span class="hljs-keyword">delete</span> ;<br><br><span class="hljs-keyword">private</span>:<br>    T *m_pValue;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    RAIIClass&lt;<span class="hljs-type">int</span>&gt; int_type;<br>    <span class="hljs-function">RAIIClass&lt;Math, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">type_Math</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">12</span>)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是一个简单的模板RAII实现，可以构造任意类型的数据并防止拷贝，没有考虑多线程等因素。</p><h3 id="5-2、智能指针"><a href="#5-2、智能指针" class="headerlink" title="5.2、智能指针"></a>5.2、智能指针</h3><p>c++11引入了三个智能指针，std::shared_ptr，std::weak_ptr和std::unique_ptr，是RAII的标准库实现，用于去掉显示的new和delete，自动管理内存的创建和释放。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">std::unique_ptr&lt;std::string&gt; <span class="hljs-title">string_ptr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> std::string(<span class="hljs-string">&quot;unique_ptr&quot;</span>))</span></span>;  <span class="hljs-comment">//c++11写法</span><br>    std::unique_ptr&lt;std::string&gt; string_ptr1 = std::<span class="hljs-built_in">make_unique</span>&lt;std::string&gt;(<span class="hljs-string">&quot;make_unique&quot;</span>); <span class="hljs-comment">//c++14引入</span><br>    std::unique_ptr&lt;std::string&gt; string_ptr2 = std::<span class="hljs-built_in">move</span>(string_ptr1);<br><br>    std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; int_weak_ptr;<br>    &#123;<br>        std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; int_ptr = std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">10</span>);<br>        cout &lt;&lt; int_ptr.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;  <span class="hljs-comment">//1</span><br><br>        std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; int_ptr1 = int_ptr;<br>        cout &lt;&lt; int_ptr.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;   <span class="hljs-comment">//2</span><br><br>        int_weak_ptr = int_ptr;<br>        cout &lt;&lt; int_ptr.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;     <span class="hljs-comment">//2</span><br><br>        cout &lt;&lt; int_weak_ptr.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl; <span class="hljs-comment">//2</span><br><br>        <span class="hljs-keyword">auto</span> ptr = int_weak_ptr.<span class="hljs-built_in">lock</span>();   <span class="hljs-comment">//线程安全，返回对应的std::shared_ptr</span><br><br>        <span class="hljs-keyword">if</span> (ptr)<br>            cout &lt;&lt; ptr.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;       <span class="hljs-comment">//3</span><br><br>    &#125;<br>    cout &lt;&lt; int_weak_ptr.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;      <span class="hljs-comment">//0</span><br><br>    cout &lt;&lt; std::boolalpha &lt;&lt; int_weak_ptr.<span class="hljs-built_in">expired</span>()  &lt;&lt; endl; <span class="hljs-comment">//true</span><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>std::unique_ptr</p><p>独占指针，指针之间无法互相拷贝，但是可以通过std::move将前一个指针转为右值给新的指针，前一个指针的数据被清空，适合用完之后退出作用域就释放的场景。</p></li><li><p>std::weak_ptr和std::shared_ptr</p><p>std::shared_ptr采用引用计数，当引用计数为0时就会释放对应的内存，但是存在一个循环引用的问题（常见于观察者模式和双向链表），导致即使智能指针在离开作用域销毁时也无法释放内存。std::weak_ptr（弱引用指针）作为这种情况的一个补充用于解决这种问题。std::weak_ptr无法单独使用，不能直接通过裸指针创建，需要基于std::shared_ptr通过拷贝的方式创建，但是不会增加原本的std::shared_ptr的引用计数。std::weak_ptr无法直接访问裸指针，需要通过lock()获取对应的std::shared_ptr，再间接访问裸指针。如果裸指针已经被释放，会返回null。这个接口是线程安全。</p><p>循环引用及解决方案代码示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    std::shared_ptr&lt;B&gt; pointer;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    std::shared_ptr&lt;A&gt; pointer;<br>    <span class="hljs-comment">//std::weak_ptr&lt;A&gt; pointer; 解决办法</span><br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::shared_ptr&lt;A&gt; ptr_a = std::<span class="hljs-built_in">make_shared</span>&lt;A&gt;();<br>    std::shared_ptr&lt;B&gt; ptr_b = std::<span class="hljs-built_in">make_shared</span>&lt;B&gt;();<br>    ptr_a-&gt;pointer = b;<br>    ptr_b-&gt;pointer = a;<br>&#125;<br></code></pre></td></tr></table></figure><p>前后引用关系如下图：</p><p><img src="/cpp11%E5%8F%8A%E4%BB%A5%E4%B8%8A%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%5Csign.png" alt=".."></p><p>将B中对于A的引用改为std::weak_ptr之后，ptr_a和ptr_b释放时会断掉1和2的引用，随后A因为引用计数为0先释放，然后B接着释放。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++11</tag>
      
      <tag>c++14</tag>
      
      <tag>c++17</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打印机耗材研究</title>
    <link href="/2021/01/29/%E6%89%93%E5%8D%B0%E6%9C%BA%E8%80%97%E6%9D%90%E7%A0%94%E7%A9%B6/"/>
    <url>/2021/01/29/%E6%89%93%E5%8D%B0%E6%9C%BA%E8%80%97%E6%9D%90%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="cups耗材信息"><a href="#cups耗材信息" class="headerlink" title="cups耗材信息"></a>cups耗材信息</h1><h2 id="1、cups的定义"><a href="#1、cups的定义" class="headerlink" title="1、cups的定义"></a>1、cups的定义</h2><p>查询打印机耗材信息涉及到CUPS command file format (application&#x2F;vnd.cups-command)，它是一种特殊的和打印机交互的文件格式，用于向打印机下发指定命令。支持这种功能的打印机会在ppd中添加一个描述字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs textile">*cupsCommands: &quot;AutoConfigure Clean PrintSelfTestPage ReportLevels ReportStatus&quot;<br></code></pre></td></tr></table></figure><p>上述描述字段就包含了四种常用的命令，耗材信息就需要使用ReportLevels。通过打印测试页会把指令下发到打印机，打印机会返回耗材marker-*相关的信息到打印机属性中。这种方式不会产生真正的打印任务。</p><h2 id="2、应用处理流程"><a href="#2、应用处理流程" class="headerlink" title="2、应用处理流程"></a>2、应用处理流程</h2><ul><li><p>根据打印机类型进行不同操作，网络socket协议的打印机使用snmp直接获取，好处是不需要下发指令，可以直接获取到耗材信息。usb打印机采用ReportLevel方式。</p></li><li><p>usb打印机先需要从打印机属性中读取printer-type属性，判断是否支持操作command，具体通过是否包含CUPS_PRINTER_COMMANDS值为准</p></li><li><p>然后判断printer-commands属性中是否包含ReportLevels</p></li><li><p>写入如下内容到临时文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs textile">#CUPS-COMMAND<br>ReportLevels<br></code></pre></td></tr></table></figure></li><li><p>通过发送打印测试任务下发指令，格式如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">format</span> = &quot;application/vnd.cups-command&quot;<br>cups.printTestPage (printer.name,<br><br>                    <span class="hljs-keyword">format</span>=<span class="hljs-keyword">format</span>,<br><br>                    file=tmpfile.name,<br><br>                    <span class="hljs-keyword">user</span>=cups.getUser ())<br></code></pre></td></tr></table></figure></li><li><p>监听cups的特殊消息，触发更新指定打印机属性的操作（包含耗材）</p><ul><li><p>添加打印机</p></li><li><p>on_state_reason_added</p></li><li><p>on_state_reason_removed</p></li></ul></li></ul><h2 id="3、打印管理耗材逻辑优化"><a href="#3、打印管理耗材逻辑优化" class="headerlink" title="3、打印管理耗材逻辑优化"></a>3、打印管理耗材逻辑优化</h2><p>有了这个基础之后就不需要在线程中定时查询所有打印机的耗材信息，只需要在初始化的时候读取一次，然后用户打开耗材界面才下发ReportLevels指令去更新耗材信息，耗材界面获取更新的数据刷新即可。</p>]]></content>
    
    
    <categories>
      
      <category>cups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cups</tag>
      
      <tag>耗材</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>向日葵连接远程机器无法通过终端启动gui程序</title>
    <link href="/2021/01/05/%E5%90%91%E6%97%A5%E8%91%B5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%E7%BB%88%E7%AB%AF%E5%90%AF%E5%8A%A8gui%E7%A8%8B%E5%BA%8F/"/>
    <url>/2021/01/05/%E5%90%91%E6%97%A5%E8%91%B5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%E7%BB%88%E7%AB%AF%E5%90%AF%E5%8A%A8gui%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="向日葵连接远程Linux机器终端无法启动gui程序"><a href="#向日葵连接远程Linux机器终端无法启动gui程序" class="headerlink" title="向日葵连接远程Linux机器终端无法启动gui程序"></a>向日葵连接远程Linux机器终端无法启动gui程序</h2><p>原因是远程连接无法找到显示设备，或者没有权限连接xserver。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">xauth list #查看显示设备<br>export DISPLAY=:0.0 #设置显示服务器的连接参数环境变量<br>xhost + #允许所有人访问X server<br><br>xhost - #不允许所有人访问x server，仅限当前用户<br></code></pre></td></tr></table></figure><blockquote><p>DISPLAY的格式为host:A:B，host为空表示连接到本机的xserver服务器，A表示连接xserver的不同方式，如果以unix socket连接，0表示&#x2F;tmp&#x2F;.X11-unix&#x2F;X0，如果以socket连接，0表示连接到6000端口（A&#x3D;port-6000）。B一般为0。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>向日葵</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows和Linux互相共享打印机</title>
    <link href="/2021/01/04/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA/"/>
    <url>/2021/01/04/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、cups使用lpd协议连接windows共享打印机"><a href="#一、cups使用lpd协议连接windows共享打印机" class="headerlink" title="一、cups使用lpd协议连接windows共享打印机"></a>一、cups使用lpd协议连接windows共享打印机</h1><h2 id="1、windows设置"><a href="#1、windows设置" class="headerlink" title="1、windows设置"></a>1、windows设置</h2><h3 id="1-1、开启共享"><a href="#1-1、开启共享" class="headerlink" title="1.1、开启共享"></a>1.1、开启共享</h3><p><img src="/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA%5C%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210104175626.png" alt="cups通过lpd使用windows打印机"></p><p>打开需要指定的打印机共享开关。</p><h3 id="1-2、启用windows的lpd设置"><a href="#1-2、启用windows的lpd设置" class="headerlink" title="1.2、启用windows的lpd设置"></a>1.2、启用windows的lpd设置</h3><p><img src="/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA%5C%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210104175753.png" alt="cups通过lpd使用windows打印机"></p><p>勾选LPD和LPR选项。</p><h2 id="2、Linux添加打印机"><a href="#2、Linux添加打印机" class="headerlink" title="2、Linux添加打印机"></a>2、Linux添加打印机</h2><p>这里以UOS自带的打印管理器作为例子，如果其他发行版可以访问localhost:631在网页上操作。</p><h3 id="2-1、填写设备uri"><a href="#2-1、填写设备uri" class="headerlink" title="2.1、填写设备uri"></a>2.1、填写设备uri</h3><p>lpd协议的打印机uri构成如下：lpd:&#x2F;&#x2F;host&#x2F;printername。host就是对应windwos的ip或者对应的域名，printername是指打印机共享出来的名字，而不是打印机在windows上的设备名称。打印管理器目前不支持带空格的uri，所以可以把共享名称改成不带空格的。</p><p><img src="/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA%5C%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210104180029.png" alt="cups通过lpd使用windows打印机"></p><h3 id="2-2、选择驱动"><a href="#2-2、选择驱动" class="headerlink" title="2.2、选择驱动"></a>2.2、选择驱动</h3><p><img src="/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA%5C%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210104175945.png" alt="cups通过lpd使用windows打印机"></p><blockquote><p>厂商和型号的下拉列表可以直接搜索，手动选择驱动需要提前以前安装过对应的驱动，才能在下拉列表中显示。如果不是手动填写的uri，而是直接在手动查找里面发现的lpd协议打印机，那么可以自动匹配到驱动，前提是系统适配过对应的打印机。</p></blockquote><h1 id="二、windows使用Linux共享打印机"><a href="#二、windows使用Linux共享打印机" class="headerlink" title="二、windows使用Linux共享打印机"></a>二、windows使用Linux共享打印机</h1><h2 id="1、Linux设置"><a href="#1、Linux设置" class="headerlink" title="1、Linux设置"></a>1、Linux设置</h2><p>打开Linux上的打印机共享设置，UOS打印管理操作如下，如果没有该应用，可以直接登录localhost:631去设置。</p><p><img src="/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA%5Ccups-share1.png"></p><p><img src="/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA%5Ccups-share2.png"></p><h2 id="2、windows添加打印机"><a href="#2、windows添加打印机" class="headerlink" title="2、windows添加打印机"></a>2、windows添加打印机</h2><p>通过http添加Linux共享打印机，需要在windows上也安装对应的驱动，步骤如下：</p><p>![]cups通过lpd使用windows打印机\windows-add1.png)</p><blockquote><p>注意ip后面是cups默认的631端口</p></blockquote><p><img src="/cups%E9%80%9A%E8%BF%87lpd%E4%BD%BF%E7%94%A8windows%E6%89%93%E5%8D%B0%E6%9C%BA%5Cwindows-add2.png"></p>]]></content>
    
    
    <categories>
      
      <category>cups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cups</tag>
      
      <tag>lpd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>valgrind分析说明</title>
    <link href="/2020/09/02/valgrind%E5%88%86%E6%9E%90%E8%AF%B4%E6%98%8E/"/>
    <url>/2020/09/02/valgrind%E5%88%86%E6%9E%90%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>cpp程序开发完成之后，总有些内存问题，最近使用valgrind扫描一下程序，发现bug很多，但是valgrind给出的分析结果虽然很详细，但是由于是英文，还是有些不太理解，这里做一下笔记，记录一些常见问题对应的valgrind分析。下次就可以从valgrind的分析去找代码的问题。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>先将代码使用-g编译，生成调试符号。然后调用下列命令去启动程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">valgrind --log-file=valReport --leak-check=full --show-reachable=<span class="hljs-built_in">yes</span> --leak-resolution=low  YourProcess<br></code></pre></td></tr></table></figure><p>关闭程序之后就会在当前目录生成valReport文件。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="1、Mismatched-free-x2F-delete-x2F-delete"><a href="#1、Mismatched-free-x2F-delete-x2F-delete" class="headerlink" title="1、Mismatched free() &#x2F; delete &#x2F; delete []"></a>1、Mismatched free() &#x2F; delete &#x2F; delete []</h3><p>这里是因为没有把new-delete，malloc-free对应使用，比如new一个堆然后使用free释放内存。</p><h3 id="2、Address-0xafa4d80-is-0-bytes-inside-a-block-of-size-264-alloc’d"><a href="#2、Address-0xafa4d80-is-0-bytes-inside-a-block-of-size-264-alloc’d" class="headerlink" title="2、Address 0xafa4d80 is 0 bytes inside a block of size 264 alloc’d"></a>2、Address 0xafa4d80 is 0 bytes inside a block of size 264 alloc’d</h3><h3 id="3、Conditional-jump-or-move-depends-on-uninitialised-value-s"><a href="#3、Conditional-jump-or-move-depends-on-uninitialised-value-s" class="headerlink" title="3、Conditional jump or move depends on uninitialised value(s)"></a>3、Conditional jump or move depends on uninitialised value(s)</h3><p>没有初始化一个变量就直接使用它。</p>]]></content>
    
    
    <categories>
      
      <category>cpp程序优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>valgrind</tag>
      
      <tag>内存泄漏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cups常用问题记录</title>
    <link href="/2020/08/26/cups%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/08/26/cups%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>cups作为Linux和mac的基础打印服务，在解决问题的时候，首先排除一些人为的问题，然后可以通过查看cups的错误日志解决问题，日志目录在&#x2F;var&#x2F;log&#x2F;cups&#x2F;error.log。</p><h1 id="问题1：临时目录权限问题"><a href="#问题1：临时目录权限问题" class="headerlink" title="问题1：临时目录权限问题"></a>问题1：临时目录权限问题</h1><p>反馈说某台打印机无法打印，查看打印日志的时候发现以下问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs textile">D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[12]=&quot;TMPDIR=/var/spool/cups/tmp&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[13]=&quot;USER=root&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[14]=&quot;CUPS_MAX_MESSAGE=2047&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[15]=&quot;CUPS_SERVER=/run/cups/cups.sock&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[16]=&quot;CUPS_ENCRYPTION=IfRequested&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[17]=&quot;IPP_PORT=631&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[18]=&quot;CHARSET=utf-8&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[19]=&quot;LANG=zh_CN.UTF-8&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[20]=&quot;PPD=/etc/cups/ppd/HP-LaserJet-M1319f-MFP.ppd&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[21]=&quot;RIP_MAX_CACHE=128m&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[22]=&quot;CONTENT_TYPE=application/vnd.cups-pdf-banner&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[23]=&quot;DEVICE_URI=smb://workgroup/192.168.5.162/A912&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[24]=&quot;PRINTER_INFO=HP LaserJet M1319f MFP&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[25]=&quot;PRINTER_LOCATION=A912&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[26]=&quot;PRINTER=HP-LaserJet-M1319f-MFP&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[27]=&quot;PRINTER_STATE_REASONS=none&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[28]=&quot;CUPS_FILETYPE=document&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[29]=&quot;FINAL_CONTENT_TYPE=application/vnd.cups-pdf&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[30]=&quot;AUTH_I****&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[31]=&quot;AUTH_U****&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] envp[32]=&quot;AUTH_P****&quot;<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] Started filter /usr/lib/cups/filter/bannertopdf (PID 12160)<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] Started filter /usr/lib/cups/filter/pdftopdf (PID 12161)<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] Started filter /usr/lib/cups/filter/foomatic-rip (PID 12162)<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] Started backend /usr/lib/cups/backend/smb (PID 12163)<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] pdftopdf: Last filter determined by the PPD: foomatic-rip; FINAL_CONTENT_TYPE: application/vnd.cups-pdf =&gt; pdftopdf will log pages in page_log.<br>D [26/Aug/2020:09:56:30 +0800] [Job 8] Set job-printer-state-message to &quot;Can\&#x27;t create temporary file&quot;, current level=ERROR<br></code></pre></td></tr></table></figure><p>从日志看这里是因为cups无法在TMPDIR目录创建临时文件，导致无法继续打印，所以先查看该目录的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">getfacl /var/spool/cups/tmp<br></code></pre></td></tr></table></figure><p>结果如下图</p><p><img src="D:\web-blog\blog\source_posts\cups常用问题记录\err.jpg" alt="error"></p><p>从结果看group没有w写权限，通过执行下列命令修复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo setfacl -m g:lp:rwx /var/spool/cups/tmp<br>sudo setfacl -m d:group:lp:rwx /var/spool/cups/<br></code></pre></td></tr></table></figure><p>第一行是添加一个lp用户组，分配rwx权限，第二行是给上级目录添加lp用户组rwx权限，因为tmp目录是集成cups目录权限的，重启后cups调用mkdir创建tmp目录继承cups目录的权限，所以要修改上层cups目录的权限。</p><h1 id="问题2：PPD文件异常"><a href="#问题2：PPD文件异常" class="headerlink" title="问题2：PPD文件异常"></a>问题2：PPD文件异常</h1><p>ppd文件是打印机能力的描述文件，如果ppd文件损坏，会导致cups无法正确解析打印机的各种属性。通过ipp请求获取打印机型号时，cups返回的是添加打印机时缓存的属性，这时候ppd损坏也可以返回正确值，但是cups重启后，重新加载ppd，这个时候就无法获取和ppd相关的属性。代码里面也要做出判断，比如std::map等容器直接使用没有的key会导致异常退出。</p><h1 id="问题3：用户组权限问题"><a href="#问题3：用户组权限问题" class="headerlink" title="问题3：用户组权限问题"></a>问题3：用户组权限问题</h1><p>新版欧拉系统测试打印管理器，发现lpinfo -v可以发现直接的打印机，但是打印管理器自动发现没找到，有一个细节就是用户需要sudo才能执行该命令，但是正常的专业版是不需要的，所以应该是当前用户不在lp和lpadmin组，导致无法管理打印机。输入id命令查看当前用户所属组，发现确实用户默认没有lp和lpadmin组。所以手动添加组即可，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -a -G lp user   <span class="hljs-comment">#给user用户添加lp组</span><br>sudo usermod -a -G lpadmin user <span class="hljs-comment">#给user用户添加lpadmin组</span><br></code></pre></td></tr></table></figure><blockquote><p>目前欧拉版和行业版基于centos，所有的打印机驱动没有适配，暂时需要手动下载安装驱动</p></blockquote><h1 id="问题4：cups配置文件被破坏"><a href="#问题4：cups配置文件被破坏" class="headerlink" title="问题4：cups配置文件被破坏"></a>问题4：cups配置文件被破坏</h1><p>cups服务配置文件位于&#x2F;etc&#x2F;cups&#x2F;cupsd.conf，有时候配置文件被系统其他程序破坏，导致无法启动，可以重新安装cups-daemon服务，重新安装之后会初始化配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install cups-daemon --reinstall<br></code></pre></td></tr></table></figure><p>不要卸载cups，这是两个包，而且重新安装不会卸载对应的强依赖，更加安全。</p>]]></content>
    
    
    <categories>
      
      <category>linux学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cups</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10-vs2015编译thrift0.11.0</title>
    <link href="/2020/08/19/Windows10-vs2015%E7%BC%96%E8%AF%91thrift0-11-0/"/>
    <url>/2020/08/19/Windows10-vs2015%E7%BC%96%E8%AF%91thrift0-11-0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>U盘bootloader安装过程</title>
    <link href="/2020/07/29/U%E7%9B%98bootloader%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
    <url>/2020/07/29/U%E7%9B%98bootloader%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1、系统启动流程"><a href="#1、系统启动流程" class="headerlink" title="1、系统启动流程"></a>1、系统启动流程</h1><p>系统启动流程大致如下：</p><ol><li><p>开机上电</p></li><li><p>BIOS&#x2F;UEFI</p></li><li><p>从分区表MBR&#x2F;GPT中查找跳转信息</p></li><li><p>进入bootloader(ntldr&#x2F;grub&#x2F;syslinux)</p></li><li><p>系统内核</p></li><li><p>完整系统</p></li></ol><h2 id="1-1、BIOS和UEFI的区别"><a href="#1-1、BIOS和UEFI的区别" class="headerlink" title="1.1、BIOS和UEFI的区别"></a>1.1、BIOS和UEFI的区别</h2><p>他们的作用都是用来初始化硬件提供硬件的软件抽象，</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bootloader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云打印实现流程与细节</title>
    <link href="/2020/07/22/%E4%BA%91%E6%89%93%E5%8D%B0%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%E4%B8%8E%E7%BB%86%E8%8A%82/"/>
    <url>/2020/07/22/%E4%BA%91%E6%89%93%E5%8D%B0%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%E4%B8%8E%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h1 id="1、云打印组成结构"><a href="#1、云打印组成结构" class="headerlink" title="1、云打印组成结构"></a>1、云打印组成结构</h1><p>云打印机分为windows端的服务端和Linux下的客户端。服务端和客户端都是多进程架构，分别由两个和四个进程组成。客户端和服务器通信采用thrift的rpc框架，通过定义统一的IDL接口，实现接口统一。</p><h2 id="1-1客户端组成"><a href="#1-1客户端组成" class="headerlink" title="1.1客户端组成"></a>1.1客户端组成</h2><p>客户端由四个进程组成，分别是：</p><ul><li><p>deepin-cloud-print-agent</p></li><li><p>deepin-cloud-print-configurator</p></li><li><p>dcp</p></li><li><p>deepin-cloud-print-daemon</p><p>deepin-cloud-print-agent是一个开机自启dbus服务，用户权限启动。这个dbus服务提供三个接口，用来获取配置文件存储的加密认证码，输入框的加密认证码和打印完成的系统通知。deepin-cloud-print-daemon也是一个开机自启的dbus服务进程，但是是root权限启动，这个dbus服务就是封装deepin-cloud-print-agent里面的接口（个人感觉这两个进程功能有些重复）。dcp是最重要的一个部分，作为backend后端，在程序安装的时候拷贝到&#x2F;usr&#x2F;lib&#x2F;cups&#x2F;backend&#x2F;目录。使用云打印的时候cups就会调用这个后端去处理打印。deepin-cloud-print-configurator是Qt界面交互程序，提供用户输入ip和授权码的入口，展示和添加云打印机。</p></li></ul><h2 id="1-2客户端工作流程"><a href="#1-2客户端工作流程" class="headerlink" title="1.2客户端工作流程"></a>1.2客户端工作流程</h2><ul><li><p>安装</p><p>安装的时候除了会执行一些常规的拷贝操作，postinst脚本会在安装完成之后，修改dcp的权限以及日志目录的权限、用户、组，保证cups可以正常访问。重启之后agent和daemon就会在后台常驻提供dbus服务。</p></li><li><p>启动配置界面</p><p>配置界面启动之后，用户输入远程ip和授权码，点击下一步，程序通过thrift调用windows上的verify接口验证，验证完成之后通过ListPrinter接口获取远程打印机列表，然后获取本地cups的打印机列表进行对比，对已经添加过的云打印机区分不同的图标进行展示。用户点击添加按钮，程序调用lpadmin进行打印机添加，添加打印机的ppd是提前固定写死的，后续可以扩展为实时获取windows打印机的支持属性，动态生成ppd文件。</p></li><li><p>打印</p><p>用户通过软件选择云打印机进行打印时，cups会调用dcp后端程序，并将打印参数option传递给它。cups的job模块会向stdin的标准输入里面写入输出文件的内容，dcp会读取stdin的内容在&#x2F;var&#x2F;spool&#x2F;dcp&#x2F;SPOOL目录生成中间文件。然后使用gs将ps文件翻译为pdf文件，临时目录在&#x2F;var&#x2F;cache&#x2F;cups&#x2F;dcp&#x2F;,然后通过print接口调用远程服务器上的打印机功能。</p></li><li><p>打印机通知</p><p>dcp等待服务器端处理完打印任务之后获取打印机结果，然后调用daemon的dbus接口弹出打印结果通知。</p></li></ul><h2 id="2-1服务端组成"><a href="#2-1服务端组成" class="headerlink" title="2.1服务端组成"></a>2.1服务端组成</h2><p>服务端由两个进程组成：</p><ul><li><p>PrintAgent</p></li><li><p>CloudPrint</p></li></ul><p>PrintAgent是一个后台常驻UI程序,由Qt和thrift cpp实现，主要是四个功能，界面部分展示当前机器的ip和授权码，数据通过rpc接口从CloudPrint获取，用户可以手动更新授权码。业务部分实现了一个PrinterAgentServer服务实例，里面提供了打印的相关操作的具体实现接口，比如DefaultPrinter获取默认打印机，StartJob调用第三方工具SumatraPDF进行打印等等。这些接口供CloudPrint调用。然后实现了一个PrintNotifyClient客户端接口，去调用CloudPrint提供的对应的接口。这些接口主要用来通知CloudPrint服务器打印任务状态。PrintNotify是一个在子线程死循环监听打印机任务状态的实例，是通过winSpool接口获取相关的通知信息，然后转发给PrintNotifyClient。</p><p>CloudPrint是go实现的后台服务，主要功能类似于一个中转站，连接Linux的客户端和windows端的PrintAgent。CloudPrint启动了三个服务实例，configServer是和PrintAgent之间传输配置信息的服务接口，默认启动会创建一个默认授权码，PrintAgent获取和更新授权码都是通过这个服务。cloudPrintServer提供打印相关的中间接口，接受客户端dcp传输过来的打印数据和打印指令，处理完成之后调用go里面的serverPrinter客户端实例去调用PrintAgent服务端接口进行真实打印任务。printerNotifyServer作为通知服务的实例，接受PrintAgent发来的打印机任务通知请求。CloudPrint还调用svc库实现了windows服务的注册、启动、删除等接口。</p><h2 id="2-2服务端工作流程"><a href="#2-2服务端工作流程" class="headerlink" title="2.2服务端工作流程"></a>2.2服务端工作流程</h2><ul><li><p>安装</p><p>安装完成之后，PrintAgent常驻后台，成为一个托盘程序，CloudPrint注册为一个windows服务。</p></li><li><p>启动界面程序</p><p>PrintAgent启动之后会在界面上展示ip列表和默认的授权码，这些信息是rpc接口从CloudPrint获取，用户重新输入授权码，更新也是调用CloudPrint接口，CloudPrint的config实例会将新的配置信息存储到本地。</p></li><li><p>打印流程</p><p>Linux客户端通过rpc接口调用CloudPrint的服务接口，然后CloudPrint通过rpc接口调用PrintAgent的打印服务端接口，所以CloudPrint本质上就是个中转程序，理论上可以将它的功能合并到c++实现的PrintAgent程序中，这里估计是考虑到go的高并发性，提高打印效率（大量打印任务的情况下），所以采用go作为中转程序。</p></li></ul><h1 id="2、thrift的使用技巧"><a href="#2、thrift的使用技巧" class="headerlink" title="2、thrift的使用技巧"></a>2、thrift的使用技巧</h1><p>thrift作为rpc架构，实现远程进程通信，有tcp和http两种协议选项。优点在于，只要定义了一个IDL接口，可以自动编译成常见语言的通信框架代码，编译工具thrift.exe可以去官网下载指定版本，不同版本编译的代码会有很大不同，就拿cpp来说，毕竟cpp的标准库也在不停添加新特性。然后用户只需要继承虚基类实现对应的虚函数（就cpp而言）就行，想要启动一个thrift的服务，只需要将该类作为一个handle传递给server，server内部维护的map就会将接口和实现对应起来，客户端只需要使用自动生成的客户端实例就可以连接服务器，直接调用服务器的接口。</p><h2 id="IDL示例"><a href="#IDL示例" class="headerlink" title="IDL示例"></a>IDL示例</h2><p>User.thrift</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs textile">namespace cpp Sample<br><br><br><br>struct User &#123;<br>    1:required i32 id;<br>    2:required string name;<br>    3:required string avatar;<br>    4:required string address;<br>    5:required string mobile;<br>&#125;<br><br>struct UserList &#123;<br>    1:required list&lt;User&gt; userList;<br>    2:required i32 page;<br>    3:required i32 limit;<br>&#125;<br></code></pre></td></tr></table></figure><p>Service.thrift</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs textile">include &quot;User.thrift&quot;<br><br>namespace cpp Sample<br><br><br><br>typedef map&lt;string, string&gt; Data<br><br>struct Response &#123;<br>    1:required i32 errCode; //错误码<br>    2:required string errMsg; //错误信息<br>    3:required Data data;<br>&#125;<br><br>//定义服务<br>service Greeter &#123;<br>    Response SayHello(<br>        1:required User.User user<br>    )<br><br>    Response GetUser(<br>        1:required i32 uid<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>User.thrift里面定义的是公用的数据结构，namespace表示命名空间，cpp表示对应的语言，Service.thrift定义的是提供的服务接口，编译完成会生成服务端的虚基类和客户端的直接调用接口。编译命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">thrift -r --gen cpp thrift/Service.thrift<br></code></pre></td></tr></table></figure><p>-r参数可以自动编译include进去的User.thrift文件，–gen 后面接你的目标语言。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云打印</tag>
      
      <tag>thrift</tag>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows平台通用获取硬件信息</title>
    <link href="/2020/06/24/windows%E5%B9%B3%E5%8F%B0%E9%80%9A%E7%94%A8%E8%8E%B7%E5%8F%96%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
    <url>/2020/06/24/windows%E5%B9%B3%E5%8F%B0%E9%80%9A%E7%94%A8%E8%8E%B7%E5%8F%96%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="windows平台通用获取硬件信息"><a href="#windows平台通用获取硬件信息" class="headerlink" title="windows平台通用获取硬件信息"></a>windows平台通用获取硬件信息</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&amp;emsp;&amp;emsp; 本次项目需求之一是获取从xp到win10的所有系统版本的硬件信息。windows常用获取硬件信息的方法都是通过控制台执行wmic命令，然后解析输出获取对应的硬件信息，例如获取硬盘信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic diskdrive get model,serialnumber<br></code></pre></td></tr></table></figure><p>但这种方法存在局限性，在xp上控制台无法交互，也就是说虽然wmic可以获取到结果，但是外部进程无法通过进程通信获取返回结果。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>&amp;emsp;&amp;emsp;通过msdn查询wmic相关信息，发现wmic也是调用wmi的com接口实现的，所以直接使用wmi的com接口就可以避免进程间通信，直接获取结果。为了使用方便，我简单封装了一下这个接口的调用，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">ManageWMIInterface</span><span class="hljs-params">(<span class="hljs-type">const</span> BSTR &amp;querySql, <span class="hljs-type">const</span> QList&lt;std::wstring&gt; ¶mList, QStringList &amp;resultList)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br>    HRESULT hres;<br>    <span class="hljs-comment">// Step 1:  初始化COM</span><br>    <span class="hljs-comment">//    hres = CoInitializeEx(0, COINIT_MULTITHREADED); //这种方式初始化错误</span><br>    hres = <span class="hljs-built_in">CoInitialize</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hres)) &#123;<br>        <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;Failed to initialize COM library. Error code = 0x&quot;</span><br>                   &lt;&lt; hex &lt;&lt; hres &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Program has failed.</span><br>    &#125;<br>    <span class="hljs-comment">// Step 2:  设置COM的安全认证级别</span><br><br>    <span class="hljs-comment">//在实际使用过程中，我发现如果这一步不注释掉的话，程序总是返回false，注释掉之后程序反而可以正常运行，原因未知</span><br><br>    <span class="hljs-comment">// Note: If you are using Windows 2000, you need to specify -</span><br>    <span class="hljs-comment">// the default authentication credentials for a user by using</span><br>    <span class="hljs-comment">// a SOLE_AUTHENTICATION_LIST structure in the pAuthList ----</span><br>    <span class="hljs-comment">// parameter of CoInitializeSecurity ------------------------</span><br>    <span class="hljs-comment">//    hres =  CoInitializeSecurity(</span><br>    <span class="hljs-comment">//                NULL,</span><br>    <span class="hljs-comment">//                -1,      // COM negotiates service</span><br>    <span class="hljs-comment">//                NULL,    // Authentication services</span><br>    <span class="hljs-comment">//                NULL,    // Reserved</span><br>    <span class="hljs-comment">//                RPC_C_AUTHN_LEVEL_DEFAULT,    // authentication</span><br>    <span class="hljs-comment">//                RPC_C_IMP_LEVEL_IMPERSONATE,  // Impersonation</span><br>    <span class="hljs-comment">//                NULL,             // Authentication info</span><br>    <span class="hljs-comment">//                EOAC_NONE,        // Additional capabilities</span><br>    <span class="hljs-comment">//                NULL              // Reserved</span><br>    <span class="hljs-comment">//            );</span><br><br>    <span class="hljs-comment">//    if (FAILED(hres)) &#123;</span><br>    <span class="hljs-comment">//        cout &lt;&lt; &quot;Failed to initialize security. Error code = 0x&quot;</span><br>    <span class="hljs-comment">//             &lt;&lt; hex &lt;&lt; hres &lt;&lt; endl;</span><br>    <span class="hljs-comment">//        CoUninitialize();</span><br>    <span class="hljs-comment">//        return false; // Program has failed.</span><br>    <span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">// Step 3:  获得WMI连接COM接口</span><br>    CLSID CLSID_WbemLocator = &#123;<span class="hljs-number">0x4590F811</span>, <span class="hljs-number">0x1D3A</span>, <span class="hljs-number">0x11D0</span>, &#123;<span class="hljs-number">0x89</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x24</span>&#125;&#125;;<br>    IWbemLocator *pLoc = <span class="hljs-literal">nullptr</span>;<br>    hres = <span class="hljs-built_in">CoCreateInstance</span>(<br>               CLSID_WbemLocator,<br>               <span class="hljs-literal">nullptr</span>,<br>               CLSCTX_INPROC_SERVER,<br>               IID_IWbemLocator, (LPVOID *)&amp;pLoc);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hres)) &#123;<br>        <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;Failed to create IWbemLocator object.&quot;</span><br>                   &lt;&lt; <span class="hljs-string">&quot; Err code = 0x&quot;</span><br>                   &lt;&lt; hex &lt;&lt; hres &lt;&lt; endl;<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Program has failed.</span><br>    &#125;<br><br><br>    <span class="hljs-comment">// Step 4:  通过连接接口连接WMI的内核对象名&quot;ROOT//CIMV2&quot;</span><br>    IWbemServices *pSvc = <span class="hljs-literal">nullptr</span>;<br><br>    hres = pLoc-&gt;<span class="hljs-built_in">ConnectServer</span>(<br><br>               <span class="hljs-type">_bstr_t</span>(<span class="hljs-string">L&quot;ROOT\\CIMV2&quot;</span>), <span class="hljs-comment">// Object path of WMI namespace</span><br>               <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// User name. nullptr = current user</span><br>               <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// User password. nullptr = current</span><br>               <span class="hljs-number">0</span>, <span class="hljs-comment">// Locale. nullptr indicates current</span><br>               <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// Security flags.</span><br>               <span class="hljs-number">0</span>, <span class="hljs-comment">// Authority (e.g. Kerberos)</span><br>               <span class="hljs-number">0</span>, <span class="hljs-comment">// Context object</span><br>               &amp;pSvc <span class="hljs-comment">// pointer to IWbemServices proxy</span><br>           );<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hres)) &#123;<br>        <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;Could not connect. Error code = 0x&quot;</span><br>                   &lt;&lt; hex &lt;&lt; hres &lt;&lt; endl;<br>        pLoc-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Program has failed.</span><br>    &#125;<br><br><br>    <span class="hljs-comment">// Step 5:  设置请求代理的安全级别</span><br>    hres = <span class="hljs-built_in">CoSetProxyBlanket</span>(<br>               pSvc, <span class="hljs-comment">// Indicates the proxy to set</span><br>               RPC_C_AUTHN_WINNT, <span class="hljs-comment">// RPC_C_AUTHN_xxx</span><br>               RPC_C_AUTHZ_NONE, <span class="hljs-comment">// RPC_C_AUTHZ_xxx</span><br>               <span class="hljs-literal">nullptr</span>, <span class="hljs-comment">// Server principal name</span><br>               RPC_C_AUTHN_LEVEL_CALL, <span class="hljs-comment">// RPC_C_AUTHN_LEVEL_xxx</span><br>               RPC_C_IMP_LEVEL_IMPERSONATE, <span class="hljs-comment">// RPC_C_IMP_LEVEL_xxx</span><br>               <span class="hljs-literal">nullptr</span>, <span class="hljs-comment">// client identity</span><br>               EOAC_NONE <span class="hljs-comment">// proxy capabilities</span><br>           );<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hres)) &#123;<br>        <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;Could not set proxy blanket. Error code = 0x&quot;</span><br>                   &lt;&lt; hex &lt;&lt; hres &lt;&lt; endl;<br>        pSvc-&gt;<span class="hljs-built_in">Release</span>();<br>        pLoc-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Program has failed.</span><br>    &#125;<br>    <span class="hljs-comment">// Step 6: 通过请求代理来向WMI发送请求----</span><br>    <span class="hljs-comment">// For example, get the name of the operating system</span><br>    IEnumWbemClassObject *pEnumerator = <span class="hljs-literal">nullptr</span>;<br>    BSTR wql = <span class="hljs-built_in">SysAllocString</span>(<span class="hljs-string">L&quot;WQL&quot;</span>);<br>    hres = pSvc-&gt;<span class="hljs-built_in">ExecQuery</span>(<br>               wql,<br><br><br>               querySql,<span class="hljs-comment">//只需要通过修改这里的查询语句，就可以实现对MAC地址等其他信息的查询</span><br>               WBEM_FLAG_FORWARD_ONLY | WBEM_FLAG_RETURN_IMMEDIATELY,<br>               <span class="hljs-literal">nullptr</span>,<br>               &amp;pEnumerator);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hres)) &#123;<br>        <span class="hljs-built_in">qWarning</span>() &lt;&lt; <span class="hljs-string">&quot;Query for Network Adapter Configuration failed.&quot;</span><br>                   &lt;&lt; <span class="hljs-string">&quot; Error code = 0x&quot;</span><br>                   &lt;&lt; hex &lt;&lt; hres &lt;&lt; endl;<br>        pSvc-&gt;<span class="hljs-built_in">Release</span>();<br>        pLoc-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Program has failed.</span><br>    &#125;<br>    <span class="hljs-comment">// Step 7:  循环枚举所有的结果对象</span><br><br>    IWbemClassObject *pclsObj = <span class="hljs-literal">nullptr</span>;<br>    ULONG uReturn = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (pEnumerator) &#123;<br>        HRESULT hr = pEnumerator-&gt;<span class="hljs-built_in">Next</span>(WBEM_INFINITE, <span class="hljs-number">1</span>,<br>                                       &amp;pclsObj, &amp;uReturn);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == uReturn) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        foreach (std::wstring param, paramList) &#123;<br>            VARIANT vtProp;<br>            <span class="hljs-built_in">VariantInit</span>(&amp;vtProp);<br><br>            hr = pclsObj-&gt;<span class="hljs-built_in">Get</span>(param.<span class="hljs-built_in">data</span>(), <span class="hljs-number">0</span>, &amp;vtProp, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//查询不同的硬件信息，除了修改上面的查询语句，这里的字段也要修改</span><br><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">FAILED</span>(hr)) &#123;<br>                <span class="hljs-keyword">if</span> (vtProp.bstrVal)<br>                    resultList.<span class="hljs-built_in">append</span>(QString::<span class="hljs-built_in">fromStdWString</span>(vtProp.bstrVal));<br>                <span class="hljs-keyword">else</span><br>                    resultList.<span class="hljs-built_in">append</span>(QString::<span class="hljs-built_in">fromStdWString</span>(<span class="hljs-string">L&quot;&quot;</span>));<br>            &#125;<br>            <span class="hljs-built_in">VariantClear</span>(&amp;vtProp);<br>        &#125;<br><br>    &#125;<span class="hljs-comment">//end while</span><br><br>    <span class="hljs-comment">// 释放资源</span><br>    <span class="hljs-keyword">if</span> (pSvc)<br>        pSvc-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-keyword">if</span> (pLoc)<br>        pLoc-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-keyword">if</span> (pEnumerator)<br>        pEnumerator-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-keyword">if</span> (pclsObj)<br>        pclsObj-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-built_in">CoUninitialize</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// Program successfully completed.</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用接口示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">BSTR sql = <span class="hljs-built_in">SysAllocString</span>(<span class="hljs-string">L&quot;SELECT * FROM Win32_NetworkAdapter WHERE (MACAddress IS NOT NULL) AND ((PNPDeviceID LIKE &#x27;PCI%&#x27;) OR (PNPDeviceID LIKE &#x27;USB%&#x27;))&quot;</span>);<br>    QList&lt;std::wstring&gt; paramList = &#123;<span class="hljs-string">L&quot;name&quot;</span>, <span class="hljs-string">L&quot;macaddress&quot;</span>, <span class="hljs-string">L&quot;NetworkAddresses&quot;</span>&#125;;<br>    QList&lt; QStringList&gt;  resultList;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ManageWMIInterface</span>(sql, paramList, resultList)) &#123;<br>        foreach (QStringList list, resultList) &#123;<br>            <span class="hljs-keyword">if</span> (list.<span class="hljs-built_in">count</span>() == <span class="hljs-number">3</span>) &#123;<br>                strAdapters.<span class="hljs-built_in">append</span>(list.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>));<br>                strMACs.<span class="hljs-built_in">append</span>(list.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>));<br>                strIPs.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;<br><br>    &#125; <br></code></pre></td></tr></table></figure><p>从使用方法不难发现，其实wmi的调用接口就是传入sql语句查询指定的硬件信息，通过sql的查询条件筛选出需要的数据，这里是为了查询出物理网卡信息，并去掉虚拟网卡。</p><h2 id="mingw使用wmi的注意事项"><a href="#mingw使用wmi的注意事项" class="headerlink" title="mingw使用wmi的注意事项"></a>mingw使用wmi的注意事项</h2><h3 id="1、模块引入"><a href="#1、模块引入" class="headerlink" title="1、模块引入"></a>1、模块引入</h3><p>&amp;emsp;&amp;emsp;在Qt中使用com接口需要在工程中引入axcontainer模块，不然相关com接口无法通过编译，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">QT       += core gui network svg  xml axcontainer<br></code></pre></td></tr></table></figure><h3 id="2、CLSID-WbemLocator"><a href="#2、CLSID-WbemLocator" class="headerlink" title="2、CLSID_WbemLocator"></a>2、CLSID_WbemLocator</h3><p> &amp;emsp;&amp;emsp;在msvc编译器中这个对象的值已经通过宏定义取到了，但是在mingw中没有实现这个接口，导致编译不过，所以只能自己定义该对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">CLSID CLSID_WbemLocator = &#123;<span class="hljs-number">0x4590F811</span>, <span class="hljs-number">0x1D3A</span>, <span class="hljs-number">0x11D0</span>, &#123;<span class="hljs-number">0x89</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x24</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>这个对象的值是从注册表中取得的，经查询所有版本的windows系统这个对象在注册表中的值都是固定的。</p><h2 id="硬盘信息特例"><a href="#硬盘信息特例" class="headerlink" title="硬盘信息特例"></a>硬盘信息特例</h2><p>&amp;emsp;&amp;emsp;实际测试当中发现wmi在xp中无法获取硬盘的serialnumber，数据库中并没有这一列的信息。这里通过DeviceIoControl获取。经msdn查询，该接口支持xp及以上的系统。使用示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">flipAndCodeBytes</span><span class="hljs-params">(<span class="hljs-type">int</span> iPos, <span class="hljs-type">int</span> iFlip, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pcszStr, <span class="hljs-type">char</span> *pcszBuf)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> iI;<br>    <span class="hljs-type">int</span> iJ = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> iK = <span class="hljs-number">0</span>;<br><br>    pcszBuf [<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (iPos &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> pcszBuf;<br><br>    <span class="hljs-keyword">if</span> (! iJ) &#123;<br>        <span class="hljs-type">char</span> cP = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// First try to gather all characters representing hex digits only.</span><br>        iJ = <span class="hljs-number">1</span>;<br>        iK = <span class="hljs-number">0</span>;<br>        pcszBuf[iK] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (iI = iPos; iJ &amp;&amp; !(pcszStr[iI] == <span class="hljs-string">&#x27;\0&#x27;</span>); ++iI) &#123;<br>            <span class="hljs-type">char</span> cC = <span class="hljs-built_in">tolower</span>(pcszStr[iI]);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(cC))<br>                cC = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            ++cP;<br>            pcszBuf[iK] &lt;&lt;= <span class="hljs-number">4</span>;<br><br>            <span class="hljs-keyword">if</span> (cC &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; cC &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>                pcszBuf[iK] |= (<span class="hljs-type">char</span>)(cC - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cC &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; cC &lt;= <span class="hljs-string">&#x27;f&#x27;</span>)<br>                pcszBuf[iK] |= (<span class="hljs-type">char</span>)(cC - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>                iJ = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (cP == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">if</span> ((pcszBuf[iK] != <span class="hljs-string">&#x27;\0&#x27;</span>) &amp;&amp; ! <span class="hljs-built_in">isprint</span>(pcszBuf[iK])) &#123;<br>                    iJ = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                ++iK;<br>                cP = <span class="hljs-number">0</span>;<br>                pcszBuf[iK] = <span class="hljs-number">0</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! iJ) &#123;<br>        <span class="hljs-comment">// There are non-digit characters, gather them as is.</span><br>        iJ = <span class="hljs-number">1</span>;<br>        iK = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (iI = iPos; iJ &amp;&amp; (pcszStr[iI] != <span class="hljs-string">&#x27;\0&#x27;</span>); ++iI) &#123;<br>            <span class="hljs-type">char</span> cC = pcszStr[iI];<br><br>            <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">isprint</span>(cC)) &#123;<br>                iJ = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            pcszBuf[iK++] = cC;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! iJ) &#123;<br>        <span class="hljs-comment">// The characters are not there or are not printable.</span><br>        iK = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    pcszBuf[iK] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-keyword">if</span> (iFlip)<br>        <span class="hljs-comment">// Flip adjacent characters</span><br>        <span class="hljs-keyword">for</span> (iJ = <span class="hljs-number">0</span>; iJ &lt; iK; iJ += <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-type">char</span> t = pcszBuf[iJ];<br>            pcszBuf[iJ] = pcszBuf[iJ + <span class="hljs-number">1</span>];<br>            pcszBuf[iJ + <span class="hljs-number">1</span>] = t;<br>        &#125;<br><br>    <span class="hljs-comment">// Trim any beginning and end space</span><br>    iI = iJ = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (iK = <span class="hljs-number">0</span>; (pcszBuf[iK] != <span class="hljs-string">&#x27;\0&#x27;</span>); ++iK) &#123;<br>        <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">isspace</span>(pcszBuf[iK])) &#123;<br>            <span class="hljs-keyword">if</span> (iI &lt; <span class="hljs-number">0</span>)<br>                iI = iK;<br>            iJ = iK;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((iI &gt;= <span class="hljs-number">0</span>) &amp;&amp; (iJ &gt;= <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-keyword">for</span> (iK = iI; (iK &lt;= iJ) &amp;&amp; (pcszBuf[iK] != <span class="hljs-string">&#x27;\0&#x27;</span>); ++iK)<br>            pcszBuf[iK - iI] = pcszBuf[iK];<br>        pcszBuf[iK - iI] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> pcszBuf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">readPhysicalDriveSerialnumber</span><span class="hljs-params">(<span class="hljs-type">const</span> QStringList &amp;driveNameList, QStringList &amp;soList)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br>    foreach (<span class="hljs-type">const</span> QString &amp;driveName, driveNameList) &#123;<br>        HANDLE hPhysicalDriveIOCTL = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-comment">//  Windows NT, Windows 2000, Windows XP - admin rights not required</span><br>        hPhysicalDriveIOCTL = <span class="hljs-built_in">CreateFileA</span>(driveName.<span class="hljs-built_in">toStdString</span>().<span class="hljs-built_in">data</span>(), <span class="hljs-number">0</span>,<br>                                          FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>,<br>                                          OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">if</span> (hPhysicalDriveIOCTL == INVALID_HANDLE_VALUE) &#123;<br>            <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;创建hPhysicalDriveIOCTL(%1)失败&quot;</span>).<span class="hljs-built_in">arg</span>(driveName);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            STORAGE_PROPERTY_QUERY query;<br>            DWORD dwBytesReturned = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">char</span> cszBuffer [<span class="hljs-number">10000</span>];<br><br>            <span class="hljs-built_in">memset</span>((<span class="hljs-type">void</span> *) &amp; query, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(query));<br>            query.PropertyId = StorageDeviceProperty;<br>            query.QueryType = PropertyStandardQuery;<br><br>            <span class="hljs-built_in">memset</span>(cszBuffer, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(cszBuffer));<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">DeviceIoControl</span>(hPhysicalDriveIOCTL, IOCTL_STORAGE_QUERY_PROPERTY,<br>                                &amp; query,<br>                                <span class="hljs-built_in">sizeof</span>(query),<br>                                &amp; cszBuffer,<br>                                <span class="hljs-built_in">sizeof</span>(cszBuffer),<br>                                &amp; dwBytesReturned, <span class="hljs-literal">NULL</span>)) &#123;<br>                STORAGE_DEVICE_DESCRIPTOR *descrip = (STORAGE_DEVICE_DESCRIPTOR *) &amp; cszBuffer;<br>                <span class="hljs-type">char</span> cszSerialNumber [<span class="hljs-number">1000</span>];<br>                <span class="hljs-built_in">memset</span>(cszSerialNumber, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>);<br>                <span class="hljs-built_in">flipAndCodeBytes</span>(descrip -&gt; SerialNumberOffset,<br>                                 <span class="hljs-number">0</span>, cszBuffer, cszSerialNumber);<br>                soList.<span class="hljs-built_in">append</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(cszSerialNumber));<br>                <span class="hljs-built_in">CloseHandle</span>(hPhysicalDriveIOCTL);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> soList.<span class="hljs-built_in">count</span>() &gt; <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里flipAndCodeBytes()是用来从所有结果cszBuffer中根据指定offset获取指定的数据。需要注意的是由于xp和win7的序列号原始数据是40位的hex数据，flipAndCodeBytes()返回的是转化过的字符串，但是因为大小端问题，需要转化，代码如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs gcode">QStri<span class="hljs-symbol">ng revertQString(const QString &amp;src)</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">&#123;</span><br><span class="hljs-symbol">    if (src.isEmpty())</span><br><span class="hljs-symbol">        return &quot;&quot;;</span><br><span class="hljs-symbol">    QString dest(src.count(), 0</span>);<br>    for <span class="hljs-comment">(int i = 0; i &lt; src.size()</span> - <span class="hljs-number">1</span>; i += <span class="hljs-number">2</span>) &#123;<br>        QChar temp = src[i];<br>        dest[i] = src[i + <span class="hljs-number">1</span>];<br>        dest[i + <span class="hljs-number">1</span>] = temp;<br>    &#125;<br>    <span class="hljs-comment">//奇数情况</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-comment">(src.count()</span> <span class="hljs-meta">%</span> <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        dest[src.cou<span class="hljs-symbol">nt() - 1</span>] = src[src.cou<span class="hljs-symbol">nt() - 1</span>];<br>    &#125;<br>    retur<span class="hljs-symbol">n dest;</span><br><span class="hljs-symbol">&#125;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">QStringList tempList;</span><br><span class="hljs-symbol">ret = readPhysicalDriveSerialnumber(driveNameList, tempList);</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">QString osVersion = QSysInfo::productVersion();</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">foreach (QString serial, tempList) &#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">        QByteArray buffer = serial.toLocal8</span>Bit<span class="hljs-comment">()</span>;<br>        <span class="hljs-comment">//xp win7 serialnumber是40位hex,readPhysicalDriveSerialnumber已经转为字符串，但需要转换大小端</span><br>        <span class="hljs-comment">//win8 win10是字符串格式</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-comment">(osVersion.contains(&quot;xp&quot;, Qt::CaseInsensitive)</span> || osVersio<span class="hljs-symbol">n.contains(&quot;7</span><span class="hljs-string">&quot;, Qt::CaseInsensitive)) &#123;</span><br><span class="hljs-string">            resultList.append(revertQString(serial));</span><br><span class="hljs-string">        &#125; else &#123;</span><br><span class="hljs-string">            resultList.append(serial);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&amp;emsp;&amp;emsp;使用wmi接口可以在xp及以上系统获取绝大部分硬件信息，只需要处理xp系统获取硬盘信息时，使用DeviceIoControl接口即可。注意wmware的虚拟机没有硬盘信息，根本无法获取，virtualbox虚拟机没有这个问题。</p>]]></content>
    
    
    <categories>
      
      <category>Windows API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>wmi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决CryptoPP加密库在xp运行的bug</title>
    <link href="/2020/05/29/%E8%A7%A3%E5%86%B3CryptoPP%E5%8A%A0%E5%AF%86%E5%BA%93%E5%9C%A8xp%E8%BF%90%E8%A1%8C%E7%9A%84bug/"/>
    <url>/2020/05/29/%E8%A7%A3%E5%86%B3CryptoPP%E5%8A%A0%E5%AF%86%E5%BA%93%E5%9C%A8xp%E8%BF%90%E8%A1%8C%E7%9A%84bug/</url>
    
    <content type="html"><![CDATA[<h1 id="解决CryptoPP加密库在xp运行的bug"><a href="#解决CryptoPP加密库在xp运行的bug" class="headerlink" title="解决CryptoPP加密库在xp运行的bug"></a>解决CryptoPP加密库在xp运行的bug</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>使用Qt5.6.3和win10平台编译的程序在xp上运行，报错:无法定位程序输入点memmove_s于动态链接库msvcrt.dll上。</p><h2 id="排除过程"><a href="#排除过程" class="headerlink" title="排除过程"></a>排除过程</h2><p>这个问题主要是出现的原因是xp上的msvcrt.dll没有提供这个memmove_s这个接口，但是win10上的msvcrt.dll提供了这个接口。但是我搜索了项目代码，并没有显示调用这个接口，所以肯定是其他第三方库调用了这个接口。本项目目前只有一个Cryptopp加密库，所以判断</p><p>应该是这个库引入这个接口。</p><p>为了验证这个问题，我去该库的源码目录搜索了一下（我是通过源码编译mingw版本的库）。这里有个windows的cmd的小工具，可以快速搜索文本，和Linux的grep类似。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">findstr memmove_s ./*<span class="hljs-built_in">cpp</span><br></code></pre></td></tr></table></figure><p>结果发现在modes.cpp里面调用这个接口，同时发现在misc.h中已经以内联实现了这个接口。问题来了，编译该库的时候为什么没有提示接口重复定义，或者为什么没有使用cryptopp自己实现的接口。仔细查看misc.h关于该接口实现的代码，发现该库虽然实现了，但是没有开启相关的宏定义，没有把它编译进去，所以默认使用了string_s里面的实现。宏定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> (!__STDC_WANT_SECURE_LIB__ &amp;&amp; !defined(_MEMORY_S_DEFINED)) || defined(CRYPTOPP_WANT_SECURE_LIB)</span><br></code></pre></td></tr></table></figure><p>这里有三个宏影响这个库的是否引入，从字面看CRYPTOPP_WANT_SECURE_LIB是cryptopp自己定义的宏，修改这个宏不会对编译器产生影响。继续搜索这个宏，发现该宏定义在config.h中，解决办法也通过注释给出了，只要打开宏定义就行，默认是注释状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Define this if you want or need the library&#x27;s memcpy_s and memmove_s.</span><br><span class="hljs-comment">//   See http://github.com/weidai11/cryptopp/issues/28.</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(CRYPTOPP_WANT_SECURE_LIB)</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> CRYPTOPP_WANT_SECURE_LIB</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>但是这种情况会出现重复实现接口的编译错误，所以为了保证正确引入，在memmove_s的前面直接添加namespace,CryptoPP::memmove_s。这样编译完的库就可以在xp上正确运行。</p><h2 id="mingw编译器编译cryptopp"><a href="#mingw编译器编译cryptopp" class="headerlink" title="mingw编译器编译cryptopp"></a>mingw编译器编译cryptopp</h2><p>此处采用的是cryptopp820版本，mingw采用Qt5.6.3自带的mingw492。首先搭建mingw编译环境，详情见我另外一篇博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> cryptopp820<br>make -j4<br></code></pre></td></tr></table></figure><p>该库已经提供了GnuMakefiles，所以在msys2的环境下可以直接编译。</p><p>另外一种编译方式如下（不可行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> cryptopp820<br><span class="hljs-built_in">rm</span> GnuMakefiles<br>qmake -project <span class="hljs-comment">#生成Qt的pro项目文件，修改pro配置，然后执行下列命令</span><br>qmake   <span class="hljs-comment">#生成makefiles</span><br>make -j4<br></code></pre></td></tr></table></figure><p>pro文件修改如下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">TEMPLATE = lib<br>INCLUDEPATH += .<br>CONFIG -= qt<br><br>win32-g++ &#123;<br>    QMAKE_CXXFLAGS += -msse -msse2 -msse3 -mssse3<br>    LIBS += -lws2_32<br>&#125;<br></code></pre></td></tr></table></figure><p>但是在这种情况下，我无法编译通过，应该是编译参数的问题，明显和GnuMakefiles文件里面的编译参数不一致，这个编译参数是copy网上的，估计那些人也是抄袭的别人的没有验证，所以这种方法不可行。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CryptoPP</tag>
      
      <tag>xp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mingw编译环境搭建</title>
    <link href="/2020/05/06/mingw%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/05/06/mingw%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&amp;emsp;&amp;emsp;Qt在windows上使用有两种编译器模式，msvc和mingw，由于我的项目主要是跨平台项目，所以我一般采用mingw版本Qt，并且这种模式发布程序的时候在windows端不需要附带vc运行库，非常方便。但是有一个坏处就是，主流常用的第三方库大多数都是自带vs的项目文件，编译非常方便，而且vcpkg可以一键编译安装各种第三方库（最近有了mingw版）。mingw编译就需要一个类Linux终端的编译环境，自带的mingw小黑框是不行的。最早我采用git bash来编译简单的库，但是后续发现mingw的make程序有问题，很多库编译不过。所以我最后采用msys2。</p><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><p>&amp;emsp;&amp;emsp;先去官网下载安装msys2，然后更新安装必要的组件，最重要的是安装make，autoconfig等工具，但是不要安装mingw，因为如果使用msys2的mingw还不如直接下载安装对应的库即可，msys2是自带大部分常用第三方库的。我是需要使用和Qt SDK版本对应的mingw编译器，也就是Qt安装包里面自带的mingw编译器进行编译。</p><p>&amp;emsp;&amp;emsp;先把mingw的bin目录加入到环境变量Path，然后通过继承windows环境变量的方法在msys2中使用Qt自带的mingw编译器。继承方法：在环境变量添加环境变量MSYS2_PATH_TYPE&#x3D;inherit。可以使用g++ -v查看对应的编译器版本是不是Qt路径的。</p><h1 id="编译第三方库"><a href="#编译第三方库" class="headerlink" title="编译第三方库"></a>编译第三方库</h1><p>&amp;emsp;&amp;emsp;有了这个类unix的编译环境，就可以直接使用常见的三连操作编译即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./config<br>make<br>make install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mingw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QProcess调用外部进程</title>
    <link href="/2020/05/06/QProcess%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E8%BF%9B%E7%A8%8B/"/>
    <url>/2020/05/06/QProcess%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&amp;emsp;&amp;emsp;在Qt程序开发过程中，往往我们会调用一些外部的程序，实现特定的功能，并减少开发工作量。例如有一个项目需要使用Https接口下载一些文件和上传下载一些数据，Qt本身虽然封装了OpenSSL的接口，但是安装包中SDK并不带编译完成的OpenSSL的库文件，需要用户自己手动编译对应版本的OpenSSL（Qt对应的OpenSSL版本号可以调用QSslSocket::sslLibraryBuildVersionString()查看），msvc版本相对比较好编译，但是mingw版本就很费事。关于mingw编译三方库可以参考我的另外一篇。所以最后项目采用wget for windows，利用wget的功能去实现我们想要的功能。wget的压缩包里面已经自带了OpenSSL的库文件。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> bRet = <span class="hljs-literal">false</span>;<br>    QStringList args;<br>    <span class="hljs-comment">//当前wget版本不支持timeout，后续如果有需求需要下载新版wget</span><br>    args &lt;&lt; <span class="hljs-string">&quot;--no-check-certificate&quot;</span> &lt;&lt; <span class="hljs-string">&quot;-c&quot;</span> &lt;&lt; <span class="hljs-string">&quot;-O&quot;</span> &lt;&lt; <span class="hljs-string">&quot;wechat.exe&quot;</span> &lt;&lt; m_url;<br><br>    <span class="hljs-built_in">connect</span>(m_pWgetProcess, &amp;QProcess::readyReadStandardOutput, [&amp;]() &#123;<br>        <span class="hljs-comment">//这里需要死循环处理，不然当wget下载完成，输出还没有读完，导致无法通知进度</span><br>        <span class="hljs-keyword">while</span> (m_pWgetProcess-&gt;<span class="hljs-built_in">bytesAvailable</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>            QString text = m_pWgetProcess-&gt;<span class="hljs-built_in">readLine</span>();<br>            QRegExp <span class="hljs-built_in">reg</span>(<span class="hljs-string">&quot;[\\s0-9K]+[\\.\\s]+([0-9]&#123;1,3&#125;)%\\s+([0-9\\.]+[KM])\\s+([0-9hms]+).*&quot;</span>);<br>            reg.<span class="hljs-built_in">setCaseSensitivity</span>(Qt::CaseInsensitive);<br>            <span class="hljs-keyword">if</span> (reg.<span class="hljs-built_in">exactMatch</span>(text)) &#123;<br>                <span class="hljs-type">int</span> progress = reg.<span class="hljs-built_in">cap</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">toInt</span>();<br>                QString curSize = reg.<span class="hljs-built_in">cap</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">toLocal8Bit</span>();<br>                QString time = reg.<span class="hljs-built_in">cap</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">toLocal8Bit</span>();<br>                emit <span class="hljs-built_in">s_UpdateProgress</span>(progress, time);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (text.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;100%&quot;</span>)) &#123;<br>                emit <span class="hljs-built_in">s_UpdateProgress</span>(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;0s&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (text.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;saved&quot;</span>) &amp;&amp; text.<span class="hljs-built_in">contains</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;[%1/%2]&quot;</span>).<span class="hljs-built_in">arg</span>(m_iFileSize).<span class="hljs-built_in">arg</span>(m_iFileSize))) &#123;<br>                emit <span class="hljs-built_in">s_haveDone</span>();<br>            &#125;<br><br>        &#125;<br>    &#125;);<br>    <span class="hljs-built_in">connect</span>(m_pWgetProcess, &amp;QProcess::readyReadStandardError, [&amp;]() &#123;<br>        <span class="hljs-built_in">qWarning</span>() &lt;&lt; m_pWgetProcess-&gt;<span class="hljs-built_in">readAllStandardError</span>();<br>        emit <span class="hljs-built_in">s_haveError</span>(<span class="hljs-number">2</span>, m_pWgetProcess-&gt;<span class="hljs-built_in">readAllStandardError</span>());<br>    &#125;);<br>    m_pWgetProcess-&gt;<span class="hljs-built_in">setReadChannel</span>(QProcess::StandardOutput);<br>    m_pWgetProcess-&gt;<span class="hljs-built_in">setProcessChannelMode</span>(QProcess::MergedChannels);<br>    m_pWgetProcess-&gt;<span class="hljs-built_in">start</span>(m_wgetFilePath, args);<br>    bRet = m_pWgetProcess-&gt;<span class="hljs-built_in">waitForFinished</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span> (!bRet) &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; m_pWgetProcess-&gt;<span class="hljs-built_in">errorString</span>();<br>        <span class="hljs-function">emit <span class="hljs-title">s_haveError</span><span class="hljs-params">(<span class="hljs-number">2</span>,  m_pWgetProcess-&gt;errorString())</span></span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p>&amp;emsp;&amp;emsp;上述代码非常简单，采用wget下载一个微信程序，实时通知下载进度并通知下载失败或完成，需要注意以下几点：</p><ul><li><p>QProcess启动子进程推荐使用cmd和args分离的形式，适合参数比较复杂的情况</p></li><li><p>需要获取QProcess输出的时候，一般只读StandardOutput通道即可，StandardErro通道会有无意义的错误返回输出，导致解析难度加大</p></li><li><p>start方式启动的子进程需要调用waitForFinished或其他wait接口才能获取到输出，默认是阻塞30s，如果任务超时就会自动退出。需要等待子进程自己退出那么需要将参数传入-1。</p></li><li><p>在获取输出时采用readLine()按行读取解析时，如果输出过于庞大，会出现输出还没有获取完，但是子进程已经退出了（注意此时QProcess其实已经获取了全部输出在缓存里面了，在wait接口后面可以readAll获取到，但是我们是希望在QProcess::readyReadStandardOutput的槽函数里面同步处理）。这里就可以采用while循环的方式，将全部输出全部按行解析。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QProcess</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dpkg从源码打包</title>
    <link href="/2020/05/01/dpkg%E4%BB%8E%E6%BA%90%E7%A0%81%E6%89%93%E5%8C%85/"/>
    <url>/2020/05/01/dpkg%E4%BB%8E%E6%BA%90%E7%A0%81%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&amp;emsp;&amp;emsp;在刚接触Linux软件开发时，在软件开发完成之后都面临一个问题，那就是如何发布？开始我才用最原始的方法，使用压缩包。但是这种模式就很局限，毕竟很难把所有的库依赖都找全。后来使用dpkg打包，这样就跟安装包一样，能够自定义安装的位置，并且检查库依赖是否齐全。下面开始介绍步骤。</p><hr><h1 id="1、创建一个简单项目"><a href="#1、创建一个简单项目" class="headerlink" title="1、创建一个简单项目"></a>1、创建一个简单项目</h1><p>&amp;emsp;&amp;emsp;新建一个简单项目，文件夹命名为test-1.0。注1.0为版本号。</p><h1 id="2、压缩源码"><a href="#2、压缩源码" class="headerlink" title="2、压缩源码"></a>2、压缩源码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zcvf hello_1.0.orig.tar.gz hello-1.0 <span class="hljs-comment">#注意前后下划线的区别</span><br><span class="hljs-built_in">cd</span> hello-1.0<br></code></pre></td></tr></table></figure><h1 id="3、创建打包文件"><a href="#3、创建打包文件" class="headerlink" title="3、创建打包文件"></a>3、创建打包文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dh_make -e emailaddress -f ../hello_1.0.orig.tar.gz <span class="hljs-comment">#指定邮箱和源码</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;此时会在当前文件夹下生成一个的debian目录，目录里面最重要的是control文件，这个是控制打包的依赖，版本号等各种设置，下面就是我的一个简单示例：</p><p><img src="/dpkg%E4%BB%8E%E6%BA%90%E7%A0%81%E6%89%93%E5%8C%85/control.png"></p><p>&amp;emsp;&amp;emsp;同时记得把changelog里面的版本号修改和上图一致。</p><h1 id="4、打包"><a href="#4、打包" class="headerlink" title="4、打包"></a>4、打包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg-buildpackage<br></code></pre></td></tr></table></figure><p>打包完成之后会在上层目录产生deb包。使用dpkg -i xxxx.deb安装即可。</p>]]></content>
    
    
    <categories>
      
      <category>Linux学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dpkg</tag>
      
      <tag>debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对汉字按照拼音排序</title>
    <link href="/2019/09/05/%E5%AF%B9%E6%B1%89%E5%AD%97%E6%8C%89%E7%85%A7%E6%8B%BC%E9%9F%B3%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/09/05/%E5%AF%B9%E6%B1%89%E5%AD%97%E6%8C%89%E7%85%A7%E6%8B%BC%E9%9F%B3%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="汉字排序"><a href="#汉字排序" class="headerlink" title="汉字排序"></a>汉字排序</h1><p>对于英文单词排序很常见，但是对于汉字单词如何排序，可以借助于std的标准库，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;locale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    std::array&lt;<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ,5&gt; str=&#123;<span class="hljs-string">&quot;测试&quot;</span>,<span class="hljs-string">&quot;爱情&quot;</span>,<span class="hljs-string">&quot;剥削&quot;</span>,<span class="hljs-string">&quot;中户&quot;</span>,<span class="hljs-string">&quot;命令&quot;</span>&#125;;<br>    std::<span class="hljs-built_in">sort</span>(str.<span class="hljs-built_in">begin</span>(),str.<span class="hljs-built_in">end</span>(),[](<span class="hljs-type">const</span> <span class="hljs-type">char</span>* a,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* b)                                                      &#123;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">strcoll</span>(a,b)&lt;<span class="hljs-number">0</span>;&#125;);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-built_in">size</span>();i++) &#123;<br>        std::cout&lt;&lt;str.<span class="hljs-built_in">at</span>(i)&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++标准库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汉字拼音排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt5.13.0搭建安卓开发环境</title>
    <link href="/2019/08/05/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2019/08/05/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h1><ol><li><p>新版NDK，我选用的版本是r-20，目前是最新的。</p></li><li><p>新版Android SDK,我选用的25.2.5。</p></li><li><p>Java SDK最好采用1.8.0，实测10版本和12版本识别不了。</p></li><li><p>Qt5.13.0，Qt编译版本选择安装armv7和armv8以及Android x86_64。Qt的组件除了源码都装上，tool也都装上。</p></li></ol><blockquote><p>选择安装x86—64版本是为了在Windows上运行Android x86的64位虚拟机进行测试，因为我没有安卓测试机。至于发布版本则采用armv8版本编译即可，目前主流安卓机的CPU应该都是armv8架构。java的环境变量如何配置自行百度。</p></blockquote><p>最后解压或安装目录如下：</p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C1.png" alt="Qt5-13-0搭建安卓开发环境\1"></p><h1 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h1><p>进入android-sdk目录,打开SDK Manager.exe。如果打开闪退，原因是java的版本不对，或者是环境变量没有配置。打开之后下载勾选的项目，如图：</p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C2.png" alt="Qt5-13-0搭建安卓开发环境\2"></p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C3.png" alt="Qt5-13-0搭建安卓开发环境\3"></p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C4.png" alt="Qt5-13-0搭建安卓开发环境\4"></p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C5.png" alt="Qt5-13-0搭建安卓开发环境\5"></p><blockquote><p>此处，我下载的是Android7.1.1版本，对应的编译工具下载了25.0.3，当然下载最新的编译工具也可以，向下兼容。extras全部下载，最后一项是x86架构Android虚拟机的加速插件。</p></blockquote><p>镜像和sdk下载完了之后，打开android -sdk目录下的AVD manager.exe，创建x86-64架构的Android虚拟机，arm虚拟机会比较慢。创建虚拟机时，分配的RAM如果过大，下面会有提示不能超过多少数值，这时应该减少RAM至阈值或以下，不然会导致虚拟机打开失败。</p><h1 id="配置Qt-For-Android"><a href="#配置Qt-For-Android" class="headerlink" title="配置Qt For Android"></a>配置Qt For Android</h1><p>打开QtCreator，打开菜单里面的工具-选项，选择左侧的设备，然后选择设备tab页。如下图：</p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C6.png" alt="Qt5-13-0搭建安卓开发环境\6"></p><p>右侧的三个选择按钮是选择对应的开发包的根目录，选择完了之后，如果没问题，下面会有提示，配置正确。这是我配置完成之后的截图。最下面是我创建的Android虚拟机。配置完了之后kit界面会自动检测到Android版本的Qt，如下图：</p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C7.png" alt="Qt5-13-0搭建安卓开发环境\7"></p><h1 id="创建Android-App"><a href="#创建Android-App" class="headerlink" title="创建Android App"></a>创建Android App</h1><p>新建一个QML或者widgets应用，选择x86-64版本的Qt套件。然后编译，这时候会提示一个错误：</p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C8.png" alt="Qt5-13-0搭建安卓开发环境\8"></p><p>根据gcc的-l用法，这是提示找不到libc++.so标准库，而标准库在ndk里面，目录如下图：</p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C9.png" alt="Qt5-13-0搭建安卓开发环境\9"></p><p>从txt里面的内容来看，这些数字后缀版本的.a和.so文件类似于一个软链接，最终还是让编译器去找libc++-static.so</p><p>和libc++-abi.so。所以我们可以模仿这种写法，拷贝一份libc++.a.29，然后重新命名为libc++.a，这时候重新编译就会解决这个错误。下面是安卓虚拟机跑QML应用的简单测试，如下图：</p><p><img src="/Qt5-13-0%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%5C10.png" alt="Qt5-13-0搭建安卓开发环境\10"></p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows编译QtMqtt-5.12.1</title>
    <link href="/2019/08/01/Windows%E7%BC%96%E8%AF%91QtMqtt-5-12-1/"/>
    <url>/2019/08/01/Windows%E7%BC%96%E8%AF%91QtMqtt-5-12-1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>mqtt协议主要是用于物联网，机器对机器，网络开销要求小的环境。原理是一个publisher(发布者)发布一个topic(主题),然后发送payload(有效负载，即消息内容)，然后经过一个中间broker(服务器)，另外一个subscriber(订阅者)订阅这个主题，然后发送者发送的消息，这个订阅者就可以接收到了。当然前提是这两个都需要先连接服务器，所以这两个可以理解为都是客户端，只是角色不同。发布者同时也可以是订阅者。原理简单理解之后就是编程了(其实就是找库使用)。这里我们客户端采用Qt的mqtt，服务器采用EMQTT。由于我安装的Qt5.12.1里面没有mqtt模块所以需要自己去github上下载对应的源码，然后编译。而服务器则可以直接在github上下载编译好的程序直接运行，这个后续介绍。</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h2 id="mingw64版"><a href="#mingw64版" class="headerlink" title="mingw64版"></a>mingw64版</h2><p>打开git-bash，进入mqtt的源码根目录，执行&#x2F;QtPath&#x2F;mingw64__730&#x2F;bin&#x2F;qmake(生成Makefile)，然后执行&#x2F;QtPath&#x2F;Tools&#x2F;mingw64____730&#x2F;bin&#x2F;mingw32-make(编译)，中间会有错误：找不到&lt;QtMqtt&#x2F;….&gt;这样的头文件，这里在mingw64的include目录里面新建QtMqtt目录，然后把下载的源码里面的.h文件全部拷贝到新建的QtMqtt目录。然后重新编译。编译完成之后执行mingw32-make install,就会把bin和lib都拷贝到Qt对应的目录。</p><h2 id="msvc64版"><a href="#msvc64版" class="headerlink" title="msvc64版"></a>msvc64版</h2><p>打开vs2017的64位命令框，进入mqtt的源码根目录，执行&#x2F;QtPath&#x2F;msvc2017__64&#x2F;bin&#x2F;qmake(生成Makefile)，然后执行nmake(编译，因为使用的vs2017的命令框，所以nmake在环境变量里面，可以直接运行)，中间会有错误：找不到&lt;QtMqtt&#x2F;….&gt;这样的头文件，这里在msvc2017____64的include目录里面新建QtMqtt目录，然后把下载的源码里面的.h文件全部拷贝到新建的QtMqtt目录。然后重新编译。编译完成之后执行nmake install,就会把bin和lib都拷贝到Qt对应的目录。</p><blockquote><p>这里需要注意qmake和make的搭配，在Windows上qt安装之后mingw编译器会有对应的make工具，那就是mingw32-make，而msvc编译器则是nmake。所以在Windows上编译东西不要盲目的使用make，这里直接使用make编译会提示Makefile的语法错误。Linux则没有这些区别。</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在pro文件里面添加 Qt +&#x3D; mqtt即可</p><h1 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h1><p>解压下载的windows版的压缩包，进入bin目录，执行empx.cmd start启动服务器。然后在网页上访问127.0.0.1:18083就可以通过web直接管理服务器，查看服务器的运行状态。访问需要账户密码，默认账户是admin,密码public。界面如下：</p><p><img src="/Windows%E7%BC%96%E8%AF%91QtMqtt-5-12-1%5C1.png" alt="Windows编译QtMqtt-5-12-1\1"></p><p>点击Listeners，这里面就是服务器提供的服务和对应的端口号，客户端采用不同的协议，按图使用不同的端口即可。界面如下：</p><p><img src="/Windows%E7%BC%96%E8%AF%91QtMqtt-5-12-1%5C2.png" alt="Windows编译QtMqtt-5-12-1\2"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试客户端采用Qt的mqtt里面的例子，截图如下。</p><p><img src="/Windows%E7%BC%96%E8%AF%91QtMqtt-5-12-1%5C3.png" alt="Windows编译QtMqtt-5-12-1\3"></p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QtMqtt编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QCoreApplication::quit()无法退出程序解决方法</title>
    <link href="/2019/07/23/QCoreApplication-quit-%E6%97%A0%E6%B3%95%E9%80%80%E5%87%BA%E7%A8%8B%E5%BA%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2019/07/23/QCoreApplication-quit-%E6%97%A0%E6%B3%95%E9%80%80%E5%87%BA%E7%A8%8B%E5%BA%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用Qt一般是做带界面的桌面软件，然而我在使用Qt写后台服务程序的时候遇到一个问题，程序调用QCoreApplication::quit()无法正常退出程序，程序一直出于挂起状态。以下是我的错误代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> : <span class="hljs-keyword">public</span> QObject<br>&#123;<br> Q_OBJECT<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Test</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br> <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Test</span>();<br><span class="hljs-keyword">public</span> slots:<br><br>&#125;;<br><br><span class="hljs-comment">//cpp</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QCoreApplication&gt;</span></span><br><br>Test::<span class="hljs-built_in">Test</span>(QObject *parent) : <span class="hljs-built_in">QObject</span>(parent)<br>&#123;<br> <span class="hljs-comment">//do something</span><br> <span class="hljs-keyword">if</span>(something is wrong)<br>    qApp-&gt;<span class="hljs-built_in">quit</span>();<br>&#125;<br><br>Test::~<span class="hljs-built_in">Test</span>()<br>&#123;<br> <span class="hljs-comment">//释放内存</span><br> <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;delete&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    Test test;<br><br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码导致程序无法退出，一直导致程序在挂起状态。错误原因是quit()函数是用于退出Qt程序主线程的事件循环，进而结束程序。但是此处是在执行a.exec()之前就执行了quit(),也就是说此时还没有进入主线程的事件循环，所以此处调用quit()是无效的。正确代码如下:</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> : <span class="hljs-keyword">public</span> QObject<br>&#123;<br> Q_OBJECT<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Test</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br> <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Test</span>();<br><span class="hljs-keyword">public</span> slots:<br>&#125;;<br><span class="hljs-comment">//cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QTimer&gt;</span></span><br>Test::<span class="hljs-built_in">Test</span>(QObject *parent) : <span class="hljs-built_in">QObject</span>(parent)<br>&#123;<br> <span class="hljs-comment">//do something</span><br> <span class="hljs-keyword">if</span>(something is wrong)<br>    QTimer::<span class="hljs-built_in">singleShot</span>(<span class="hljs-number">1000</span>,qApp,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">quit</span>()));<br>&#125;<br>Test::~<span class="hljs-built_in">Test</span>()<br>&#123;<br> <span class="hljs-comment">//释放内存</span><br> <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;delete&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"> </span>&#123;<br> <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br> Test test;<br> <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br> &#125;<br></code></pre></td></tr></table></figure><p>此处采用QTimer定时器，将quit()操作放在1秒之后，然后程序继续执行，就会进入主线程的事件循环，QTimer的timeout之后调用quit()这时就可以正确退出程序了。</p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QCoreApplication</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake编译OsgEarth2.10.1-VS2017-64版</title>
    <link href="/2019/06/17/cmake%E7%BC%96%E8%AF%91OsgEarth2-10-1-VS2017-64%E7%89%88/"/>
    <url>/2019/06/17/cmake%E7%BC%96%E8%AF%91OsgEarth2-10-1-VS2017-64%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了搭建这个osg加osgearth的开发环境，前前后后折腾了好久，中途用vcpkg自动编译了一个版本，但是实践证明osg没问题，但是osgearth有bug，应该是编译的依赖库的问题。所以只能自己手动编译，编译osgearth的前提是编译好osg和它的第三方依赖库。osg官网已经提供了各个版本的编译好的sdk，所以就省了这一个环节（osg本身的编译时间太长）。因为我要编译的是vs2017-64版本，所以我下载的<a href="https://objexx.com/OpenSceneGraph.html">osg-3.6.3-vs2017-x64</a>这个版本还包含osgQt，debug和release都要下载。然后下载官方的第三方库，<a href="http://www.openscenegraph.org/index.php/download-section/dependencies">thirdparty-vs2017-64</a>,里面有两个版本，下载Full package版本。为了后续编译的条理性，创建一个目录OSG，将osg的debug和release版本都解压到osg目录，将第三方库也解压到osg目录。然后在环境变量PATH里面添加osg的debug和release版本的bin目录，还有第三方库的bin目录。这是为了cmake在编译的时候可以自动检索到这些依赖库。</p><h1 id="编译其他依赖"><a href="#编译其他依赖" class="headerlink" title="编译其他依赖"></a>编译其他依赖</h1><p>官网提供的第三方库包含了gdal等，但是osgearth还需要geos，protobuf,sqlite3，poco，rocksdb等。由于我刚开始初学，暂时用不到后面的扩展，这里我们只编译geos，sqlite3，poco,protobuf。这里统一使用cmake创建sln工程，这是为了更好的控制编译的参数。tool选择vs2017 x64(默认是选择win32，一定要修改)。</p><blockquote><p>这里要注意cmake的时候，build目录（生成的vs工程和后续编译的二进制的目录）一定要和install（自动安装的目录）分开，不能选择同一个目录。这个install目录由CMAKE_INSTALL_PREFIX参数控制，默认在c:&#x2F;Program Files(x86)</p><p>目录，一定要选在其他目录，不然安装的时候由于没有权限导致无法安装。</p></blockquote><h2 id="编译geos-3-7-2"><a href="#编译geos-3-7-2" class="headerlink" title="编译geos-3.7.2"></a>编译geos-3.7.2</h2><p>这个过程没有什么曲折，cmake生成工程，vs编译安装即可。将安装完的bin，include，lib三个目录直接拷贝到第三方库的目录下即可，后续编译的依赖都需要拷贝到第三方库目录，方便统一设置环境变量。</p><blockquote><p>cmake的时候注意是不是编译的dll版（shared），osgearth貌似需要dll版的依赖库。后续编译的protobuf就遇到这个问题，最开始编译的是静态版，导致编译osgearth出现大量错误，将它编译成动态版之后sogearth就完美编译成功了。同时编译的时候注意是否有参数区分了debug和release编译的库名称，一般用d来表示debug版。这个参数是CMAKE_DEBUG_POSTFIX，可能Cmakelist.txt并没有配置这个参数，那么就需要手动添加，但是有可能配置了其他参数来替代它，比如protobuf就是使用PROTOBUF_DEBUG_POSTFIX，这两者作用是一致的，这时候就不要再添加了。在cmake-gui的上方有一个按钮名称为Add Entry ,操作如下图所示：</p></blockquote><p><img src="/cmake%E7%BC%96%E8%AF%91OsgEarth2-10-1-VS2017-64%E7%89%88%5CIMG_0046.png" alt="cmake编译OsgEarth2-10-1-VS2017-64版\IMG_0046"></p><h2 id="编译poco"><a href="#编译poco" class="headerlink" title="编译poco"></a>编译poco</h2><p>poco版本选择poco-1.9.0-all，记得选择all这个版本。其他和geos操作一致。</p><blockquote><p>在用vs编译的时候，选择<em><strong>生成-批生成</strong></em>。然后勾选ALL_BUILD的debug和release版，点击生成即可，这样就会编译debug和release两个版本，编译完成之后同样选择<em><strong>生成-批生成</strong></em>，去掉ALL_BUILD的勾选项，将INTSALL的debug和release勾选，点击生成，这样就会将编译好的库和头文件都拷贝到camke设置的安装目录，操作如下图：</p></blockquote><p><img src="/cmake%E7%BC%96%E8%AF%91OsgEarth2-10-1-VS2017-64%E7%89%88%5CIMG_0047.png" alt="cmake编译OsgEarth2-10-1-VS2017-64版\IMG_0047"></p><h2 id="编译sqlite3"><a href="#编译sqlite3" class="headerlink" title="编译sqlite3"></a>编译sqlite3</h2><p>其实这已经不是编译了，官网上已经提供了编译好的二进制，这个dll可以同时在debug和release两个环境使用。我下载的是sqlite-amalgamation-3280000和sqlite-dll-win64-x64-3280000。解压，将sqlite3.h和sqlit3ext.h拷贝到第三方库的include目录。然后将解压出来的dll转化为lib。操作如下，先打开vs2017的x64 Native cmd窗口，然后cd进入到dll存在的目录，里面包含两个文件，sqlite3.dll和sqlite3.def。调用如下命令即可,就会生成sqlite3.lib和sqlite3.exp。</p><p><img src="/cmake%E7%BC%96%E8%AF%91OsgEarth2-10-1-VS2017-64%E7%89%88%5CIMG_0044.png" alt="cmake编译OsgEarth2-10-1-VS2017-64版\IMG_0044"></p><h2 id="编译protobuf"><a href="#编译protobuf" class="headerlink" title="编译protobuf"></a>编译protobuf</h2><p>版本一定要选择3.8.0，这是osgearth的依赖要求，cmake的时候去掉protobuf-BUILD_TESTS的勾选，不然会报错，然后勾上protobuf_BUILD_SHARED_LIBS，编译动态版。然后在zlib的依赖文件在第三方库中已经有，选择即可。如下图所示：</p><p><img src="/cmake%E7%BC%96%E8%AF%91OsgEarth2-10-1-VS2017-64%E7%89%88%5CIMG_0045.png" alt="cmake编译OsgEarth2-10-1-VS2017-64版\IMG_0045"></p><blockquote><p>protobuf默认是编译静态版，后续osgearth编译的时候需要动态版，导致编译失败。编译这个的同时也解决了我一个问题，由于我总是使用gcc编译动态库，动态版就是.so，静态版就是.a。但是msvc的很多库就是编译要链接.lib文件，运行的时候需要.dll支持，不然无法运行。我搞不懂这个库到底是静态版还是动态版，通过这次百度才知道，这其实是一个动态版的库，那个.lib里面只是导出的定义，实现还是在.dll里面。msvc编译的库可以分为四种：1、MT(多线程静态release版)；2、MTd(多线程静态debug版)；3、MD(多线程动态release版)；4、MDd(多线程动态debug版)。这个可以在vs里面修改。右键工程–选择属性–c&#x2F;c++–代码生成-运行库。</p></blockquote><h1 id="编译osgEarth"><a href="#编译osgEarth" class="headerlink" title="编译osgEarth"></a>编译osgEarth</h1><p>osgearth选用2.10.1版本，前面配置完环境变量之后，configure的时候大部分依赖都会自动找到。这里需要修改一下未能正确配置的地方。1、PROTOBUF_USE_DLLS勾选上；2、THIRD_PARTY_DIR目录选择第三方库目录。3；libcurl库的debug版未找到，手动去第三方库目录添加。再检查一下，有没有漏下的地方。将生成的osgearth库拷贝到OSG目录，环境变量PATH添加该库的bin目录。</p><h1 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h1><p>下载最新的osg数据，<a href="http://www.openscenegraph.org/index.php/download-section/data">下载地址</a>下载最新的3.4.0即可，解压到OSG目录。然后将该目录重命名为data，将osgearth源码里面的data和tests拷贝到OSG目录下，添加环境变量OSG_FILE_PATH，值为OSG&#x2F;data目录。</p>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
      <tag>osgearth</tag>
      
      <tag>osg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp的深拷贝和浅拷贝</title>
    <link href="/2019/06/12/cpp%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2019/06/12/cpp%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="默认拷贝构造"><a href="#默认拷贝构造" class="headerlink" title="默认拷贝构造"></a>默认拷贝构造</h1><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> v):<span class="hljs-built_in">key</span>(k),<span class="hljs-built_in">value</span>(v)<br>    &#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout&lt;&lt;key&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;value&lt;&lt;std::endl;<br><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">int</span> value;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Test <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">25</span>)</span></span>;<br><br>    a.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-function">Test <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>; <span class="hljs-comment">//Test b=a; //效果一样</span><br><br>    b.<span class="hljs-built_in">show</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下:</p><p><img src="/cpp%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%5C1.png" alt="cpp的深拷贝和浅拷贝\1"></p><p>在这个Test类中我并没有实现拷贝构造，但是编译器自动实现了一份拷贝构造,并且也重载了&#x3D;操作符。但是这个默认的拷贝构造函数仅仅只是实现了一个浅拷贝，当类的成员中存在指针对象时这种默认拷贝构造就会出现未知的错误。下面是一份错误的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> v):<span class="hljs-built_in">key</span>(k),<span class="hljs-built_in">value</span>(v)<br>    &#123;<br>        p=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">100</span>);<br>    &#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Test</span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span>(p)<br>            <span class="hljs-keyword">delete</span> p;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>       std::cout&lt;&lt;key&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;value&lt;&lt;std::endl;<br><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-type">int</span> *p;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Test <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">25</span>)</span></span>;<br>    a.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-function">Test <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>    b.<span class="hljs-built_in">show</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下:</p><p><img src="/cpp%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%5C2.png" alt="cpp的深拷贝和浅拷贝\2"></p><p>Test新增了一个int型指针，构造函数里面分配内存空间，析构函数里面释放内存，咋一看没有问题，但是运行结束结束之前会出现一个错误，导致程序无法正常结束。那是因为这个默认拷贝构造在处理int指针时，只是单纯的将b的指针p指向了a的指针p指向的相同内存空间。也就是说这两个指针指向了同一个内存空间，当两个Test对象析构的时候就会释放两次这个内存，导致报错。</p><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>针对上述出现的错误，所以需要自己实现一份深拷贝构造函数。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> v):<span class="hljs-built_in">key</span>(k),<span class="hljs-built_in">value</span>(v)<br>    &#123;<br>        p=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">100</span>);<br>    &#125;<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-type">const</span> Test&amp; val)<br>    &#123;<br>        key=val.key;<br>        value=val.value;<br>        p=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">100</span>);<br>        *p=*(val.p);<br>    &#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Test</span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span>(p)<br>            <span class="hljs-keyword">delete</span> p;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>       std::cout&lt;&lt;key&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;value&lt;&lt;std::endl;<br><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-type">int</span> *p;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Test <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">25</span>)</span></span>;<br>    a.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-function">Test <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>    b.<span class="hljs-built_in">show</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/cpp%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%5C1.png" alt="cpp的深拷贝和浅拷贝\1"></p><p>在上述的拷贝构造的构造中，为对象b的指针p重新分配了新的内存空间，然后把对象a的指针p的指向的内容赋值给b.p指向的内存空间。这样就实现了每个对象的指针指向独立的内存空间，并且内容一样。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="1、拷贝构造的参数传递"><a href="#1、拷贝构造的参数传递" class="headerlink" title="1、拷贝构造的参数传递"></a>1、拷贝构造的参数传递</h2><p>上述代码采用了常量引用方式（const &amp;）。为什么不采用传值要采用传引用？第一，传值会需要拷贝a对象的副本，导致额外的开销，影响效率。第二，也是最严重的问题，会导致递归无限调用拷贝构造函数。const是为了在传引用的时候，参数既可以使用左值（变量），又可以使用右值（常量），而且可以保证参数不被修改。当没有const的时候，参数只能使用左值，无法使用右值。</p><h2 id="2、避免默认的拷贝构造函数"><a href="#2、避免默认的拷贝构造函数" class="headerlink" title="2、避免默认的拷贝构造函数"></a>2、避免默认的拷贝构造函数</h2><p>在类的定义中定义一个私有的拷贝构造函数如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">Test</span>(<span class="hljs-type">const</span> Test&amp;);<br></code></pre></td></tr></table></figure><p>这样在不要拷贝的环境中，如果用户错误的调用了拷贝构造，会触发编译器错误。</p><h2 id="3、析构函数"><a href="#3、析构函数" class="headerlink" title="3、析构函数"></a>3、析构函数</h2><p>析构函数前面加一个virtual使其变为一个虚函数。这是利用了cpp的多态。假设Test是一个基类，后续的继承类又定义了新的指针成员变量，这个时候继承类就需要自己重写析构函数。如果没有Test类的析构函数没有定义成虚函数，那么在继承类释放的时候，不会调用自己的析构函数，而是调用父类的析构函数，这样就会导致内存泄漏。</p>]]></content>
    
    
    <categories>
      
      <category>cpp基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>深拷贝和浅拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSG环境配置</title>
    <link href="/2019/06/04/OSG%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/06/04/OSG%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近开始学习osg，免不了涉及到编译osg的开源库，如果不想编译的话可以直接去官网下载编译好的msvc版本。但是osgearth暂时没有找到直接编译好的。对于Windows编译开源库最近的心得是不要使用mingw进行编译，很多开源库都无法编译过去，还是使用msvc编译。编译开源库，发现一款微软的神器vcpkg，相当于是windows上的包管理器，他会自动下载源码然后进行编译，默认使用vs2017，没有的话使用vs2015。目前只支持这两款。</p><h1 id="VCPKG"><a href="#VCPKG" class="headerlink" title="VCPKG"></a>VCPKG</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://github.com/microsoft/vcpkg">github地址</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1、先将项目克隆到本地，然后打开vs的命令行工具运行项目下的脚本bootstrap-vcpkg.bat,结束之后会在项目底下生成一个vcpkg.exe。将当前exe目录添加到环境变量中方便使用。</p><p>2、搜索包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">vcpkg search lib<br></code></pre></td></tr></table></figure><p>lib是你需要搜索的包名，我们搜索一下osg，结果如下：</p><p><img src="/" alt=".."></p><p>3、安装包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">vcpkg install lib<br>vcpkg install lib:x64<span class="hljs-literal">-windows</span><br></code></pre></td></tr></table></figure><p>默认不指定编译器位数的话编译32位，想要编译64位需要后面指定:x64-windows。这里我们编译64位osg，整个时间大概2个小时。</p><p>4、下载缓慢解决方法</p><p>使用vcpkg自动下载源码的时候经常会比较缓慢，所以我们可以把自动下载的地址复制出来，然后自己去网页上下载，下载完之后拷贝到downloads目录，这是他的文件下载目录。然后在自动下载的时候进入downloads&#x2F;temp文件夹看一下，他下载的文件名称。有可能下载的同一个源码，但是文件名称不一致，导致vcpkg识别不了，需要将你下载的文件名称改成和temp里面的缓存文件名称一致，然后重新安装，这个时候他就会启用你下载的版本，不会自动下载了。</p><h1 id="OSG环境配置"><a href="#OSG环境配置" class="headerlink" title="OSG环境配置"></a>OSG环境配置</h1><p>vcpkg编译的结果是debug和release分开了，后缀使用d区分。但是实际使用的话很麻烦，所以我将两个版本合并。新建一个osg目录，将include目录拷贝进去，然后将两个版本的lib和bin目录拷贝进去，然后把tools&#x2F;osg目录里面的东西直接剪切到bin目录里面，然后在osg根目录新建一个data目录，用来存放数据，数据直接从官网下载即可，<a href="http://www.openscenegraph.org/index.php/download-section/data">datal链接</a>。将数据解压后拷贝到data目录即可。然后添加环境变量，在用户环境变量里面将新的osg&#x2F;bin目录添加到path，然后新建一个环境变量OSG_FILE_PATH,值是osg&#x2F;data目录,这样后续代码里面直接加载测试文件的时候可以不用带路径。</p><blockquote><p>这个tools&#x2F;osg目录里面存在许多编译好的工具，后续会使用到，然后目录下有个osgPlugins-3.6.3,这里面有osgDB的插件，不把它放在bin目录里面会导致后续使用osgDB库时，无法读写osg或者其他格式文件。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OSG，OsgEarth</tag>
      
      <tag>vcpkg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>char数组的数据显示</title>
    <link href="/2019/05/24/char%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA/"/>
    <url>/2019/05/24/char%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>今天在做一个读取mp3文件的metadata信息的时候遇到两个很简单的问题，由于长时间没有使用标准c++，导致花了一点时间才解决，看来c++基础基本荒废了啊。</p><h3 id="struct-h"><a href="#struct-h" class="headerlink" title="struct.h"></a>struct.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MetaData</span>&#123;<br>    <span class="hljs-type">char</span> Header[<span class="hljs-number">3</span>]; <span class="hljs-comment">/*标签头必须是&quot;TAG&quot;否则认为没有标签*/</span><br>    <span class="hljs-type">char</span> Title[<span class="hljs-number">30</span>]; <span class="hljs-comment">/*标题*/</span><br>    <span class="hljs-type">char</span> Artist[<span class="hljs-number">30</span>]; <span class="hljs-comment">/*作者*/</span><br>    <span class="hljs-type">char</span> Album[<span class="hljs-number">30</span>]; <span class="hljs-comment">/*专集*/</span><br>    <span class="hljs-type">char</span> Year[<span class="hljs-number">4</span>]; <span class="hljs-comment">/*出品年代*/</span><br>    <span class="hljs-type">char</span> Comment[<span class="hljs-number">28</span>]; <span class="hljs-comment">/*备注*/</span><br>    <span class="hljs-type">char</span> Reserver;    <span class="hljs-comment">/*保留*/</span><br>    <span class="hljs-type">char</span> Channel;     <span class="hljs-comment">/*音轨*/</span><br>    <span class="hljs-type">char</span> Genre; <span class="hljs-comment">/*类型*/</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><blockquote><p>这是mp3的ID3V1的标签格式，128数据在文件的最末尾，起始是三个字节的“TAG”</p></blockquote><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(filename,ios::in)</span></span>;<br><span class="hljs-keyword">if</span>(!in.<span class="hljs-built_in">is_open</span>())&#123;<br>    <span class="hljs-keyword">return</span>;    <br>&#125;<br>in.<span class="hljs-built_in">seekg</span>(<span class="hljs-number">128</span>,ios::end);<span class="hljs-comment">//wrong ,正确写法:in.seekg(-128,ios::end);</span><br><span class="hljs-type">char</span> data[<span class="hljs-number">128</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>in.<span class="hljs-built_in">read</span>(data,<span class="hljs-number">128</span>);<br>MetaData tagData;<br><span class="hljs-built_in">memset</span>(&amp;tagData,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(MetaData));<br><span class="hljs-built_in">memcpy</span>(&amp;tagData,data,<span class="hljs-built_in">sizeof</span>(MetaData));<br>std::cout&lt;&lt;tagData.Header&lt;&lt;endl; <span class="hljs-comment">//错误，正确 string header(tagData.Header,3);cout&lt;&lt;header&lt;&lt;endl;</span><br>in.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><p>错误1，ifstream::seekg的作用是移动当前读取文件指针的位置，第一个参数是offset偏移（向后），我已经使用ios::end，也就是说参考位置到了文件末尾，我又向后移动了128,这样读取的信息肯定是空的，应该此处是-128，即向前偏移128位，这样才能获取到最后的128字节信息。</p><p>错误2，我直接cout&lt;&lt;tagData.Header,以为只会输出“TAG”这三个字符，但是实际结果是后面还输出了Title的信息。因为Header此时是一个字符串指针，指向的是第一个字节，而不是我以为的字符串（string)，输出的时候结果是输出指针后面的所有字节，直到遇到第一个字符串结束符（\0）。所以正确的用法是将Header转化为std::string，然后显示。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>char数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDF5_CPP使用教程</title>
    <link href="/2019/05/21/HDF5-CPP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2019/05/21/HDF5-CPP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于工作原因接触到HDF5这种文件格式，这是一个无关平台的文件格式，提供多个语言的支持，有c，java，c++等。本人从事Qt，所以主要研究c++的库的使用方法。这个文件结构有点类似于一个完整的文件目录：顶层是根目录（”&#x2F;“）,然后可以添加新的目录，HDF5称之为Group，目录里面可以继续添加子目录，或者文件（DataSet）和属性（Attribute），这两种都可以通过数据空间（DataSpace）存储数据，数据类型可以是整形，浮点型，字符等。通过以上介绍大概就能知道这种文件的可扩展性很强。库文件可以从官网上直接下载对应的版本，但是只要vs的vc++编译的版本，如果使用mingw编译器需要编译源码，但是我尝试了一下，bug太多，最后放弃了，也没有必要浪费时间在库的编译上。从官网上下载的安装包安装之后，根目录下include目录是头文件，lib目录是静态链接库目录，其中hdf5.lib是c的，hdf5_cpp.lib是c++的库。</p><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p>根据工作需要，我使用HDF5文件创建一个树形结构，然后显示到界面上，然后做一些简单的交互。</p><h2 id="Pro文件配置"><a href="#Pro文件配置" class="headerlink" title="Pro文件配置"></a>Pro文件配置</h2><p><img src="/HDF5-CPP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Cpro.png" alt="HDF5-CPP使用教程\pro"></p><p>H5_BUILD_AS_DYNAMIC_LIB是HDF5的一个预编译宏，不添加这个使用HDF5库会提示未定义的方法等错误。这个库在debug模式下也是经常崩溃，应该是这个库是release模式，所以在pro文件里面只配置了release模式。链接库我使用了c++的和c的，这是因为在后续的实践中发现，c的库函数有很多没有移植到c++中，只能采取c的函数进行替代。</p><h2 id="创建HDF5文件"><a href="#创建HDF5文件" class="headerlink" title="创建HDF5文件"></a>创建HDF5文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> RANK = <span class="hljs-number">2</span>; <span class="hljs-comment">//定义数组的维度</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//准备要存储的数据</span><br><span class="hljs-type">char</span> *data = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[M*N];<br><span class="hljs-type">char</span> *tmp=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i&lt;M; ++i)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =<span class="hljs-number">0</span>; j&lt;N; ++j)&#123;<br>        tmp = data + i*N +j;<br>        *tmp = <span class="hljs-number">80</span>+i+j;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">try</span><br>&#123;<br>    <span class="hljs-comment">// Turn off the auto-printing when failure occurs so that we can</span><br>    <span class="hljs-comment">// handle the errors appropriately</span><br><br>    Exception::<span class="hljs-built_in">dontPrint</span>();<br>    <span class="hljs-comment">//创建文件</span><br>    <span class="hljs-function">H5File <span class="hljs-title">file</span><span class="hljs-params">(filename, H5F_ACC_TRUNC)</span></span>;<br>    <span class="hljs-comment">//创建第一层 group section</span><br>    <span class="hljs-function">Group <span class="hljs-title">group_Section0</span><span class="hljs-params">(file.createGroup(<span class="hljs-string">&quot;Section0&quot;</span>))</span></span>;<br>    group_Section0.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;区域1&quot;</span>).<span class="hljs-built_in">toStdString</span>()); <span class="hljs-comment">//用来作为显示的名称</span><br><br>    <span class="hljs-function">Group <span class="hljs-title">group_Section1</span><span class="hljs-params">(file.createGroup(<span class="hljs-string">&quot;Section1&quot;</span>))</span></span>;<br>    group_Section1.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;区域2&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-comment">//创建第二层group run</span><br>    <span class="hljs-function">Group <span class="hljs-title">group_Run0</span><span class="hljs-params">(group_Section0.createGroup(<span class="hljs-string">&quot;Run0&quot;</span>))</span></span>;<br>    group_Run0.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;测试1&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Run1</span><span class="hljs-params">(group_Section0.createGroup(<span class="hljs-string">&quot;Run1&quot;</span>))</span></span>;<br>    group_Run1.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;测试2&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Run2</span><span class="hljs-params">(group_Section1.createGroup(<span class="hljs-string">&quot;Run0&quot;</span>))</span></span>;<br>    group_Run2.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;测试3&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Run3</span><span class="hljs-params">(group_Section1.createGroup(<span class="hljs-string">&quot;Run1&quot;</span>))</span></span>;<br>    group_Run3.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;测试4&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-comment">//创建第三层group timedata和spectrum</span><br>    <span class="hljs-function">Group <span class="hljs-title">group_Time0</span><span class="hljs-params">(group_Run0.createGroup(<span class="hljs-string">&quot;TimeData&quot;</span>))</span></span>;<br>    group_Time0.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;实时数据&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Spec0</span><span class="hljs-params">(group_Run0.createGroup(<span class="hljs-string">&quot;Spectrum&quot;</span>))</span></span>;<br>    group_Spec0.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;处理数据&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Time1</span><span class="hljs-params">(group_Run1.createGroup(<span class="hljs-string">&quot;TimeData&quot;</span>))</span></span>;<br>    group_Time1.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;实时数据&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Spec1</span><span class="hljs-params">(group_Run1.createGroup(<span class="hljs-string">&quot;Spectrum&quot;</span>))</span></span>;<br>    group_Spec1.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;处理数据&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Time2</span><span class="hljs-params">(group_Run2.createGroup(<span class="hljs-string">&quot;TimeData&quot;</span>))</span></span>;<br>    group_Time2.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;实时数据&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Spec2</span><span class="hljs-params">(group_Run2.createGroup(<span class="hljs-string">&quot;Spectrum&quot;</span>))</span></span>;<br>    group_Spec2.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;处理数据&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Time3</span><span class="hljs-params">(group_Run3.createGroup(<span class="hljs-string">&quot;TimeData&quot;</span>))</span></span>;<br>    group_Time3.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;实时数据&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    <span class="hljs-function">Group <span class="hljs-title">group_Spec3</span><span class="hljs-params">(group_Run3.createGroup(<span class="hljs-string">&quot;Spectrum&quot;</span>))</span></span>;<br>    group_Spec3.<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;处理数据&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br><br>    <span class="hljs-comment">//创建数据空间</span><br>    <span class="hljs-type">hsize_t</span> dims[RANK];               <span class="hljs-comment">// dataset dimensions</span><br>    dims[<span class="hljs-number">0</span>] = M;<br>    dims[<span class="hljs-number">1</span>] = N;<br>    DataSpace *dataspace = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataSpace</span> (RANK, dims);<br><br>    <span class="hljs-comment">//创建数据集，通道数据</span><br>    DataSet *dataset_Time = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataSet</span> (group_Time0.<span class="hljs-built_in">createDataSet</span>(<span class="hljs-string">&quot;Channel0&quot;</span>, PredType::NATIVE_CHAR, *dataspace));<br>    dataset_Time-&gt;<span class="hljs-built_in">setComment</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;通道1&quot;</span>).<span class="hljs-built_in">toStdString</span>());<br>    dataset_Time-&gt;<span class="hljs-built_in">write</span>(data, PredType::NATIVE_CHAR);<br><br>    <span class="hljs-comment">// 创建数据集属性空间.</span><br>    <span class="hljs-type">int</span> attr_data[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">100</span>, <span class="hljs-number">200</span>&#125;;<br>    <span class="hljs-type">hsize_t</span> attr_dims[<span class="hljs-number">1</span>] = &#123; <span class="hljs-number">2</span> &#125;;<br>    DataSpace attr_dataspace = <span class="hljs-built_in">DataSpace</span> (<span class="hljs-number">1</span>,attr_dims );<br><br>    <span class="hljs-comment">// 创建数据集的属性.</span><br>    Attribute attribute = group_Time0.<span class="hljs-built_in">createAttribute</span>( <span class="hljs-string">&quot;ATTR_NAME&quot;</span>, PredType::STD_I32BE, attr_dataspace);<br>    <span class="hljs-comment">// 写属性.</span><br>    attribute.<span class="hljs-built_in">write</span>( PredType::NATIVE_INT, attr_data);<br><br>    <span class="hljs-comment">// 关闭数据空间、数据集、group对象.</span><br>    <span class="hljs-keyword">delete</span> dataspace;<br>    <span class="hljs-keyword">delete</span> dataset_Time;<br>    <span class="hljs-keyword">delete</span> dataset_Spec;<br>    file.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-comment">// catch failure caused by the H5File operations</span><br><span class="hljs-built_in">catch</span>(FileIException error)<br>&#123;<br>    cout&lt;&lt;error.<span class="hljs-built_in">getDetailMsg</span>();<br><br>&#125;<br><span class="hljs-comment">// catch failure caused by the DataSpace operations</span><br><span class="hljs-built_in">catch</span>(DataSpaceIException error)<br>&#123;<br>    cout&lt;&lt;error.<span class="hljs-built_in">getDetailMsg</span>();<br><br>&#125;<br><span class="hljs-comment">// catch failure caused by the Group operations</span><br><span class="hljs-built_in">catch</span>(GroupIException error)<br>&#123;<br>    cout&lt;&lt;error.<span class="hljs-built_in">getDetailMsg</span>();<br><br>&#125;<br><span class="hljs-comment">// catch failure caused by the DataSet operations</span><br><span class="hljs-built_in">catch</span>(DataSetIException error)<br>&#123;<br>    cout&lt;&lt;error.<span class="hljs-built_in">getDetailMsg</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：<img src="/HDF5-CPP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Cfirst.png" alt="HDF5-CPP使用教程\first"></p><blockquote><p>这是安装包里面的bin目录的h5dump程序，可以查看h5文件</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> H5F_ACC_RDWR    (H5CHECK H5OPEN 0x0001u)    <span class="hljs-comment">/*open for read and write    */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H5F_ACC_TRUNC    (H5CHECK H5OPEN 0x0002u)    <span class="hljs-comment">/*overwrite existing files   */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H5F_ACC_EXCL    (H5CHECK H5OPEN 0x0004u)    <span class="hljs-comment">/*fail if file already exists*/</span></span><br><span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> 0x0008u was H5F_ACC_DEBUG, now deprecated */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H5F_ACC_CREAT    (H5CHECK H5OPEN 0x0010u)    <span class="hljs-comment">/*create non-existing files  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H5F_ACC_SWMR_WRITE    (H5CHECK 0x0020u) <span class="hljs-comment">/*indicate that this file is</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * open for writing in a</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * single-writer/multi-reader (SWMR)</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * scenario.  Note that the</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * process(es) opening the file</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * for reading must open the file</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * with RDONLY access, and use</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * the special &quot;SWMR_READ&quot; access</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * flag. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H5F_ACC_SWMR_READ    (H5CHECK 0x0040u) <span class="hljs-comment">/*indicate that this file is</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * open for reading in a</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * single-writer/multi-reader (SWMR)</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * scenario.  Note that the</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * process(es) opening the file</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * for SWMR reading must also</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * open the file with the RDONLY</span></span><br><span class="hljs-comment"><span class="hljs-meta">                                                 * flag.  */</span></span><br><br><span class="hljs-comment">/* Value passed to H5Pset_elink_acc_flags to cause flags to be taken from the</span><br><span class="hljs-comment"> * parent file. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H5F_ACC_DEFAULT (H5CHECK H5OPEN 0xffffu)    <span class="hljs-comment">/*ignore setting on lapl     */</span></span><br></code></pre></td></tr></table></figure><p>创建文件之后，文件默认会生成一个根目录，类型是Group，路径是“&#x2F;”。文件类可以创建Group，DataSet，Attribute，还可以设置comment用来存储一些简单信息。Group，DataSet也可以继续创建上述三种对象，而Attitude只能创建DataSet和Group。file.createGroup(“Section0”)这是使用的相对路径，相当于在根目录下创建Section0目录，所以其绝对路径为&#x2F;Section0，后续访问的时候也可以通过父目录使用相对目录访问它，也可以在任意目录使用绝对路径访问它，如果在非父目录使用相对路径访问，会引发异常。访问方法是openGroup,其他类型的对象创建和访问的规则也是如此。DataSpace是在创建DataSet和Attribute的时候事先创建的一个数据空间，用来告诉HDF5在存储数据时分配多大的内存空间。它有两个参数，第一个RANK代表维度，第二个参数代表每一个维度的长度。上述例子中就是创建一个二维的三行四列的空间。在创建DataSet和Attribute时还需要指定存储的数据类型，在写入数据（write）的时候也要指定一致的数据类型。数据类型的定义在头文件中有定义，请自行查看。file.close()就是关闭文件句柄，将缓存写入到硬盘中。如果此处不关闭文件句柄，可以调用flush将缓存写入到硬盘。</p><h2 id="读取DataSet数据"><a href="#读取DataSet数据" class="headerlink" title="读取DataSet数据"></a>读取DataSet数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(!m_h5FileHandle.<span class="hljs-built_in">exist</span>(objname))  <span class="hljs-comment">//判断是否存在</span><br>    <span class="hljs-keyword">return</span>;<br>DataSet channelDataSet=m_h5FileHandle.<span class="hljs-built_in">openDataSet</span>(objName);<span class="hljs-comment">//打开数据集</span><br>DataType datatype= channelDataSet.<span class="hljs-built_in">getDataType</span>();<span class="hljs-comment">//获取数据类型</span><br><br>DataSpace dataSpace=  channelDataSet.<span class="hljs-built_in">getSpace</span>();<span class="hljs-comment">//获取数据空间</span><br><br><span class="hljs-type">int</span> rank=dataSpace.<span class="hljs-built_in">getSimpleExtentNdims</span>();<span class="hljs-comment">//获取维度</span><br><br><span class="hljs-type">hsize_t</span> *dims;<br><br>dataSpace.<span class="hljs-built_in">getSimpleExtentDims</span>(dims);<span class="hljs-comment">//获取每个维度对应的长度</span><br><br>cout&lt;&lt;*dims&lt;&lt;<span class="hljs-string">&quot;   &quot;</span>&lt;&lt;*(dims+<span class="hljs-number">1</span>)&lt;&lt;endl;<span class="hljs-comment">//假设此处rank=2，那么*dim就是行数，*（dim+1）就是列数</span><br><br><span class="hljs-type">hssize_t</span> sum= dataSpace.<span class="hljs-built_in">getSimpleExtentNpoints</span>();<span class="hljs-comment">//获取数据总大小 sum=（*dim）x *（dim+1）</span><br><br><span class="hljs-keyword">if</span>(datatype==PredType::NATIVE_CHAR)&#123;<br><br>     QByteArray dataBuffer;<br><br>     dataBuffer.<span class="hljs-built_in">resize</span>(sum);   <span class="hljs-comment">//创建对应大小的缓存空间</span><br><br>     <span class="hljs-built_in">memset</span>(dataBuffer.<span class="hljs-built_in">data</span>(),<span class="hljs-number">0</span>,sum);<br><br>     channelDataSet.<span class="hljs-built_in">read</span>(dataBuffer.<span class="hljs-built_in">data</span>(),datatype,dataSpace);<br><br>   &#125;<br>channelDataSet.<span class="hljs-built_in">close</span>();<span class="hljs-comment">//关闭数据集</span><br></code></pre></td></tr></table></figure><p>此处是通过绝对路径来访问，访问之前使用exist来判断一下是否存在这个对象，如果访问不存在的对象，也会抛出异常。读取数据集的数据，首先需要获取数据的维度，以及每个维度对应的长度，然后动态创建数组，此处我为了简单，直接将数据全部存入到一个一维字符串数组里面（QByteArray），如果你获取了维度和维度对应的长度也可以根据这个来分割这个一维字符串数组。此处需要注意的是不管打开了Group还是其他对象，使用完了之后一定要close关闭，虽然局部变量释放的时候会自动关闭。</p><h2 id="读写DataSet的子集"><a href="#读写DataSet的子集" class="headerlink" title="读写DataSet的子集"></a>读写DataSet的子集</h2><p>有时候可能需要向数据集的局部写入数据，或者读取数据集的部分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Specify size and shape of subset to write.</span><br><br><span class="hljs-type">hsize_t</span> offset[<span class="hljs-number">2</span>], count[<span class="hljs-number">2</span>], stride[<span class="hljs-number">2</span>], block[<span class="hljs-number">2</span>];<br><span class="hljs-type">hsize_t</span> dimsm[<span class="hljs-number">2</span>];<br><br><span class="hljs-type">int</span> RANK=<span class="hljs-number">2</span>;         <span class="hljs-comment">//子集维度</span><br><span class="hljs-type">int</span> DIM0_SUB=<span class="hljs-number">3</span>;     <span class="hljs-comment">//子集维度1长度</span><br><span class="hljs-type">int</span> DIM1_SUB=<span class="hljs-number">4</span>;     <span class="hljs-comment">//子集维度2长度</span><br>offset[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;      <span class="hljs-comment">//子集维度1偏移量</span><br>offset[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;      <span class="hljs-comment">//维度2偏移量</span><br><br>count[<span class="hljs-number">0</span>]  = DIM0_SUB;<span class="hljs-comment">//维度1长度</span><br>count[<span class="hljs-number">1</span>]  = DIM1_SUB;<span class="hljs-comment">//维度2长度</span><br><span class="hljs-comment">//维度间隙，默认为1数据之间无间隙，=2的时候,写入的子集数据之间间隔为1，以此类推。当子集的数据下标超过总的维度长度，此设置就会无效</span><br><br>stride[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;        <br>stride[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br><br><br>block[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        <span class="hljs-comment">//维度1块大小，暂时未发现这个设置的作用</span><br><br>block[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>dimsm[<span class="hljs-number">0</span>] = DIM0_SUB;<br>dimsm[<span class="hljs-number">1</span>] = DIM1_SUB;<br><span class="hljs-comment">//写入子集的数据</span><br><br><span class="hljs-type">char</span> *wdata = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[DIM0_SUB*DIM1_SUB];<br><span class="hljs-type">char</span> *tmp=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i&lt;DIM0_SUB; ++i)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =<span class="hljs-number">0</span>; j&lt;DIM1_SUB; ++j)&#123;<br>        tmp = wdata + i*DIM1_SUB +j;<br>        *tmp = <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">char</span> rdata[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><span class="hljs-function">H5File <span class="hljs-title">file</span><span class="hljs-params">(filename,H5F_ACC_RDWR)</span></span>;<br><span class="hljs-comment">//根据绝对路径打开数据集</span><br><br>DataSet dataset =file.<span class="hljs-built_in">openDataSet</span>(<span class="hljs-string">&quot;/Section0/Run0/TimeData/Channel0&quot;</span>);<br><br><span class="hljs-comment">//子集数据空间</span><br><span class="hljs-function">DataSpace <span class="hljs-title">memSpace</span><span class="hljs-params">(RANK, dimsm, <span class="hljs-literal">NULL</span>)</span></span>;<br><span class="hljs-comment">//原数据集空间</span><br>DataSpace dataSpace= dataset.<span class="hljs-built_in">getSpace</span>();<br><span class="hljs-comment">//H5S_SELECT_SET是用子集覆盖原来相同坐标的数据，还有其他选项，OR XOR AND 等选项，可以进入源码自行阅读</span><br><br><span class="hljs-comment">//设置超实验室</span><br>dataSpace.<span class="hljs-built_in">selectHyperslab</span>(H5S_SELECT_SET, count, offset, stride, block);<br><span class="hljs-comment">//写入子集</span><br><br>dataset.<span class="hljs-built_in">write</span>(wdata,PredType::NATIVE_CHAR,memSpace,dataSpace);<br><span class="hljs-comment">//读取子集</span><br><br>dataset.<span class="hljs-built_in">read</span>(rdata,PredType::NATIVE_CHAR,memSpace,dataSpace);<br>file.<span class="hljs-built_in">close</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;DIM0_SUB;i++)&#123;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;DIM1_SUB;j++)<br><br>        cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;(rdata[i][j]);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>不设置间隙stride[[0]]&#x3D;1;stride[[1]]&#x3D;1;结果如下：</p><p><img src="/HDF5-CPP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Csecond.png" alt="HDF5-CPP使用教程\second"></p><p>设置间隙stride[[0]]&#x3D;2;stride[[1]]&#x3D;2;结果如下：</p><p><img src="/HDF5-CPP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Cfourth.png" alt="HDF5-CPP使用教程\fourth"></p><p>读取出来的子集结果:</p><p><img src="/HDF5-CPP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Cthird.png" alt="HDF5-CPP使用教程\third"></p><blockquote><p>char字符’d‘转化为int就是100</p></blockquote><h2 id="写入数据时压缩处理"><a href="#写入数据时压缩处理" class="headerlink" title="写入数据时压缩处理"></a>写入数据时压缩处理</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建压缩空间</span><br><span class="hljs-type">hsize_t</span> chunk_dims[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">5</span>,<span class="hljs-number">10</span>&#125;;<br>DSetCreatPropList  *plist = <span class="hljs-keyword">new</span>  DSetCreatPropList;<br>plist-&gt;<span class="hljs-built_in">setChunk</span>(<span class="hljs-number">2</span>, chunk_dims);<br><span class="hljs-comment">//设置Deflate=6使用zlib压缩，注释掉则使用下列的szip</span><br>plist-&gt;<span class="hljs-built_in">setDeflate</span>(<span class="hljs-number">6</span>);<br><span class="hljs-comment">//        unsigned szip_options_mask = H5_SZIP_NN_OPTION_MASK;</span><br><span class="hljs-comment">//        unsigned szip_pixels_per_block = 16;</span><br><span class="hljs-comment">//        plist-&gt;setSzip(szip_options_mask, szip_pixels_per_block);</span><br><span class="hljs-comment">//创建数据集，通道数据</span><br>DataSet *dataset_Time = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataSet</span> (group_Time0.<span class="hljs-built_in">createDataSet</span>(<span class="hljs-string">&quot;Channel0&quot;</span>,       PredType::NATIVE_CHAR, *dataspace,*plist));<br></code></pre></td></tr></table></figure><blockquote><p>这个代码是替换创建HDF5文件里面创建数据集的过程，这个代码添加了压缩属性设置，支持zlib个szip两种压缩模式。读取数据集的时候和没有压缩一样即可。但是在使用过程中，发现压缩前和压缩后的文件大小并没有区别，这个问题后续再来研究。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>HDF5_CPP教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>HDF5</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt的pro配置详解</title>
    <link href="/2019/05/15/Qt%E7%9A%84pro%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <url>/2019/05/15/Qt%E7%9A%84pro%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Qt使用qmake构建工具来构建工程，作用和cmake一样，生成Makefile。Qt的pro文件则对应cmake的CMakeLists.txt。下面讲解一下pro文件各个参数的意义和用法。</p><h1 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h1><p>我们在使用第三方库的时候经常会遇到需要导入同一路径下的多个库文件，添加一个自定义变量来表示路径，可以简化pro文件。</p><p><img src="/Qt%E7%9A%84pro%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%5C1.png" alt="Qt的pro配置详解\1"></p><p>这里我们以opencv为例，OPENCV_HOME为opencv的根目录，$$quote()用来去除路径中的空格，不然无法识别。INCLUDEPATH用来指定头文件搜索目录。LIBS用来添加依赖库，-L后面跟库的路径，-l后面接库的名字（去掉前面的lib和后面的.a或.dll等后缀)。同一个路径后面添加多个库，只需要空格后面继续使用-l就行。</p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pro</tag>
      
      <tag>qmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QML编写自定义组件</title>
    <link href="/2019/05/10/QML%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
    <url>/2019/05/10/QML%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在使用qml的过程中经常会根据自己的特殊需求定制各种控件，为了方便使用和代码复用，会考虑将控件抽象出来写在一个新的qml文件中，这样就形成了一个控件。注意文件名开头大写，不然无法识别。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">QtQuick</span> <span class="hljs-number">2.12</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">QtQuick</span>.<span class="hljs-property">Controls</span> <span class="hljs-number">2.5</span><br><br><span class="hljs-title class_">Item</span> &#123;<br>   <span class="hljs-attr">id</span>:root<br>   <span class="hljs-attr">width</span>: <span class="hljs-number">200</span><br>   <span class="hljs-attr">height</span>: <span class="hljs-number">20</span><br>   property alias <span class="hljs-attr">backgroundColor</span>: searchBox.<span class="hljs-property">color</span><br>   property alias <span class="hljs-attr">radius</span>: searchBox.<span class="hljs-property">radius</span><br>   property alias <span class="hljs-attr">textColor</span>: searchText.<span class="hljs-property">color</span><br>   property alias <span class="hljs-attr">text</span>: searchText.<span class="hljs-property">text</span><br><br>   signal <span class="hljs-title function_">searched</span>()<br>   <span class="hljs-title class_">Rectangle</span>&#123;<br>       id : searchBox<br>       anchors.<span class="hljs-property">fill</span>: parent<br>       <span class="hljs-attr">radius</span>: <span class="hljs-number">10</span><br>       <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;darkGrey&quot;</span><br><br>       <span class="hljs-title class_">TextInput</span>&#123;<br>           id : searchText<br>           <span class="hljs-attr">text</span>: <span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;输入关键字&quot;</span>)<br>           <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;white&quot;</span><br>           <span class="hljs-attr">selectByMouse</span>: <span class="hljs-literal">true</span><br>           <span class="hljs-attr">width</span>: parent.<span class="hljs-property">width</span><br>           <span class="hljs-attr">height</span>: parent.<span class="hljs-property">height</span><br>           anchors.<span class="hljs-property">verticalCenter</span>: parent.<span class="hljs-property">verticalCenter</span><br>       &#125;<br><br>       <span class="hljs-title class_">Image</span> &#123;<br>           <span class="hljs-attr">id</span>: searchIcon<br>           <span class="hljs-attr">source</span>: <span class="hljs-string">&quot;qrc:/Images/search.png&quot;</span><br>           anchors.<span class="hljs-property">verticalCenter</span>: parent.<span class="hljs-property">verticalCenter</span><br>           anchors.<span class="hljs-property">right</span>: parent.<span class="hljs-property">right</span><br>           <span class="hljs-attr">width</span>: parent.<span class="hljs-property">width</span><br>           <span class="hljs-attr">height</span>: parent.<span class="hljs-property">height</span><br>           <span class="hljs-title class_">MouseArea</span>&#123;<br>               anchors.<span class="hljs-property">fill</span>: parent<br>               <span class="hljs-attr">onClicked</span>: &#123;<br>                   <span class="hljs-title function_">searched</span>();<br>               &#125;<br>           &#125;<br>       &#125;<br><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导出的控件顶层元素最好使用Item，在其他地方使用这个控件的时候，无法直接访问Item的子控件的属性，所以为了方便可以将这些需要的属性的暴露给使用者，用法property alias name : subItem.property。signal 是定义信号，开头小写，括号里面可以传递参数。使用者使用这个信号时，使用onSearched: {}。注意先添加一个on，然后首字母大写。为了代码方便管理，可能将新的qml组件放在另外一个目录,这样就无法直接使用。那么使用的时候需要导入该文件夹，用法</p><p> import “<DirectoryPath>“ [as <Qualifier>]</p><p>这个目录可以使用相对目录，例如“.&#x2F;Component”</p>]]></content>
    
    
    <categories>
      
      <category>QML学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QML</tag>
      
      <tag>自定义组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QML-ListView视图模型</title>
    <link href="/2019/05/08/QML-ListView%E8%A7%86%E5%9B%BE%E6%A8%A1%E5%9E%8B/"/>
    <url>/2019/05/08/QML-ListView%E8%A7%86%E5%9B%BE%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>这篇主要是介绍如何使用ListView的自定义高亮委托和自定义元素委托，以及section属性的分类和section的自定义委托。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">QtQuick</span> <span class="hljs-number">2.7</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">QtQuick</span>.<span class="hljs-property">Controls</span> <span class="hljs-number">2.5</span><br><br><span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-attr">id</span>:root<br>    <span class="hljs-title class_">ScrollView</span>&#123;<br>        <span class="hljs-attr">id</span>:scroll<br>        anchors.<span class="hljs-property">fill</span>: parent<br>        <span class="hljs-title class_">ScrollBar</span>.<span class="hljs-property">horizontal</span>.<span class="hljs-property">policy</span>: <span class="hljs-title class_">ScrollBar</span>.<span class="hljs-property">AlwaysOff</span><br>        <span class="hljs-title class_">ScrollBar</span>.<span class="hljs-property">vertical</span>.<span class="hljs-property">policy</span>: <span class="hljs-title class_">ScrollBar</span>.<span class="hljs-property">AlwaysOn</span><br>        <span class="hljs-title class_">ListModel</span>&#123;<br>            <span class="hljs-attr">id</span>:listModel<br>            <span class="hljs-title class_">ListElement</span>&#123;<br>                <span class="hljs-attr">section</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;推荐&quot;</span>)<br>                <span class="hljs-attr">title</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;发现音乐&quot;</span>)<br>                <span class="hljs-attr">image</span>:<span class="hljs-string">&quot;qrc:/Images/music.png&quot;</span><br>            &#125;<br>            <span class="hljs-title class_">ListElement</span>&#123;<br>                <span class="hljs-attr">section</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;推荐&quot;</span>)<br>                <span class="hljs-attr">title</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;私人FM&quot;</span>)<br>                <span class="hljs-attr">image</span>:<span class="hljs-string">&quot;qrc:/Images/FM.png&quot;</span><br>            &#125;<br>            <span class="hljs-title class_">ListElement</span>&#123;<br>                <span class="hljs-attr">section</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;推荐&quot;</span>)<br>                <span class="hljs-attr">title</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;视频&quot;</span>)<br>                <span class="hljs-attr">image</span>:<span class="hljs-string">&quot;qrc:/Images/video.png&quot;</span><br>            &#125;<br>            <span class="hljs-title class_">ListElement</span>&#123;<br>                <span class="hljs-attr">section</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;推荐&quot;</span>)<br>                <span class="hljs-attr">title</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;朋友&quot;</span>)<br>                <span class="hljs-attr">image</span>:<span class="hljs-string">&quot;qrc:/Images/friends.png&quot;</span><br>            &#125;<br>            <span class="hljs-title class_">ListElement</span>&#123;<br>                <span class="hljs-attr">section</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;我的音乐&quot;</span>)<br>                <span class="hljs-attr">title</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;本地音乐&quot;</span>)<br>                <span class="hljs-attr">image</span>:<span class="hljs-string">&quot;qrc:/Images/localmusic.png&quot;</span><br>            &#125;<br>            <span class="hljs-title class_">ListElement</span>&#123;<br>                <span class="hljs-attr">section</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;我的音乐&quot;</span>)<br>                <span class="hljs-attr">title</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;下载管理&quot;</span>)<br>                <span class="hljs-attr">image</span>:<span class="hljs-string">&quot;qrc:/Images/download.png&quot;</span><br>            &#125;<br>            <span class="hljs-title class_">ListElement</span>&#123;<br>                <span class="hljs-attr">section</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;我的音乐&quot;</span>)<br>                <span class="hljs-attr">title</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;我的音乐云盘&quot;</span>)<br>                <span class="hljs-attr">image</span>:<span class="hljs-string">&quot;qrc:/Images/cloud.png&quot;</span><br>            &#125;<br>            <span class="hljs-title class_">ListElement</span>&#123;<br>                <span class="hljs-attr">section</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;我的音乐&quot;</span>)<br>                <span class="hljs-attr">title</span>:<span class="hljs-title function_">qsTr</span>(<span class="hljs-string">&quot;我的收藏&quot;</span>)<br>                <span class="hljs-attr">image</span>:<span class="hljs-string">&quot;qrc:/Images/collection.png&quot;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-title class_">Component</span> &#123;<br>            <span class="hljs-attr">id</span>: sectionHeading<br>            <span class="hljs-title class_">Rectangle</span> &#123;<br>                <span class="hljs-attr">width</span>: listView.<span class="hljs-property">width</span><br>                <span class="hljs-attr">height</span>: childrenRect.<span class="hljs-property">height</span><br><br>                <span class="hljs-title class_">Text</span> &#123;<br>                    <span class="hljs-attr">text</span>: section<br>                    font.<span class="hljs-property">italic</span>: <span class="hljs-literal">true</span><br>                    font.<span class="hljs-property">pixelSize</span>: <span class="hljs-number">15</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-title class_">ListView</span> &#123;<br>            <span class="hljs-attr">id</span>:listView<br>            <span class="hljs-attr">clip</span>: <span class="hljs-literal">true</span><br>            <span class="hljs-attr">model</span>: listModel<br>            anchors.<span class="hljs-property">fill</span>: parent<br>            <span class="hljs-attr">focus</span>: <span class="hljs-literal">true</span><br>            <span class="hljs-attr">highlight</span>: <span class="hljs-title class_">Rectangle</span> &#123;<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;lightsteelblue&quot;</span><br>                <span class="hljs-attr">width</span>:listView.<span class="hljs-property">width</span><br>                <span class="hljs-attr">height</span>:<span class="hljs-number">30</span><br>                <span class="hljs-title class_">Behavior</span> on y&#123;<br>                    <span class="hljs-title class_">NumberAnimation</span> &#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">10000</span> &#125;<br>                &#125;<br>            &#125;<br>            highlightFollowsCurrentItem :<span class="hljs-literal">true</span><br>            <span class="hljs-attr">delegate</span>: <span class="hljs-title class_">Item</span> &#123;<br>                <span class="hljs-attr">id</span>:delegateitem<br>                <span class="hljs-attr">width</span>: listView.<span class="hljs-property">width</span><br>                <span class="hljs-attr">height</span>: <span class="hljs-number">30</span><br>                <span class="hljs-title class_">Image</span> &#123;<br>                    <span class="hljs-attr">id</span>: icon<br>                    <span class="hljs-attr">source</span>: image<br>                    anchors.<span class="hljs-property">left</span>: parent.<span class="hljs-property">left</span><br>                    anchors.<span class="hljs-property">leftMargin</span>: <span class="hljs-number">20</span><br>                    anchors.<span class="hljs-property">verticalCenter</span>: parent.<span class="hljs-property">verticalCenter</span><br>                    <span class="hljs-attr">width</span>: <span class="hljs-number">16</span><br>                    <span class="hljs-attr">height</span>: <span class="hljs-number">16</span><br><br>                &#125;<br>                <span class="hljs-title class_">Text</span> &#123;<br>                    <span class="hljs-attr">id</span>: text<br>                    <span class="hljs-attr">text</span>: title<br>                    anchors.<span class="hljs-property">left</span>: icon.<span class="hljs-property">right</span><br>                    anchors.<span class="hljs-property">leftMargin</span>: <span class="hljs-number">20</span><br>                    anchors.<span class="hljs-property">verticalCenter</span>: parent.<span class="hljs-property">verticalCenter</span><br>                &#125;<br>                <span class="hljs-title class_">MouseArea</span>&#123;<br>                    anchors.<span class="hljs-property">fill</span>: parent<br>                    <span class="hljs-attr">onClicked</span>: &#123;<br>                        listView.<span class="hljs-property">currentIndex</span> = index;<br><br>                    &#125;<br>                &#125;<br>            &#125;<br>            section.<span class="hljs-property">property</span>: <span class="hljs-string">&quot;section&quot;</span><br>            section.<span class="hljs-property">criteria</span>: <span class="hljs-title class_">ViewSection</span>.<span class="hljs-property">FullString</span><br>            section.<span class="hljs-property">delegate</span>: sectionHeading<br><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ListView的clip属性是裁剪，避免item在拖动的过程中超出边界，highlight就是高亮item，可以自定义。默认高亮item的高度和宽度会自动适应Item的高和宽。highlightFollowsCurrentItem属性是控制高亮item是否根据currentItem的切换自动改变坐标和高宽和item一致。delegate就是item的委托，这个委托的最上层不能使用Rectangle，这样会和高亮的Item冲突，导致高亮无法显示。使用Item作为最顶层的元素就没有这个问题。Item的委托在点击的过程中不会自动更新视图的currentIndex索引，需要手动处理。section作为对item的分类，property是关联modelData中分类的属性，delegate指定代理。</p>]]></content>
    
    
    <categories>
      
      <category>QML学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QML</tag>
      
      <tag>ListView</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt注意事项</title>
    <link href="/2019/05/05/Qt%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2019/05/05/Qt%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇博客记录的是写Qt时遇到的各种小坑，仅此记录一下。</p><h1 id="1、资源文件"><a href="#1、资源文件" class="headerlink" title="1、资源文件"></a>1、资源文件</h1><h2 id="1-1、路径"><a href="#1-1、路径" class="headerlink" title="1.1、路径"></a>1.1、路径</h2><p>在添加资源文件时，先添加前缀，一般使用“&#x2F;”，比较方便。然后添加文件，添加的文件的路径一定要在.qrc文件的同层目录或者下层目录，不能在qrc文件的上层目录，不然无法识别路径。并且文件的路径不能包含中文和空格。</p><h1 id="2、QML"><a href="#2、QML" class="headerlink" title="2、QML"></a>2、QML</h1><h2 id="2-1、QML添加图标"><a href="#2-1、QML添加图标" class="headerlink" title="2.1、QML添加图标"></a>2.1、QML添加图标</h2><p>在QML中使用Button时，添加icon无法直接使用icon属性，而是使用icon.source来指定图片的url。但是处理完的图片会变成黑色，不知道是否还需要设置其他属性。暂时用Image解决问题。</p><h1 id="3、QtCreator"><a href="#3、QtCreator" class="headerlink" title="3、QtCreator"></a>3、QtCreator</h1><h2 id="3-1、项目名称"><a href="#3-1、项目名称" class="headerlink" title="3.1、项目名称"></a>3.1、项目名称</h2><p>如果项目的target名称包含installer这种字符串，会导致编译出来的exe自动提升为管理员权限，导致QtCreator无法启动编译完的程序。并且运行结束后，会提示没有正确安装程序。此bug在win10上出现，win7没有。</p><h1 id="4、Qt接口"><a href="#4、Qt接口" class="headerlink" title="4、Qt接口"></a>4、Qt接口</h1><h2 id="4-1、QByteArray"><a href="#4-1、QByteArray" class="headerlink" title="4.1、QByteArray"></a>4.1、QByteArray</h2><p>先上一段bug代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QByteArray buffer=<span class="hljs-string">&quot;test&quot;</span>;<br><br>buffer.<span class="hljs-built_in">resize</span>(<span class="hljs-number">1024</span>);<br>QByteArray out = QCryptographicHash::<span class="hljs-built_in">hash</span>(buffer, QCryptographicHash::Md5);<br></code></pre></td></tr></table></figure><p>这个代码在我的开发机器上没有问题，每次加密出来的内容正确，但是在其他机器上运行出现bug，每次加密完的东西都不一样。这里我对resize这个接口没有仔细查看文档，文档已经说明resize只会分配空间，但是不会初始化，也就是说这地方是个未定义行为，导致结果不可预测。（其实c++的容器都是这样，以后需谨记）。</p><p>再上另外一段错误代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>]=<span class="hljs-string">&quot;test&quot;</span>;   <span class="hljs-comment">//要求buffer的长度固定为1024</span><br>QByteArray out = QCryptographicHash::<span class="hljs-built_in">hash</span>(buffer, QCryptographicHash::Md5);<br></code></pre></td></tr></table></figure><p>这里看似没有问题，但是结果仍然不正确，是因为hash的接口参数列表，第一个参数是const  QByteArray  &amp;data，也就是说char []传入进去会导致一个默认的类型转换，转换的结果就是丢失了原本填充的\0，只保留了test字符，导致加密之前的原始内容长度变了，所以结果也变了。所以在char[]转QByteArray的时候注意一定要明确长度。</p><h2 id="4-2、Qt-Tool"><a href="#4-2、Qt-Tool" class="headerlink" title="4.2、Qt::Tool"></a>4.2、Qt::Tool</h2><p>&amp;emsp;&amp;emsp;这是一个窗口属性，如果一个顶层窗口并且是最后一个窗口设置了这个属性，会导致关闭这个窗口时，进程并不会自动退出，也就是没有结束qApp的事件循环。并且windows的任务栏也没有该进程的图标。</p><h1 id="5、信号槽"><a href="#5、信号槽" class="headerlink" title="5、信号槽"></a>5、信号槽</h1><h2 id="5-1、槽函数命名"><a href="#5-1、槽函数命名" class="headerlink" title="5.1、槽函数命名"></a>5.1、槽函数命名</h2><p>代码遇到这个警告：QMetaObject::connectSlotsByName: No matching signal for on_text_finished(QString)，但是槽函数还是执行了。代码里面我使用了一个自定义信号 text(QString) ，然后使用了显式连接connect(this,&amp;MainWindow::text,this,&amp;MainWindow::on_text_finished);之所以会报错，这是因为当我们使用on_控件名称_信号名这种格式写槽函数时，Qt的connectSlotsByName函数会默认去查找finished这个信号，然后连接这个槽函数，但是这里没有定义这个信号。我们使用ui时，转到槽这个功能会自动生成对应格式的槽函数，然后connectSlotsByName函数就会按照对应关系隐式去连接槽和信号。比如：private slots: void on_action_triggered();在moc的时候就会自动去查找action这个控件的triggered信号，然后连接这个槽函数。所以我们自定义的槽函数不要按照Qt自动生成的格式来写。</p><h1 id="6、OpenSSL"><a href="#6、OpenSSL" class="headerlink" title="6、OpenSSL"></a>6、OpenSSL</h1><p>&amp;emsp;&amp;emsp;Qt的网络库如果需要使用https或者其他依赖OpenSSL的协议，一般直接引入相关代码会报无法找到相关接口实现的bug，因为sdk的bin目录里面默认没有加入OpenSSL的两个dll，以前都是手动编译对应的版本，特别是mingw，后来发现在Tools&#x2F;mingwxxx_xx&#x2F;opt&#x2F;bin目录以及存在该库文件，只需要拷贝到mingw的qt sdk的bin目录即可。</p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>BUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QML/C++混合编程</title>
    <link href="/2019/04/28/QML-CPP%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    <url>/2019/04/28/QML-CPP%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>QML和C++混合编程的好处在于，分离前端UI和后台业务。而且C++在处理效率上也会比QML和JS更加快，并且C++的编写后台业务也有更多的库可供选择。</p><h2 id="C-类"><a href="#C-类" class="headerlink" title="C++类"></a>C++类</h2><p>代码如下，万事先开代码:</p><p>robject.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ROBJECT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROBJECT_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QColor&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RObject</span> : <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br>    <span class="hljs-comment">//导出属性 可读，可写，通知</span><br>    <span class="hljs-built_in">Q_PROPERTY</span>(QColor color READ color WRITE setColor NOTIFY colorChanged)<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">RObject</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br>    <span class="hljs-comment">//导出方法</span><br>    <span class="hljs-function">Q_INVOKABLE <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(QString str)</span></span>;<br><br><br>    <span class="hljs-function">QColor <span class="hljs-title">color</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(QColor color)</span></span>;<br>signals:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">colorChanged</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    QColor m_color;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// ROBJECT_H</span></span><br></code></pre></td></tr></table></figure><p>robject.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;robject.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br>RObject::<span class="hljs-built_in">RObject</span>(QObject *parent) : <span class="hljs-built_in">QObject</span>(parent)<br>&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RObject::print</span><span class="hljs-params">(QString str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;str;<br>&#125;<br><br><span class="hljs-function">QColor <span class="hljs-title">RObject::color</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> m_color;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RObject::setColor</span><span class="hljs-params">(QColor color)</span></span><br><span class="hljs-function"></span>&#123;<br>   m_color=color;<br>   <span class="hljs-function">emit <span class="hljs-title">colorChanged</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RObject::add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先想要把一个c++类注册到QML中，需要这个类继承QObject，这是Qt的基石，元对象系统。QML可以访问RObject类中如下部分：</p><ol><li><p>通过Q_PROPERTY定义的属性</p></li><li><p>通过Q_INVOKABLE导出的函数（不是槽函数）</p></li><li><p>槽函数</p></li><li><p>信号</p></li></ol><h2 id="QML调用C-类"><a href="#QML调用C-类" class="headerlink" title="QML调用C++类"></a>QML调用C++类</h2><p>使用方法有两种</p><h3 id="注册类"><a href="#注册类" class="headerlink" title="注册类"></a>注册类</h3><p>将C++类注册成QML中一个Component。使用如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QQmlApplicationEngine engine;<br><span class="hljs-built_in">qmlRegisterType</span>&lt;RObject&gt;(<span class="hljs-string">&quot;Gdwy.Robject&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;RObject&quot;</span>);<br><br>engine.<span class="hljs-built_in">load</span>(<span class="hljs-built_in">QUrl</span>(<span class="hljs-built_in">QLatin1String</span>(<span class="hljs-string">&quot;qrc:/main.qml&quot;</span>)));<br></code></pre></td></tr></table></figure><p>注意注册类型必须在加载qml文件之前，不然qml里面import的包就无法识别了。qmlRegisterType是一个模板函数，&lt;&gt;里面是需要注册的类名，第一个参数是注册的包名，类似于QtQuick,这个包名的好处在于我们可以将多个类按照不同的模块导出到不同的包名里面进行管理。第二个参数是大版本号，第三个参数是小版本号，第四个参数是导出到QML里面使用的component名。对应的QML使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">RObject</span>&#123;<br><br>    <span class="hljs-attr">id</span>:robejct<br>    <span class="hljs-attr">color</span>: <span class="hljs-title class_">Qt</span>.<span class="hljs-title function_">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-title class_">MouseArea</span>&#123;<br>    anchors.<span class="hljs-property">fill</span>: parent<br>    <span class="hljs-attr">onClicked</span>: &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(robejct.<span class="hljs-property">color</span>);<br>        robejct.<span class="hljs-property">color</span>=<span class="hljs-title class_">Qt</span>.<span class="hljs-title function_">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">var</span> result=robejct.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        robejct.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;测试&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">Connections</span>&#123;<br>    <span class="hljs-attr">target</span>: robejct<br>    <span class="hljs-attr">onColorChanged</span>:&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(robejct.<span class="hljs-property">color</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处连接RObject的colorChanged()信号时，要写成onColorChanged,不然无法识别该信号。</p><h3 id="注册属性"><a href="#注册属性" class="headerlink" title="注册属性"></a>注册属性</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QQmlApplicationEngine engine;<br><br>engine.<span class="hljs-built_in">load</span>(<span class="hljs-built_in">QUrl</span>(<span class="hljs-built_in">QLatin1String</span>(<span class="hljs-string">&quot;qrc:/main.qml&quot;</span>)));<br><br><span class="hljs-keyword">if</span> (engine.<span class="hljs-built_in">rootObjects</span>().<span class="hljs-built_in">isEmpty</span>())<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br><br>        QScopedPointer&lt;RObject&gt; <span class="hljs-built_in">object</span>(<span class="hljs-keyword">new</span> RObject);<br><br>        engine.<span class="hljs-built_in">rootContext</span>()-&gt;<span class="hljs-built_in">setContextProperty</span>(<span class="hljs-string">&quot;robject&quot;</span>,object.<span class="hljs-built_in">data</span>());<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>这是将一个RObject的实例注册为main.qml根元素的一个属性。此处采用智能指针是因为qml不会帮助这个实例释放，所以采取智能指针自动释放。QMl的用法就当做普通的属性使用即可。这里使用C++仅仅只是传递了一个简单的数据类型int，转换到js之后会自动转换为js的int类型。但是如果你想传递一个数组类型，可以使用QVariantList,QVariant又是一个模板类，可以包含任何数据类型，包括map，QObject,int等等。QVariantList传递到js里面之后会转换成js的数组（array）类型，这时候遍历解析也要使用js的方法，记住此时数据已经是一个js的对象，不能再使用原来的c++的方法，要转换这个思维。</p>]]></content>
    
    
    <categories>
      
      <category>QML学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>QML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt配置多项目解决方案</title>
    <link href="/2019/04/28/Qt%E9%85%8D%E7%BD%AE%E5%A4%9A%E9%A1%B9%E7%9B%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2019/04/28/Qt%E9%85%8D%E7%BD%AE%E5%A4%9A%E9%A1%B9%E7%9B%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>Qt的pro文件类似于cmake的CmakeLists.txt，调用qmake根据不同的平台和编译器生成Makefile文件。我们的代码经常会使用主工程依赖多个库工程的结构，这个时候使用一个pro文件将多个项目关联起来会更加方便。实例如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">// my.pro<br>TEMPLATE = subdirs<br><br>subdirs = mylib \<br>    myapp<br><br>CONFIG += ordered<br></code></pre></td></tr></table></figure><p>TEMPLATE是说明这个pro文件的作用，ordered是说明按照编译顺序，先编译依赖库然后编译主程序，避免出现编译库缺失的错误。</p><p>补充一下对应的cmake的写法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pro</tag>
      
      <tag>qmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt资源文件加载大文件</title>
    <link href="/2019/04/26/Qt%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <url>/2019/04/26/Qt%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>当使用Qt的资源文件加载大文件，例如视频文件时会报错如下：</p><p>cc1plus.exe: out of memory allocating 1073745919 bytes</p><p>需要在pro文件里面配置</p><p>CONFIG +&#x3D; resources_big</p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt资源文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QML动画插值模型</title>
    <link href="/2019/04/24/QML%E5%8A%A8%E7%94%BB%E6%8F%92%E5%80%BC%E6%A8%A1%E5%9E%8B/"/>
    <url>/2019/04/24/QML%E5%8A%A8%E7%94%BB%E6%8F%92%E5%80%BC%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>QML动画的插值默认是线性的，但是有些动画效果需要特殊插值方式，如下图是各个插值类型的模型</p><p><img src="/QML%E5%8A%A8%E7%94%BB%E6%8F%92%E5%80%BC%E6%A8%A1%E5%9E%8B%5Ceasing.png" alt="QML动画插值模型\easing"></p>]]></content>
    
    
    <categories>
      
      <category>QML学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QML动画插值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QML两种启动方式及打开新窗口</title>
    <link href="/2019/04/24/QML%E4%B8%A4%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%89%93%E5%BC%80%E6%96%B0%E7%AA%97%E5%8F%A3/"/>
    <url>/2019/04/24/QML%E4%B8%A4%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%89%93%E5%BC%80%E6%96%B0%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是我的第一篇QML的笔记，记录一个最大的坑，每次修改了qml文件之后，重新清理一下，再编译，不然新的效果无法实现，误以为代码问题。qml程序启动有两种方式</p><h3 id="1、QQmlApplicationEngine"><a href="#1、QQmlApplicationEngine" class="headerlink" title="1、QQmlApplicationEngine"></a>1、QQmlApplicationEngine</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QCoreApplication::<span class="hljs-built_in">setAttribute</span>(Qt::AA_EnableHighDpiScaling);<br><br><span class="hljs-function">QGuiApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>QQmlApplicationEngine engine;<br>engine.<span class="hljs-built_in">load</span>(<span class="hljs-built_in">QUrl</span>(<span class="hljs-built_in">QLatin1String</span>(<span class="hljs-string">&quot;qrc:/main.qml&quot;</span>)));<br><span class="hljs-keyword">if</span> (engine.<span class="hljs-built_in">rootObjects</span>().<span class="hljs-built_in">isEmpty</span>())<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br></code></pre></td></tr></table></figure><p>这种启动方式是必须qml顶层元素为window或者ApplicationWindow</p><h3 id="2、QQuickView"><a href="#2、QQuickView" class="headerlink" title="2、QQuickView"></a>2、QQuickView</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QCoreApplication::<span class="hljs-built_in">setAttribute</span>(Qt::AA_EnableHighDpiScaling);<br><br><span class="hljs-function">QGuiApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>QQuickView viwer;<br>viwer.<span class="hljs-built_in">setSource</span>(<span class="hljs-built_in">QUrl</span>(<span class="hljs-string">&quot;qrc:/RListView.qml&quot;</span>));<br>viwer.<span class="hljs-built_in">setVisible</span>(<span class="hljs-literal">true</span>);<br>QQuickItem *rootItem = viwer.<span class="hljs-built_in">rootObject</span>();<br><br><span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br></code></pre></td></tr></table></figure><p>这种启动方式，qml顶层可以是Item、Rectangle等，不需要是window。</p><h1 id="启动一个新窗口"><a href="#启动一个新窗口" class="headerlink" title="启动一个新窗口"></a>启动一个新窗口</h1><p>要打开一个新的QML窗口，那么新的窗口顶层元素必须是Window或者ApplicationWindow等，代码示例如下。</p><h3 id="当前窗口main-qml"><a href="#当前窗口main-qml" class="headerlink" title="当前窗口main.qml"></a>当前窗口main.qml</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span><br>&#123;<br>    <span class="hljs-attr">id</span>: inletSettingPanel<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;主窗口&quot;</span><br>    <span class="hljs-attr">minimumWidth</span>: <span class="hljs-number">270</span><br>    <span class="hljs-attr">minimumHeight</span>: <span class="hljs-number">660</span><br><br>    <span class="hljs-title class_">Button</span><br>    &#123;<br>        <span class="hljs-attr">x</span>: parent.<span class="hljs-property">x</span><br>        <span class="hljs-attr">y</span>: parent.<span class="hljs-property">y</span><br>        <span class="hljs-attr">width</span>: <span class="hljs-number">30</span><br>        <span class="hljs-attr">height</span>: <span class="hljs-number">15</span><br>        <span class="hljs-attr">activeFocusOnTab</span>: <span class="hljs-literal">false</span><br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;打开新窗口&quot;</span><br><br>        <span class="hljs-comment">//可在此类中设置需要显示的窗口的大小等属性</span><br>        needShowWindow<br>        &#123;<br>            <span class="hljs-attr">id</span>: needShowWindowPanel<br>        &#125;<br><br>        <span class="hljs-attr">onClicked</span>:<br>        &#123;<br>            needShowWindowPanel.<span class="hljs-title function_">show</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新窗口-needShowWindow-qml"><a href="#新窗口-needShowWindow-qml" class="headerlink" title="新窗口 needShowWindow.qml"></a>新窗口 needShowWindow.qml</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Window</span> &#123;<br>    <span class="hljs-attr">id</span>: inletSettingPanel<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;新窗口&quot;</span><br>    <span class="hljs-attr">minimumWidth</span>: <span class="hljs-number">270</span>; <span class="hljs-attr">minimumHeight</span>: <span class="hljs-number">660</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当新窗口的背景设置为透明之后，拖动窗口时会在主窗口重合的地方显示重影，当设置新的窗口为FramelessWindowHint时这个问题就解决了。但是这种写法有一个弊端，那就是新的窗口的父窗口是原来的主窗口，当主窗口关闭的时候就会一起关闭新窗口。要是想创建一个独立的窗口就需要下面的方法。</p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span><br>&#123;<br> <span class="hljs-attr">id</span>: inletSettingPanel<br> <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;主窗口&quot;</span><br> <span class="hljs-attr">minimumWidth</span>: <span class="hljs-number">270</span><br> <span class="hljs-attr">minimumHeight</span>: <span class="hljs-number">660</span><br> property variant <span class="hljs-attr">newWindow</span>: needShowWindow<br> &#123;<br>     <span class="hljs-attr">id</span>: needShowWindowPanel<br> &#125;<br> <span class="hljs-title class_">Button</span><br> &#123;<br> <span class="hljs-attr">x</span>: parent.<span class="hljs-property">x</span><br> <span class="hljs-attr">y</span>: parent.<span class="hljs-property">y</span><br> <span class="hljs-attr">width</span>: <span class="hljs-number">30</span><br> <span class="hljs-attr">height</span>: <span class="hljs-number">15</span><br> <span class="hljs-attr">activeFocusOnTab</span>: <span class="hljs-literal">false</span><br> <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;打开新窗口&quot;</span><br><br> <span class="hljs-attr">onClicked</span>:<br> &#123;<br>    newWindow.<span class="hljs-title function_">show</span>();<br> &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span><br>&#123;<br> <span class="hljs-attr">id</span>: inletSettingPanel<br> <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;主窗口&quot;</span><br> <span class="hljs-attr">minimumWidth</span>: <span class="hljs-number">270</span><br> <span class="hljs-attr">minimumHeight</span>: <span class="hljs-number">660</span><br> property variant <span class="hljs-attr">newWindow</span>: <span class="hljs-title class_">Qt</span>.<span class="hljs-title function_">createComponent</span>(<span class="hljs-string">&quot;needShowWindow.qml&quot;</span>).<span class="hljs-title function_">createObject</span>()<br> <span class="hljs-title class_">Button</span><br> &#123;<br> <span class="hljs-attr">x</span>: parent.<span class="hljs-property">x</span><br> <span class="hljs-attr">y</span>: parent.<span class="hljs-property">y</span><br> <span class="hljs-attr">width</span>: <span class="hljs-number">30</span><br> <span class="hljs-attr">height</span>: <span class="hljs-number">15</span><br> <span class="hljs-attr">activeFocusOnTab</span>: <span class="hljs-literal">false</span><br> <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;打开新窗口&quot;</span><br>  <span class="hljs-attr">onClicked</span>:<br> &#123;<br> newWindow.<span class="hljs-title function_">show</span>();<br> &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这种方式创建的新窗口独立原来的窗口，当主窗口关闭时如果新窗口没有关闭，那么不会结束程序，需要继续关闭新窗口才行。</p>]]></content>
    
    
    <categories>
      
      <category>QML学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QML启动方式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt线程池执行事件循环</title>
    <link href="/2019/04/18/Qt%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <url>/2019/04/18/Qt%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<p>Qt的线程池有一个专门的类QThreadPool，内置全局单例，它可以设置最大线程数，假设线程池添加了10个任务，设置最大线程数为3，那么这10个任务就会排队等待3个线程处理。QRunnable是线程池运行的基本工作类，它是一个虚基类，需要用户继承然后重写run(),线程实际运行的就是run（）函数里面的代码。这个类不继承QObject，所以直接继承无法使用信号槽。于是采用多继承，先继承QObject,然后继承QRunnable。这个基类没有实现exec（），也就是说run（）函数结束后,这个对象也会销毁。如果需要事件循环，那么可以使用QEventloop，达到同样的效果，只要注意及时退出事件循环。这个QRunnable默认是自动销毁，就是说run（）执行完了自动销毁，不要要用户自己释放。也可以通过task-&gt;setAutoDelete(false)设置不自动销毁。下面给一个代码示例。</p><h3 id="downloadfiletask-h"><a href="#downloadfiletask-h" class="headerlink" title="downloadfiletask.h"></a>downloadfiletask.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DOWNLOADFILETASK_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DOWNLOADFILETASK_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QRunnable&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QEventLoop&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fileprocess.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadFileTask</span> : <span class="hljs-keyword">public</span> QObject,<span class="hljs-keyword">public</span> QRunnable<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">DownloadFileTask</span><span class="hljs-params">(MmsRemoteIedRuner *mr,RFileProcess::DownloadMode mode,QString remotepath,QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">DownloadFileTask</span>();<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setDownloadFileList</span><span class="hljs-params">(QStringList&amp; list)</span></span>;<br>signals:<br><br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">filesDownloadedFinished</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><br>    RFileProcess::DownloadMode m_downloadFileMode;<br>    QString m_remotePath;   <span class="hljs-comment">//文件的远程路径</span><br>    QStringList m_downloadFileList;<br><br>    QEventLoop loop;<br>    RFileProcess *m_pfilePro;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// DOWNLOADFILETASK_H</span></span><br></code></pre></td></tr></table></figure><h3 id="downloadfiletask-cpp"><a href="#downloadfiletask-cpp" class="headerlink" title="downloadfiletask.cpp"></a>downloadfiletask.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;downloadfiletask.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mmsoption.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><br>DownloadFileTask::<span class="hljs-built_in">DownloadFileTask</span>(MmsRemoteIedRuner *mr, RFileProcess::DownloadMode mode, QString remotepath, QObject *parent)<br>    : <span class="hljs-built_in">m_downloadFileMode</span>(mode),<br>      <span class="hljs-built_in">m_remotePath</span>(remotepath),<br>      <span class="hljs-built_in">QObject</span>(parent)<br>&#123;<br><br>    m_pfilePro=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RFileProcess</span>(mr,m_downloadFileMode,m_remotePath);<br><br>    <span class="hljs-built_in">connect</span>(m_pfilePro,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">filesDownloadFinished</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">filesDownloadedFinished</span>()));<br>&#125;<br>DownloadFileTask::~<span class="hljs-built_in">DownloadFileTask</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DownloadFileTask::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(m_downloadFileMode==RFileProcess::DownloadWantedModel)&#123;<br>        m_pfilePro-&gt;<span class="hljs-built_in">setDownloadFileList</span>(m_downloadFileList);<br>    &#125;<br>    m_pfilePro-&gt;<span class="hljs-built_in">listDirectory</span>();<br>    loop.<span class="hljs-built_in">exec</span>();<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DownloadFileTask::setDownloadFileList</span><span class="hljs-params">(QStringList&amp; list)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_downloadFileList=list;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DownloadFileTask::filesDownloadedFinished</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">if</span>(m_pfilePro)&#123;<br>        m_pfilePro-&gt;<span class="hljs-built_in">deleteLater</span>();<br>    &#125;<br>    loop.<span class="hljs-built_in">quit</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">QThreadPool m_pThreadPool=QThreadPool::<span class="hljs-built_in">globalInstance</span>();<br><br>m_pThreadPool-&gt;<span class="hljs-built_in">setMaxThreadCount</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;p_iedManager-&gt;<span class="hljs-built_in">count</span>();i++)&#123;       <br><br>      DownloadFileTask *task=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DownloadFileTask</span>();<br><br>      m_pThreadPool-&gt;<span class="hljs-built_in">start</span>(task);<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="BUG修复"><a href="#BUG修复" class="headerlink" title="BUG修复"></a>BUG修复</h2><p>上述代码在实际运行的时候，会提示一个警告信息：</p><p>QEventDispatcherUNIX: internal error, wakeUps.testAndSetRelease(1, 0) failed!</p><p>会导致程序崩溃。通过使用gdb调试查看堆栈信息，发现程序断在 run（）函数里面的loop.exec()这里。于是我猜想QEventLoop 被定义为成员变量，所以它和创建它的类属于同一个线程，而在run()里面则是另外一个线程。于是修改上述代码如下：</p><h3 id="downloadfiletask-h-1"><a href="#downloadfiletask-h-1" class="headerlink" title="downloadfiletask.h"></a>downloadfiletask.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DOWNLOADFILETASK_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DOWNLOADFILETASK_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QRunnable&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QEventLoop&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fileprocess.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadFileTask</span> : <span class="hljs-keyword">public</span> QObject,<span class="hljs-keyword">public</span> QRunnable<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">DownloadFileTask</span><span class="hljs-params">(MmsRemoteIedRuner *mr,RFileProcess::DownloadMode mode,QString remotepath,QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">DownloadFileTask</span>();<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setDownloadFileList</span><span class="hljs-params">(QStringList&amp; list)</span></span>;<br>signals:<br><br><span class="hljs-keyword">public</span> slots:<br><br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><br>    RFileProcess::DownloadMode m_downloadFileMode;<br>    QString m_remotePath;   <span class="hljs-comment">//文件的远程路径</span><br>    QStringList m_downloadFileList;<br>    RFileProcess *m_pfilePro;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// DOWNLOADFILETASK_H</span></span><br></code></pre></td></tr></table></figure><h3 id="downloadfiletask-cpp-1"><a href="#downloadfiletask-cpp-1" class="headerlink" title="downloadfiletask.cpp"></a>downloadfiletask.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;downloadfiletask.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mmsoption.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><br>DownloadFileTask::<span class="hljs-built_in">DownloadFileTask</span>(MmsRemoteIedRuner *mr, RFileProcess::DownloadMode mode, QString remotepath, QObject *parent)<br>    : <span class="hljs-built_in">QObject</span>(parent),<br>      <span class="hljs-built_in">m_downloadFileMode</span>(mode),<br>      <span class="hljs-built_in">m_remotePath</span>(remotepath)<br><br>&#123;<br><br>    m_pfilePro=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RFileProcess</span>(mr,m_downloadFileMode,m_remotePath);<br><br><br>&#125;<br>DownloadFileTask::~<span class="hljs-built_in">DownloadFileTask</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span>(m_pfilePro)&#123;<br>        m_pfilePro-&gt;<span class="hljs-built_in">deleteLater</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DownloadFileTask::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(m_downloadFileMode==RFileProcess::DownloadWantedModel)&#123;<br>        m_pfilePro-&gt;<span class="hljs-built_in">setDownloadFileList</span>(m_downloadFileList);<br>    &#125;<br>    QEventLoop loop;<br>    <span class="hljs-built_in">connect</span>(m_pfilePro,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">filesDownloadFinished</span>()),&amp;loop,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">quit</span>()));<br>    m_pfilePro-&gt;<span class="hljs-built_in">listDirectory</span>();<br>    loop.<span class="hljs-built_in">exec</span>();<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DownloadFileTask::setDownloadFileList</span><span class="hljs-params">(QStringList&amp; list)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_downloadFileList=list;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线程池</tag>
      
      <tag>事件循环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QSqlDatabase使用注意事项</title>
    <link href="/2019/04/17/QSqlDatabase%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2019/04/17/QSqlDatabase%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>QSqldatabase::addDatabase(“connectionname”)创建的数据库连接对象，只能在同一个线程中使用，但是一旦按照某个连接名创建了连接，那么按照QSqldatabase::database(“connectionname”)获取的连接实例可以跨线程使用，但是注意跨线程时不同线程同时使用一个连接名创建的连接，则会引起资源竞争，导致意外的错误，具体的错误为：2006：server has gone away 或者2013 lost connection，需要mutex锁保护一下，或者使用数据库连接池的概念，保证每次使用的连接没有和其他线程产生竞争。</p><h1 id="删除连接"><a href="#删除连接" class="headerlink" title="删除连接"></a>删除连接</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QSqlDatabase db = QSqlDatabase::<span class="hljs-built_in">database</span>(<span class="hljs-string">&quot;sales&quot;</span>);<br><span class="hljs-function">QSqlQuery <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-string">&quot;SELECT NAME, DOB FROM EMPLOYEES&quot;</span>, db)</span></span>;<br>QSqlDatabase::<span class="hljs-built_in">removeDatabase</span>(<span class="hljs-string">&quot;sales&quot;</span>);<br></code></pre></td></tr></table></figure><p>上述代码在运行时会报警告：QSqlDatabasePrivate::removeDatabase: connection ‘sales’ is still in use, all queries will cease to work。这个警告会导致内存泄漏，意味着这个db并没有被释放。上述代码在同一个函数中，之所以会出现这个警告，是因为在调用remove的时候db这个对象还没有销毁，db是QSqlDatabase创建的数据库全局实例的一个引用，remove就导致销毁全局实例的时候，它还有一个引用没有销毁。</p><h2 id="正确写法"><a href="#正确写法" class="headerlink" title="正确写法"></a>正确写法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>   QSqlDatabase db = QSqlDatabase::database(<span class="hljs-string">&quot;sales&quot;</span>);<br>   QSqlQuery query(<span class="hljs-string">&quot;SELECT NAME, DOB FROM EMPLOYEES&quot;</span>, db); <br>&#125;<br>QSqlDatabase::removeDatabase(<span class="hljs-string">&quot;sales&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样写db在调用remove的时候已经销毁了。</p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QSqlDatabase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装docker</title>
    <link href="/2019/04/16/centos7%E5%AE%89%E8%A3%85docker/"/>
    <url>/2019/04/16/centos7%E5%AE%89%E8%A3%85docker/</url>
    
    <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>docker运行要求</p><p>centos 7 （64-bit）</p><p>centos 6.5（64-bit）或更高版本</p><p>内核要求高于3.10，使用如下命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>docker分为社区版（ce）和企业按(ee),安装之前先卸载旧版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum remove docker*<br></code></pre></td></tr></table></figure><h2 id="安装必要的系统工具"><a href="#安装必要的系统工具" class="headerlink" title="安装必要的系统工具"></a>安装必要的系统工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h2 id="添加软件源"><a href="#添加软件源" class="headerlink" title="添加软件源"></a>添加软件源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h2 id="更新yum缓存"><a href="#更新yum缓存" class="headerlink" title="更新yum缓存"></a>更新yum缓存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum makecache fast<br></code></pre></td></tr></table></figure><h2 id="安装docker-1"><a href="#安装docker-1" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install docker-ce<br></code></pre></td></tr></table></figure><h2 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start docker<br></code></pre></td></tr></table></figure><h2 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker version<br></code></pre></td></tr></table></figure><p>提示client和server端表示成功。</p><h1 id="安装nginx-镜像"><a href="#安装nginx-镜像" class="headerlink" title="安装nginx 镜像"></a>安装nginx 镜像</h1><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search nginx<br></code></pre></td></tr></table></figure><p><img src="/centos7%E5%AE%89%E8%A3%85docker%5Csearch.png" alt="centos7安装docker\search"></p><p>第一nginx没有组名，表示是官方的，其他带有组名</p><h2 id="拉取官方镜像"><a href="#拉取官方镜像" class="headerlink" title="拉取官方镜像"></a>拉取官方镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker pull  nginx<br></code></pre></td></tr></table></figure><h2 id="运行nginx"><a href="#运行nginx" class="headerlink" title="运行nginx"></a>运行nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -p 8080:80 -d docker.io/nginx <br></code></pre></td></tr></table></figure><h2 id="查看docker运行的容器"><a href="#查看docker运行的容器" class="headerlink" title="查看docker运行的容器"></a>查看docker运行的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p><img src="/centos7%E5%AE%89%E8%A3%85docker%5Cdocker_ps.png" alt="centos7安装docker\search"></p><p>一个docker容器相当于一个完整的Linux系统，只不过这个系统里面只存在nginx。同理可以运行多个nginx的容器，只要映射到不同的端口即可。</p><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker stop container_ID<br></code></pre></td></tr></table></figure><h2 id="修改镜像的内容"><a href="#修改镜像的内容" class="headerlink" title="修改镜像的内容"></a>修改镜像的内容</h2><p>例如我需要将我的项目发布到nginx的目录下。有如下两种方法：</p><h3 id="1、拷贝项目到容器"><a href="#1、拷贝项目到容器" class="headerlink" title="1、拷贝项目到容器"></a>1、拷贝项目到容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker <span class="hljs-built_in">cp</span> hello.html container_ID://usr/share/nginx/html<br>sudo docker <span class="hljs-built_in">exec</span> -it container_ID bash<br></code></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html是容器里nginx的默认静态网页的路径。exec表示进入容器。</p><h3 id="2、映射宿主机的目录到容器目录"><a href="#2、映射宿主机的目录到容器目录" class="headerlink" title="2、映射宿主机的目录到容器目录"></a>2、映射宿主机的目录到容器目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -p 80:80 -d -v yourdir:usr/share/nginx/html docker.io/nginx<br></code></pre></td></tr></table></figure><p>-v表示映射目录,进入容器之后退出容器命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos7</tag>
      
      <tag>docker安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2019/04/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/04/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="1、查找进程"><a href="#1、查找进程" class="headerlink" title="1、查找进程"></a>1、查找进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep nginx<br></code></pre></td></tr></table></figure><p>grep是过滤，其他命令里面的同理。</p><h3 id="2、查看网络端口占用"><a href="#2、查看网络端口占用" class="headerlink" title="2、查看网络端口占用"></a>2、查看网络端口占用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -anp | grep 80<br></code></pre></td></tr></table></figure><h3 id="3、查看进程占用cpu和内存"><a href="#3、查看进程占用cpu和内存" class="headerlink" title="3、查看进程占用cpu和内存"></a>3、查看进程占用cpu和内存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top -p 进程号<br></code></pre></td></tr></table></figure><h3 id="4、挂载u盘或共享文件夹"><a href="#4、挂载u盘或共享文件夹" class="headerlink" title="4、挂载u盘或共享文件夹"></a>4、挂载u盘或共享文件夹</h3><ul><li><p>挂载共享文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">dir</span> /home/username/SharedFloder <span class="hljs-comment">#linux上的共享文件夹</span><br>sudo <span class="hljs-built_in">chmod</span> 777 /home/username/SharedFloder <span class="hljs-comment">#给目录读写执行权限</span><br>sudo mount -t vboxsf WinFloder /home/username/SharedFloder <span class="hljs-comment">#临时挂载</span><br></code></pre></td></tr></table></figure></li><li><p>挂载u盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l <span class="hljs-comment">#查看u盘设备（假设为sdc1）</span><br><span class="hljs-built_in">mkdir</span> /mnt<br>mount /dev/sdc1 /mnt <br>umount /dev/sdc1 <span class="hljs-comment">#卸载u盘</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5、apt用法"><a href="#5、apt用法" class="headerlink" title="5、apt用法"></a>5、apt用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-cache depends package <span class="hljs-comment">#查看包的依赖</span><br>apt-cache search package <span class="hljs-comment">#搜索包</span><br>apt rdepends package <span class="hljs-comment">#查看该包被哪些包依赖</span><br>apt build-dep package <span class="hljs-comment">#安装一个包对应编译依赖环境</span><br></code></pre></td></tr></table></figure><h3 id="6、vim常用快捷键"><a href="#6、vim常用快捷键" class="headerlink" title="6、vim常用快捷键"></a>6、vim常用快捷键</h3><ol><li><p>跳转指定行数       :n</p></li><li><p>跳转文件末尾       G</p></li><li><p>搜索文件内容       :&#x2F;content </p></li><li><p>查找下一个搜索到的内容     n</p></li><li><p>查找上一个搜索内容             N</p></li><li><p>剪切行                                        dd</p></li><li><p>粘贴                                        p</p></li><li><p>复制行                                    yy</p></li><li><p>复制指定内容       v进入可视化，选中指定内容，y复制</p></li><li><p>批量添加注释       ctrl+v进入块可视化，选中需要注释行，按大写I开始插入，在首行添加注释符号#或者&#x2F;&#x2F;，然后Esc，就会自动注释所有选中行</p></li><li><p>批量取消注释        ctrl+v进入块可视化，选中需要注释行（不需要选中最后一行）的注释符号，不要选中其他内容，就是选中第一列注释符号，按d删除，按esc退出</p></li><li><p>撤销操作       u</p></li><li><p>恢复上一步被撤销的操作         ctrl+r</p></li></ol><h3 id="7、dpkg"><a href="#7、dpkg" class="headerlink" title="7、dpkg"></a>7、dpkg</h3><ol><li><p>查看包的版本信息    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l package<br></code></pre></td></tr></table></figure></li><li><p>查看包的文件            </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -L package<br></code></pre></td></tr></table></figure></li><li><p>查看文件对应的包   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -S filename<br></code></pre></td></tr></table></figure></li></ol><h3 id="8、xprop"><a href="#8、xprop" class="headerlink" title="8、xprop"></a>8、xprop</h3><ol><li><p>查看窗口进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xprop           <span class="hljs-comment">#执行完之后点击窗口就会获取窗口信息</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="9、proc"><a href="#9、proc" class="headerlink" title="9、proc"></a>9、proc</h3><ol><li><p>查看进程的命令行参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/ID/cmdline  <span class="hljs-comment">#ID是指进程id，Linux一切皆文件</span><br></code></pre></td></tr></table></figure></li><li><p>查看进程的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/ID/environ  <span class="hljs-comment">#Qt在Linux上很多bug就是因为环境变量导致的</span><br></code></pre></td></tr></table></figure></li><li><p>查看进程的内存结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/ID/maps<br></code></pre></td></tr></table></figure></li></ol><h3 id="10、GDB和SSH远程调试"><a href="#10、GDB和SSH远程调试" class="headerlink" title="10、GDB和SSH远程调试"></a>10、GDB和SSH远程调试</h3><p>代码在别人的机器上发生异常，这时候需要远程调试，首先需要连接对方机器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh user@host             <span class="hljs-comment">#不带图形界面</span><br>ssh -X user@host          <span class="hljs-comment">#可以启动带图形界面的程序</span><br></code></pre></td></tr></table></figure><p>调试代码gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb program   <span class="hljs-comment">#启动gdb</span><br>run           <span class="hljs-comment">#启动程序</span><br>bt            <span class="hljs-comment">#打印当前堆栈</span><br></code></pre></td></tr></table></figure><p>大多情况下，发布的程序都是没有调试信息的，也就是看不到具体异常在哪里发生，这时候可以安装程序对应的dbgsym包，这是程序打包时一起产生的调试信息包。</p><h3 id="11、apt包管理冲突解决"><a href="#11、apt包管理冲突解决" class="headerlink" title="11、apt包管理冲突解决"></a>11、apt包管理冲突解决</h3><p>当安装一个包发生错误时，此时该包处于一种half-install(半安装)状态，如果继续使用apt安装或者卸载其他包时，dpkg会尝试继续处理上次为安装完成的包，导致后面的操作也会失败，截图示例如下：</p><p><img src="D:\web-blog\blog\source_posts\Linux常用命令\dpkg-error.png"></p><p>上图是在卸载toshibaest2822am时，因为上次toshiba-est2822amf-cups没有安装完成所以继续安装，但是又有问题，解决办法就是去掉dpkg的包状态文件里面的关于toshiba-est2822amf-cups的整段信息，然后重新卸载toshibaest2822am即可。dpkg的包状态文件是&#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;status。</p><h3 id="12、readelf查看二进制信息"><a href="#12、readelf查看二进制信息" class="headerlink" title="12、readelf查看二进制信息"></a>12、readelf查看二进制信息</h3><p>file命名无法查询静态库的二进制信息，可以通过此命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">readelf -h *.a <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用教程</title>
    <link href="/2019/04/08/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2019/04/08/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>git仓库每个节点都是一个独立的版本管理节点，当不需要和其他节点同步时，可以在本地仓库独立开发。而当需要和其他节点同步信息时即多人协作开发，就需要一个中心仓库（Github、Gitee、Gitlab等），合并其他节点的提交，另外的节点再去中心仓库拉取自己需要的其他节点的提交，简而言之，git是一个分布式版本管理系统。</p><h2 id="2、名词解释"><a href="#2、名词解释" class="headerlink" title="2、名词解释"></a>2、名词解释</h2><ul><li><p>工作区（ Working Directory）</p><p>工作区也就是你系统的文件目录，所有修改的东西首先存在你的工作区。这时候的状态是untracked（未追踪）。</p></li><li><p>暂存区（stage&#x2F;index）</p><p>暂存区是一个添加到版本之前的缓冲区，通过git add 把工作区的修改加到暂存区，状态为Changes to be committed(要提交的变更)。如果已经添加到版本控制的文件对它进行修改也需要git add 重新将修改更新到暂存区。</p></li><li><p>版本库（commit）</p><p>每一个commit都是一个回溯点，通过git commit把暂存区的东西加到版本库。这时候HEAD指针会指向最新的commit。此时状态为nothing to commit(没有需要提交的东西，暂存区是干净的)。</p></li><li><p>分支（branch）</p><p>分支是以commit节点为基础形成的一个概念，可以把整个版本库理解为一棵树，每个commit就是一个节点，把节点串起来的就是分支，就像树枝一样。当任务进行到一个阶段，需要朝不同方向进行时，这时候就需要以某个节点为基础切换分支，就像树一样分叉。当有一天两个方向需要共同前进，这时候就可以把两个分支合并。</p></li></ul><h1 id="二-、准备工作"><a href="#二-、准备工作" class="headerlink" title="二 、准备工作"></a>二 、准备工作</h1><p>安装git客户端工具，准备一个远程托管仓库Github或公司搭建的局域网Gitlab。</p><h2 id="1、常用配置"><a href="#1、常用配置" class="headerlink" title="1、常用配置"></a>1、常用配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global user.name &quot;your name&quot;      #配置用户名和邮箱<br>git config --global user.email &quot;your email&quot;<br>git config  --global core.editor vim          #配置commit-msg的编辑器，默认编辑器个人觉得不太好用，可以改成自己习惯的编辑器<br></code></pre></td></tr></table></figure><h2 id="2、SSH"><a href="#2、SSH" class="headerlink" title="2、SSH"></a>2、SSH</h2><p>git服务器一般使用https和ssh协议，如果使用https协议，客户端在和服务器交互时，比如pull和push就需要填写用户名和密码非常麻烦，所以一般如果长期要用整个服务器的话还是使用ssh协议，把自己的SSH密钥添加到服务器，就可以不用每次输出用户名和密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">ssh-keygen -t rsa -C &quot;your.email@example.com&quot; -b 4096<br></code></pre></td></tr></table></figure><p>连续回车三次</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub <span class="hljs-comment">#如果生成过密码就不需要重新生成</span><br></code></pre></td></tr></table></figure><p>复制密钥，然后去git服务器添加到你的用户设置里面，就可以直接使用ssh认证方式。</p><p><img src="/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Cssh.png" alt="Git使用教程\ssh"></p><h1 id="三、开发流程"><a href="#三、开发流程" class="headerlink" title="三、开发流程"></a>三、开发流程</h1><h2 id="1、初始化仓库"><a href="#1、初始化仓库" class="headerlink" title="1、初始化仓库"></a>1、初始化仓库</h2><ul><li><h3 id="本地已经存在工程"><a href="#本地已经存在工程" class="headerlink" title="本地已经存在工程"></a>本地已经存在工程</h3></li></ul><p>登陆git服务器，创建远程仓库（test）。然后把本地已经存在的项目（没有建立版本库）新建一个版本仓库，初始化提交，最终推送到远程仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">cd basedir<br>git init   <br>git remote add origin git@192.168.16.100:liurui/test.git #远程仓库的ssh链接<br>git add .<br>git commit -m &quot;Initial commit&quot;<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>git push [远程仓库] [本地分支]:[远程分支]，这是push的一般用法，远程仓库就是git remote add 时添加的远程链接的别名，可以任意。这里push时省略了远程分支，表示默认推送到本地master分支关联的上游分支，如果上游仓库没有整这个分支就会自动创建一个。</p><ul><li><h3 id="本地没有原始工程创建新的仓库"><a href="#本地没有原始工程创建新的仓库" class="headerlink" title="本地没有原始工程创建新的仓库"></a>本地没有原始工程创建新的仓库</h3></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone git@192.168.16.100:liurui/test.git<br>cd test<br>touch README.md<br>git add README.md<br>git commit -m &quot;add README&quot;<br>git push -u origin master:dev  <br></code></pre></td></tr></table></figure><p>从远程直接把原始仓库下载到本地。</p><ul><li><h3 id="已经存在本地仓库"><a href="#已经存在本地仓库" class="headerlink" title="已经存在本地仓库"></a>已经存在本地仓库</h3></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">cd existing_repo<br>git remote rename origin <span class="hljs-keyword">old</span><span class="hljs-operator">-</span>origin<br>git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-variable">@192</span><span class="hljs-number">.168</span><span class="hljs-number">.16</span><span class="hljs-number">.100</span>:liurui<span class="hljs-operator">/</span>test.git<br>git push <span class="hljs-operator">-</span>u origin <span class="hljs-comment">--all</span><br>git push <span class="hljs-operator">-</span>u origin <span class="hljs-comment">--tags</span><br></code></pre></td></tr></table></figure><p>当需要将仓库的上游服务器换成新的时，可以先增加新的远程仓库，然后把本地的仓库全部推送到新建的远程。</p><h2 id="2、-日常维护"><a href="#2、-日常维护" class="headerlink" title="2、 日常维护"></a>2、 日常维护</h2><ul><li><h3 id="单人开发"><a href="#单人开发" class="headerlink" title="单人开发"></a>单人开发</h3></li></ul><p>一个人开发的话就不需要考虑合并别人的代码，但是需要考虑同时开发多个功能的问题。这时候就不能直接在master分支开发，需要根据指定commit或者分支切换新的开发分支。等该分支的任务完成之后就可以合并到远程仓库，并删除本地的开发分支（避免本地分支越来越多，忘记当前分支的合并清空）。然后开发新功能时，先从远程更新本地master分支，在从master切开发分支继续开发。</p><p>流程图如下：</p><p><img src="/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Cprocess1.png" alt=".."></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs git">git fetch origin  #当前位于master分支,更新远程仓库到本地<br>git rebase origin/master  #以rebase形式合并远程master到本地master<br>git checkout -b dev #默认从当前分支HEAD切出新分支<br>#do something<br>git add -u    #-u是指只把modified的修改加到暂存区，不会把工作区的修改加进去<br>git commit -m &quot;你的版本记录信息&quot;   # -m 用于简短描述，复杂描述不用-m<br>git fetch origin    #push之前一定要先从远程拉取最新的提交到本地分支<br>git rebase origin/master<br>git push origin master<br></code></pre></td></tr></table></figure><blockquote><p>我这里采取git fetch和git rebase的方式更新远程代码，也可以使用git pull origin –rebase的方式，pull&#x3D;fetch+merge，pull –rebase&#x3D;fetch+rebase。fetch只会把远程最新的commit记录更新到.git&#x2F;refs&#x2F;remotes&#x2F;里面，不会更新本地提交。只有merge才会合并到本地分支。</p></blockquote><p>rebase的意思是变基，也就是把自己基线设置到指定分支的HEAD,然后把自己新增的commit放到新起点的后面。下面是不同操作的示意图：</p><p>合并前：</p><p><img src="/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Corigin.png"></p><p>merge合并：</p><p><img src="/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Cmerge.png"></p><p>rebase合并：</p><p><img src="/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Crebase.png"></p><p>明显看到merge会多生成一个commit节点，分支树会更加复杂一些，优点是保留了分支自己的提交历史，合并冲突比较简单，合并完了直接重新commit就行。rebase不会生成多余的merge提交，维护起来更加简单，但是合并冲突会复杂一点，一般合并完了需要git rebase –continue。</p><ul><li><h3 id="多人开发"><a href="#多人开发" class="headerlink" title="多人开发"></a>多人开发</h3><ul><li><h4 id="非fork模式"><a href="#非fork模式" class="headerlink" title="非fork模式"></a>非fork模式</h4></li></ul></li></ul><p>多人开发，就需要注意每个人代码的合并问题，一般采取所有人维护master主干，开发的时候在各自的分支开发，然后合并到master主干分支上，提交前注意git pull 更新最新的代码，因为你的代码提交可能落后master。这种情况适用于共同维护一个远程仓库。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git fetch origin <span class="hljs-comment">#当前位于master分支,更新远程仓库到本地</span><br>git rebase origin/<span class="hljs-keyword">master</span> <span class="hljs-title">#以rebase</span>形式合并远程<span class="hljs-literal">master</span>到本地<span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> checkout dev<br><span class="hljs-comment">#do something and commit</span><br>git push origin liurui:liurui/dev<br></code></pre></td></tr></table></figure><p>说明：git rebase master 可以理解为合并master分支上进度到当前自己的分支，如果没有冲突，那么直接git push，如果存在冲突，那么根据提示去相应的文件，手动合并冲突，合并完了执行git rebase –continue。git push origin liurui:liurui&#x2F;dev 其中liurui是你的本地分支名，liurui&#x2F;dev是你的远程分支名。然后去网站上提交合并申请，然后有master合并权限的用户审核代码，他可以合并本次提交，也可以不合并。</p><ul><li><h4 id="fork模式"><a href="#fork模式" class="headerlink" title="fork模式"></a>fork模式</h4></li></ul><p>这种模式适用于fork原始仓库，更新维护自己仓库，并将自己的仓库的更新提交merge request到主干仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> xxxxxxxx <span class="hljs-comment">#克隆自己的仓库到本地</span><br>git remote add upstream xxxxxxxxx <span class="hljs-comment">#将主干仓库添加到自己git仓库中</span><br>git remote -v <span class="hljs-comment">#查看所有远程仓库地址</span><br><span class="hljs-comment">#修改代码</span><br>git diff <span class="hljs-comment">#比较工作区和暂存区之间的变化 --filename 比较指定的文件差异</span><br>git add -u <span class="hljs-comment">#-u是为了只将已经在暂存区的内容的修改加到暂存区</span><br>git diff --cached <span class="hljs-comment">#比较的是暂存区和分支最新版本</span><br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br>git fetch upstream<br>git rebase upstream/master<br><span class="hljs-comment">#如果出现冲突,先手动解决冲突</span><br>git add -u<br>git rebase --<span class="hljs-built_in">continue</span> <br><span class="hljs-comment">#如果没有冲突，那么直接push即可</span><br>git push origin master <span class="hljs-comment">#默认将本地master分支push到远程的master分支</span><br>git push origin master:dev <span class="hljs-comment">#将本地master分支push到远程dev分支</span><br><span class="hljs-comment">#最后去网站上提交合并请求</span><br></code></pre></td></tr></table></figure><h1 id="四、常用功能示例"><a href="#四、常用功能示例" class="headerlink" title="四、常用功能示例"></a>四、常用功能示例</h1><h2 id="1、删除具体某个commit"><a href="#1、删除具体某个commit" class="headerlink" title="1、删除具体某个commit"></a>1、删除具体某个commit</h2><p>假设功能开发都是在master一个分支进行，这样同时开发几个功能时只能串行提交。假设有一个merge有问题并且包含多个commit，被拒绝合并到主仓库。那么本地需要删除这个commit，然后重新提交。假设有三个commit A,B,C。需要删除B。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i commit-A-ID <span class="hljs-comment">#需要删除的前一个commit的id</span><br></code></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs textile">pick commit-B-ID message<br>pick commit-C-ID message<br></code></pre></td></tr></table></figure><p>将B对应的pick改为drop保存退出即可。</p><p>这里也可以采取拉新的分支，先将commit-C导出成patch，然后拉取一个分支到commit-A节点，然后在新的分支合并patch。代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git format-patch -1 commit_id <span class="hljs-comment">#-1是指只导出该commit的patch</span><br>git checkout -b newbranchname commit-A<br>git apply --check 0001-test.patch <span class="hljs-comment">#检测patch是否可以合并</span><br>git apply  0001-test.patch <span class="hljs-comment">#合并patch</span><br></code></pre></td></tr></table></figure><h2 id="2、版本维护"><a href="#2、版本维护" class="headerlink" title="2、版本维护"></a>2、版本维护</h2><p>在大型项目中，需要对某一个节点设置一个版本，用于发布，就可以使用git tag相关指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag <span class="hljs-comment">#显示所有tag</span><br>git show tagname <span class="hljs-comment">#显示某个tag的具体commit信息</span><br>git tag tagname <span class="hljs-comment">#给最新的commit打tag</span><br>git tag tagname commitid <span class="hljs-comment">#给指定commit打tag，比如遗漏了版本</span><br></code></pre></td></tr></table></figure><h2 id="3、从版本库中删除文件"><a href="#3、从版本库中删除文件" class="headerlink" title="3、从版本库中删除文件"></a>3、从版本库中删除文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git rm file #从版本库中删除文件并且删除本地文件<br>git rm file --cache #只从版本库中删除文件，但保留本地文件<br>git rm -r floder #从版本库中删除整个文件夹<br></code></pre></td></tr></table></figure><h2 id="4、添加忽略文件"><a href="#4、添加忽略文件" class="headerlink" title="4、添加忽略文件"></a>4、添加忽略文件</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>添加忽略文件是为了将开发中产生的一些中间文件排除在版本管理之外，方便其他人维护更新。忽略文件只能忽略尚未添加到版本管理中的文件和文件夹。</p><h3 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h3><p>在项目根目录下打开gitbash，创建文件 touch .gitignore,然后编辑文件。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li><p>空格不匹配任意文件，可作为分隔符，可用反斜杠转义</p></li><li><p>#开头的模式标识注释，可以使用反斜杠进行转义</p></li><li><p>! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义</p></li><li><p>&#x2F; 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</p></li><li><p>&#x2F; 开始的模式匹配项目跟目录</p></li><li><p>如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录</p></li><li><p>*匹配多级目录，可在开始，中间，结束</p></li><li><p>?通用匹配单个字符</p></li><li><p>[]通用匹配单个字符列表</p></li></ul><h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><ul><li><p>忽略指定文件</p><p>project.pro.user   这种方法会忽略根目录下的该文件，其他路径下的同名文件不会忽略</p></li></ul><ul><li><p>忽略特定后缀的文件</p><p>*.o</p></li><li><p>忽略文件夹及文件夹下的所有内容</p><p>build&#x2F;</p></li><li><p>忽略某一文件夹下的所有内容但是不忽略特定内容</p><p>build&#x2F;</p><p>!build&#x2F;temp&#x2F;</p></li></ul><h2 id="5、导出补丁合并补丁"><a href="#5、导出补丁合并补丁" class="headerlink" title="5、导出补丁合并补丁"></a>5、导出补丁合并补丁</h2><p>有些场景我们并不能直接提交代码到远程仓库，只能通过补丁的形式，将自己修改的代码合并到仓库当中。有两种形式diff文件和patch文件，diff没有commit信息，而patch存在commit信息，一个commit对应一个patch。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#生成补丁的两种方法</span><br>git diff commitID &gt;test.diff <br>git format-patch commitID -n <span class="hljs-comment">#n是从该commit到第n个commit</span><br><span class="hljs-comment">#导入补丁</span><br>git apply test.diff<br>git apply test.patch<br></code></pre></td></tr></table></figure><h2 id="6、合并其他分支的commit"><a href="#6、合并其他分支的commit" class="headerlink" title="6、合并其他分支的commit"></a>6、合并其他分支的commit</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git cherry-pick commitid -e //合并指定的commit,-e表示重新填写提交信息不带-e的话默认使用原始提交信息。<br>git cherry-pick master    //合并master分支最新的commit到当前分支，这里还有很多复杂的用法比如指定master分支的倒数第几个<br></code></pre></td></tr></table></figure><h2 id="7、不同情况下新建分支"><a href="#7、不同情况下新建分支" class="headerlink" title="7、不同情况下新建分支"></a>7、不同情况下新建分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b name   //从当前分支最新提交新建一个分支<br>git branch -r          //查看上游分支<br>git checkout -b name upstream/branch   //从上游指定分支创建一个本地分支并切换<br>git checkout -b name commitid          //从指定的commit创建一个新分支<br>git branch name tagname                //从指定tag号创建一个新分支，需要手动切换到对应分支上<br></code></pre></td></tr></table></figure><h2 id="8、查看代码提交信息"><a href="#8、查看代码提交信息" class="headerlink" title="8、查看代码提交信息"></a>8、查看代码提交信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git blame file   <span class="hljs-comment">#查看该文件每一行的提交信息</span><br>git blame -L 2,4 file <span class="hljs-comment">#查看文件的2-4行提交信息</span><br></code></pre></td></tr></table></figure><p>结果如下图所示：</p><p><img src="/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%5Cblame.png" alt=".."></p><p>前面是commit-id，后面是提交者，时间以及具体代码段</p><h2 id="9、查看某个commit所在分支"><a href="#9、查看某个commit所在分支" class="headerlink" title="9、查看某个commit所在分支"></a>9、查看某个commit所在分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -r --contains commitid<br></code></pre></td></tr></table></figure><p>命令会列举出本地个远程仓库里面包含这个commit的所有分支</p><h2 id="10、修改本地分支和远程分支映射关系"><a href="#10、修改本地分支和远程分支映射关系" class="headerlink" title="10、修改本地分支和远程分支映射关系"></a>10、修改本地分支和远程分支映射关系</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -vv   <span class="hljs-comment">#查看分支映射关系</span><br>git branch --set-upstream-to=upstream/master master  <span class="hljs-comment">#设置upstream/master 和本地master映射</span><br></code></pre></td></tr></table></figure><h2 id="11、查看修改"><a href="#11、查看修改" class="headerlink" title="11、查看修改"></a>11、查看修改</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git diff #查看工作区修改<br>git diff --cached #查看暂存区修改<br>git diff HEAD #查看当前最新的版本提交修改<br></code></pre></td></tr></table></figure><h2 id="12、重置代码"><a href="#12、重置代码" class="headerlink" title="12、重置代码"></a>12、重置代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset HEAD~1 --soft   #将HEAD指向上一个commit,并且当前commit的修改仍然保留在暂存区。<br>git reset HEAD~1 --hard  #将HEAD指针指向上一个commit，并且会清空commit对应的修改，暂存区和工作区都不会保留。  <br>git reset HEAD~1 --mixed   #将HEAD指针指向上一个commit，会将commit对应的修改从版本里面去掉，但是在工作区保留该修改。<br></code></pre></td></tr></table></figure><h2 id="13、gerrit使用"><a href="#13、gerrit使用" class="headerlink" title="13、gerrit使用"></a>13、gerrit使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git fetch origin <br>git rebase origin/master   <br>#push之前先更新当前分支到最新<br>git push origin HEAD:refs/for/master <br></code></pre></td></tr></table></figure><p>这里origin是指gerrit上游，如果仓库里面有多个上游需要注意。HEAD表示最前面的提交，所以如果当前存在多个未合并的提交，会把几个提交一起<br>推送到gerrit，然后会存在依赖关系，合并前面的才能继续合并后面的，所以如果同时开发多个功能最好单独切分支。refs&#x2F;for的作用表示合并前需要review，如果是refs&#x2F;heads就不用review。master表示你要推送的分支。</p>]]></content>
    
    
    <categories>
      
      <category>Git教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL创建外键</title>
    <link href="/2019/04/02/MYSQL%E5%88%9B%E5%BB%BA%E5%A4%96%E9%94%AE/"/>
    <url>/2019/04/02/MYSQL%E5%88%9B%E5%BB%BA%E5%A4%96%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>今天将sqlite的表迁移到mysql中，有一张表的存在外键。外键约束的成立条件首先就是子表（定义外键的表）的引用的父表的那一列有唯一性约束，也就是UNIQUE,当一列是主键（PRIMARY KEY ）他已经是默认的唯一性，所以可以不用考虑这个问题。另外还需要注意的问题如下：</p><ol><li><p>找不到父表中引用的列</p></li><li><p>主键和外键的字符编码不一致</p></li><li><p>外键字段与要做外键校验的字段类型不匹配 </p></li><li><p>MySQL支持外键约束，并提供与其它DB相同的功能，但表类型必须为 InnoDB，非InnoDB 存储引擎会导致报错</p></li><li><p>多个子表的外键引用同一个父表的列时，每个外键的名称不能一样</p></li></ol><p>外键的用法一般作为一种关联性校验，如下：</p><ol><li><p>父表更新时子表也更新，父表删除时如果子表有匹配的项删除失败 (ON UPDATE CASCADE ON DELETE RESTRICT)</p></li><li><p>父表更新时子表也更新，父表删除时子表匹配的项也删除（ON UPDATE CASCADE ON DELETE CASCADE）</p></li></ol><p>下面给出一个简单的例子分别创建父表和子表。</p><p>父表sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `线路表` (<br>  `ID` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `线路名` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `属性` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `统计` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`ID`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><p>子表sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `节点表` (<br>  `ID` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `线路ID` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `节点名` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `属性` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `位置` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `版本` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `设置` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `统计` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`ID`),<br>  KEY `FK` (`线路ID`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `FK` <span class="hljs-keyword">FOREIGN</span> KEY (`线路ID`) <span class="hljs-keyword">REFERENCES</span> `线路表` (`ID`) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CASCADE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MYSQL</tag>
      
      <tag>外键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译mingw64版本QGis3.4.6</title>
    <link href="/2019/03/27/%E7%BC%96%E8%AF%91mingw64%E7%89%88%E6%9C%ACQGis3-4-6/"/>
    <url>/2019/03/27/%E7%BC%96%E8%AF%91mingw64%E7%89%88%E6%9C%ACQGis3-4-6/</url>
    
    <content type="html"><![CDATA[<p>msys2环境搭建 autoconf automake libtool </p><p>make clean 和make distclean </p><p>mingw的mingw32-make 和msys&#x2F;make 避免出现处理makefile脚本出现</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QGIS</tag>
      
      <tag>MINGW</tag>
      
      <tag>MSYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QTcpClient/QTcpServer示例</title>
    <link href="/2019/03/25/QTcpClient-QTcpServer%E7%A4%BA%E4%BE%8B/"/>
    <url>/2019/03/25/QTcpClient-QTcpServer%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>前言:Qt的tcp模块基于事件驱动已经比较成熟，但是QTcpScoket的状态检测有一些bug，无法检测到非正常掉线的情况，例如网线拔掉，此时状态仍然是连接，会导致不确定的逻辑错误。所以我们采用心跳包来避免这个问题，心跳包机制：客户端定时发送给服务器，然后服务器返回消息的包，超出心跳限制则判断断开了连接。网络传输数据有时候数据可能很大，所以我们需要序列化数据，然后传输，这样减少数据的大小。只需要两端按照同样的规则发送和接收即可。</p><h1 id="数据结构体"><a href="#数据结构体" class="headerlink" title="数据结构体"></a>数据结构体</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SENDSTRUCT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SENDSTRUCT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QString&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QByteArray&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDataStream&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sendStruct</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">sendStruct</span><span class="hljs-params">(<span class="hljs-type">int</span> Type,QString Description,QByteArray ByteData=QByteArray(<span class="hljs-number">0</span>))</span></span>;<br>    <span class="hljs-type">int</span>  Type;<span class="hljs-comment">//用于区分发送的不同内容的数据，对应不同的解析方法   本例聊天 1 =文本 2=图片</span><br>    QString Description;<span class="hljs-comment">//发送内容的描述</span><br>    QByteArray ByteData;<span class="hljs-comment">//具体发送或者接受的内容，可以将所有基本类型int，char，vector，map等或者自定义的结构体通过</span><br>    <span class="hljs-comment">//QDataStream序列化到ByteData中，接收端同样的方法从QDataStream中解析出来原数据</span><br>    <span class="hljs-built_in">sendStruct</span>()&#123; Type=<span class="hljs-number">0</span>; Description=<span class="hljs-string">&quot;&quot;</span>; ByteData=<span class="hljs-built_in">QByteArray</span>(<span class="hljs-number">0</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> size=<span class="hljs-number">0</span>;<br>        size=<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)+Description.<span class="hljs-built_in">size</span>()*<span class="hljs-number">2</span>+<span class="hljs-number">4</span>+ByteData.<span class="hljs-built_in">size</span>()+<span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//序列化后QString大小为原有大小乘以2加4，QByteArry序列化后大小为原始大小加4，QString为Unicode编码每个字符占两个字节,</span><br>        <span class="hljs-comment">//QString和QByteArry序列化过程中，首先序列化了本身大小的整形数据(qint32)到序列中，然后才是具体数据。</span><br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> size=<span class="hljs-number">0</span>;<br>        size=<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)+Description.<span class="hljs-built_in">size</span>()*<span class="hljs-number">2</span>+<span class="hljs-number">4</span>+ByteData.<span class="hljs-built_in">size</span>()+<span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    sendStruct &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> sendStruct &amp;other)<br>    &#123;<br>        Type=other.Type;<br>        Description=other.Description;<br>        ByteData=<span class="hljs-built_in">QByteArray</span>(other.ByteData);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> QT_NO_DATASTREAM</span><br>    <span class="hljs-keyword">friend</span> QDataStream&amp; <span class="hljs-keyword">operator</span> &lt;&lt;(QDataStream&amp; out,<span class="hljs-type">const</span> sendStruct&amp; senstruct)<br>    &#123;<br>        out&lt;&lt;senstruct.Type<br>          &lt;&lt;senstruct.Description<br>         &lt;&lt;senstruct.ByteData;<br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> QDataStream&amp; <span class="hljs-keyword">operator</span> &gt;&gt;(QDataStream&amp; in,sendStruct&amp; senstruct)<br>    &#123;<br>        in&gt;&gt;senstruct.Type<br>                &gt;&gt;senstruct.Description<br>                &gt;&gt;senstruct.ByteData;<br>        <span class="hljs-keyword">return</span> in;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// SENDSTRUCT_H</span></span><br></code></pre></td></tr></table></figure><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="tcpserverconnection-h"><a href="#tcpserverconnection-h" class="headerlink" title="tcpserverconnection.h"></a>tcpserverconnection.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> TCPSERVERCONNECT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCPSERVERCONNECT_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtNetwork/QTcpServer&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtNetwork/QTcpSocket&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QList&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sendStruct</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpServerConnect</span> : <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">TcpServerConnect</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    QTcpServer *m_server;<br><span class="hljs-comment">//    QTcpSocket *m_tcpsocket;</span><br>    QList&lt;QTcpSocket*&gt; m_clientlist;<br>    <span class="hljs-type">bool</span> m_isGetPartData;<br>    <span class="hljs-type">int</span> m_requestDataSize;<br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleSendOutData</span><span class="hljs-params">(qintptr describe,<span class="hljs-type">const</span> sendStruct&amp;)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleGetRecieveData</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleNewConnection</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleDisconnection</span><span class="hljs-params">()</span></span>;<br>signals:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurStatusChanged</span><span class="hljs-params">(QString status)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">UpdateText</span><span class="hljs-params">(QString address,<span class="hljs-type">int</span> msgtype,QByteArray data)</span></span>;<br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// TCPSERVERCONNECT_H</span></span><br></code></pre></td></tr></table></figure><h2 id="tcpserverconnection-cpp"><a href="#tcpserverconnection-cpp" class="headerlink" title="tcpserverconnection.cpp"></a>tcpserverconnection.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tcpserverconnect.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sendstruct.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QImage&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QSize&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QBuffer&gt;</span></span><br><br>TcpServerConnect::<span class="hljs-built_in">TcpServerConnect</span>(QObject *parent) : <span class="hljs-built_in">QObject</span>(parent)<br>&#123;<br><br>    m_isGetPartData=<span class="hljs-literal">false</span>;<br>    m_requestDataSize=<span class="hljs-number">0</span>;<br>    m_server=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QTcpServer</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-built_in">connect</span>(m_server,&amp;QTcpServer::newConnection,<span class="hljs-keyword">this</span>,&amp;TcpServerConnect::handleNewConnection);<br><br>    m_server-&gt;<span class="hljs-built_in">listen</span>(QHostAddress::Any,<span class="hljs-number">6868</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServerConnect::handleSendOutData</span><span class="hljs-params">(qintptr describe,<span class="hljs-type">const</span> sendStruct &amp;data)</span></span><br><span class="hljs-function"></span>&#123;<br>    foreach (QTcpSocket *client, m_clientlist) &#123;<br>        <span class="hljs-keyword">if</span>((!client)||(client-&gt;<span class="hljs-built_in">state</span>()!=QAbstractSocket::ConnectedState)<br>                ||(client-&gt;<span class="hljs-built_in">socketDescriptor</span>()==describe))<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-function">QDataStream <span class="hljs-title">out</span><span class="hljs-params">(client)</span></span>;<br>        out&lt;&lt;data.<span class="hljs-built_in">size</span>()&lt;&lt;data;<span class="hljs-comment">//先发送了数据大小，在发送数据</span><br>        client-&gt;<span class="hljs-built_in">flush</span>();<br>        <span class="hljs-comment">/*把需要发送的数据封装在结构体里面发送*/</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServerConnect::handleGetRecieveData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QTcpSocket *m_tcpsocket=<span class="hljs-built_in">static_cast</span>&lt;QTcpSocket *&gt; (<span class="hljs-built_in">sender</span>());<br>    <span class="hljs-keyword">if</span>((!m_tcpsocket)||m_tcpsocket-&gt;<span class="hljs-built_in">state</span>()!=QAbstractSocket::ConnectedState)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(m_isGetPartData==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">bytesAvailable</span>()&lt;<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>))<span class="hljs-comment">//先要得到数据的大小</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            QDataStream <span class="hljs-built_in">in</span>(m_tcpsocket);<br>            in&gt;&gt;m_requestDataSize;<span class="hljs-comment">//数据大小写入这个变量中</span><br>            m_isGetPartData=<span class="hljs-literal">true</span>;<span class="hljs-comment">//只获得了数据的大小，数据内容还未获得</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(m_isGetPartData==<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">bytesAvailable</span>()&lt;m_requestDataSize)<span class="hljs-comment">//判断是否数据接收完整了，不完整就返回等待下一次判断</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            QDataStream <span class="hljs-built_in">in</span>(m_tcpsocket);<br>            sendStruct receiveData;<br>            in&gt;&gt;receiveData;<span class="hljs-comment">//接收到了发送端的数据</span><br>            m_requestDataSize=<span class="hljs-number">0</span>;<span class="hljs-comment">//清空大小</span><br>            m_isGetPartData=<span class="hljs-literal">false</span>;<span class="hljs-comment">//清空标志</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        数据接收成功，放置在receiveData中，可以做其他处理</span><br><span class="hljs-comment">                        doSomething(receiveData);</span><br><span class="hljs-comment">                        */</span><br><br>            <span class="hljs-keyword">if</span>(receiveData.Type==<span class="hljs-number">1</span> ||receiveData.Type==<span class="hljs-number">2</span> ||receiveData.Type==<span class="hljs-number">3</span>)<br><br><br>                <span class="hljs-function">emit <span class="hljs-title">UpdateText</span><span class="hljs-params">( m_tcpsocket-&gt;localAddress().toString(),receiveData.Type,receiveData.ByteData)</span></span>;<br>                <span class="hljs-built_in">handleSendOutData</span>(m_tcpsocket-&gt;<span class="hljs-built_in">socketDescriptor</span>(),receiveData);<br><br><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(receiveData.Type==<span class="hljs-number">100</span>)&#123;   <span class="hljs-comment">//心跳包</span><br>                sendStruct sendtextData;<br>                sendtextData.Type=<span class="hljs-number">100</span>;<br>                sendtextData.Description=<span class="hljs-string">&quot;This is a message of heartbeat from server.&quot;</span>;<br>                <span class="hljs-function">QDataStream <span class="hljs-title">stream</span><span class="hljs-params">(&amp;sendtextData.ByteData,QIODevice::WriteOnly)</span></span>;<br>                stream&lt;&lt;<span class="hljs-string">&quot;&quot;</span>;<br><br>                <span class="hljs-function">QDataStream <span class="hljs-title">out</span><span class="hljs-params">(m_tcpsocket)</span></span>;<br>                out&lt;&lt;sendtextData.<span class="hljs-built_in">size</span>()&lt;&lt;sendtextData;<span class="hljs-comment">//先发送了数据大小，在发送数据</span><br>                m_tcpsocket-&gt;<span class="hljs-built_in">flush</span>();<br><br>            &#125;<br>            <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">bytesAvailable</span>())<span class="hljs-comment">//如果缓存区还存在数据，继续执行</span><br>                <span class="hljs-built_in">handleGetRecieveData</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServerConnect::handleNewConnection</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QTcpServer *server=<span class="hljs-built_in">static_cast</span>&lt;QTcpServer*&gt;(<span class="hljs-built_in">sender</span>());<br>    QTcpSocket *m_tcpsocket=server-&gt;<span class="hljs-built_in">nextPendingConnection</span>();<br>    m_clientlist.<span class="hljs-built_in">append</span>(m_tcpsocket);<br>    <span class="hljs-function">emit <span class="hljs-title">CurStatusChanged</span><span class="hljs-params">(QString::number(m_clientlist.count()))</span></span>;<br>    <span class="hljs-keyword">if</span>(m_tcpsocket)&#123;<br><br>        <span class="hljs-built_in">connect</span>(m_tcpsocket,&amp;QTcpSocket::readyRead,<span class="hljs-keyword">this</span>,&amp;TcpServerConnect::handleGetRecieveData);<br>        <span class="hljs-built_in">connect</span>(m_tcpsocket,&amp;QTcpSocket::disconnected,<span class="hljs-keyword">this</span>,&amp;TcpServerConnect::handleDisconnection);<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServerConnect::handleDisconnection</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     QTcpSocket * socket=<span class="hljs-built_in">static_cast</span>&lt;QTcpSocket*&gt;(<span class="hljs-built_in">sender</span>());<br>     foreach (QTcpSocket *tempsocket, m_clientlist) &#123;<br>         <span class="hljs-keyword">if</span>(tempsocket-&gt;<span class="hljs-built_in">socketDescriptor</span>()==socket-&gt;<span class="hljs-built_in">socketDescriptor</span>())&#123;<br>             m_clientlist.<span class="hljs-built_in">removeOne</span>(tempsocket);<br>             <span class="hljs-keyword">break</span>;<br>         &#125;<br>     &#125;<br>     <span class="hljs-function">emit <span class="hljs-title">CurStatusChanged</span><span class="hljs-params">(QString::number(m_clientlist.count()))</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="tcpclientconnection-h"><a href="#tcpclientconnection-h" class="headerlink" title="tcpclientconnection.h"></a>tcpclientconnection.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> TCPCLIENTCONNECT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCPCLIENTCONNECT_H</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtNetwork/QTcpSocket&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sendstruct.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QImage&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDateTime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QTimer&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_HEARTBEAT_COUNT=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sendStruct</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClientConnect</span> : <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">TcpClientConnect</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    QTimer *m_pHeartBeat;  <span class="hljs-comment">//心跳定时器</span><br>    qint32 m_heartBeatCount; <span class="hljs-comment">//心跳次数</span><br><br>    QTcpSocket *m_tcpsocket;<br>    <span class="hljs-type">bool</span> m_isGetPartData;<br>    qint32 m_requestDataSize;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendText</span><span class="hljs-params">(QString msg)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendImage</span><span class="hljs-params">(<span class="hljs-type">const</span> QImage&amp; img)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendVideoImage</span><span class="hljs-params">(<span class="hljs-type">const</span> QImage&amp; img)</span></span>;<br><br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">connectToServer</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">disconnectFromServer</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleSendOutData</span><span class="hljs-params">(<span class="hljs-type">const</span> sendStruct&amp;)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleGetRecieveData</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleSocketConnected</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleSocketDisconnected</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleSendHeartbeatMsg</span><span class="hljs-params">()</span></span>;<br><br>signals:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetStrMsg</span><span class="hljs-params">(QString str)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetImageMsg</span><span class="hljs-params">(QImage image)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetVideoImageMsg</span><span class="hljs-params">(QImage image)</span></span>;<br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// TCPCLIENTCONNECT_H</span></span><br></code></pre></td></tr></table></figure><h2 id="tcpclientconnection-cpp"><a href="#tcpclientconnection-cpp" class="headerlink" title="tcpclientconnection.cpp"></a>tcpclientconnection.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tcpclientconnect.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QHostAddress&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDataStream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QSize&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QBuffer&gt;</span></span><br>TcpClientConnect::<span class="hljs-built_in">TcpClientConnect</span>(QObject *parent) : <span class="hljs-built_in">QObject</span>(parent)<br>&#123;<br>    m_tcpsocket=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QTcpSocket</span>(<span class="hljs-keyword">this</span>);<br>    m_tcpsocket-&gt;<span class="hljs-built_in">setSocketOption</span>(QTcpSocket::LowDelayOption,<span class="hljs-number">0</span>); <span class="hljs-comment">//0关闭低延时</span><br>    m_tcpsocket-&gt;<span class="hljs-built_in">setSocketOption</span>(QTcpSocket::KeepAliveOption,<span class="hljs-number">0</span>);<span class="hljs-comment">//0关闭自带的心跳机制，然后实现自己的心跳机制</span><br>    m_isGetPartData=<span class="hljs-literal">false</span>;<br>    m_requestDataSize=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">connect</span>(m_tcpsocket,&amp;QTcpSocket::readyRead,<span class="hljs-keyword">this</span>,&amp;TcpClientConnect::handleGetRecieveData);<br>    <span class="hljs-built_in">connect</span>(m_tcpsocket,&amp;QTcpSocket::connected,<span class="hljs-keyword">this</span>,&amp;TcpClientConnect::handleSocketConnected);<br>    <span class="hljs-built_in">connect</span>(m_tcpsocket,&amp;QTcpSocket::disconnected,<span class="hljs-keyword">this</span>,&amp;TcpClientConnect::handleSocketDisconnected);<br><br>    m_pHeartBeat=<span class="hljs-keyword">new</span> QTimer;<br>    <span class="hljs-built_in">connect</span>(m_pHeartBeat,&amp;QTimer::timeout,<span class="hljs-keyword">this</span>,&amp;TcpClientConnect::handleSendHeartbeatMsg);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClientConnect::handleSendOutData</span><span class="hljs-params">(<span class="hljs-type">const</span> sendStruct &amp;data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>((!m_tcpsocket)||m_tcpsocket-&gt;<span class="hljs-built_in">state</span>()!=QAbstractSocket::ConnectedState)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-function">QDataStream <span class="hljs-title">out</span><span class="hljs-params">(m_tcpsocket)</span></span>;<br>    out&lt;&lt;<span class="hljs-built_in">qint32</span>(data.<span class="hljs-built_in">size</span>())&lt;&lt;data;<span class="hljs-comment">//先发送数据大小，在发送数据本身</span><br>    m_tcpsocket-&gt;<span class="hljs-built_in">flush</span>();<br>    <span class="hljs-comment">/*把需要发送的数据封装在结构体里面发送*/</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClientConnect::handleGetRecieveData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>((!m_tcpsocket)||m_tcpsocket-&gt;<span class="hljs-built_in">state</span>()!=QAbstractSocket::ConnectedState)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(m_isGetPartData==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">bytesAvailable</span>()&lt;<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>))<span class="hljs-comment">//先接收数据的大小</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            QDataStream <span class="hljs-built_in">in</span>(m_tcpsocket);<br>            in&gt;&gt;m_requestDataSize;<span class="hljs-comment">//数据大小写入变量</span><br>            m_isGetPartData=<span class="hljs-literal">true</span>;<span class="hljs-comment">//设置标志，只接收到了数据大小，没接收到数据全部</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(m_isGetPartData==<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">bytesAvailable</span>()&lt;m_requestDataSize)<span class="hljs-comment">//判断是否接收到了完整的数据</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            QDataStream <span class="hljs-built_in">in</span>(m_tcpsocket);<br>            sendStruct receiveData;<br>            in&gt;&gt;receiveData;<span class="hljs-comment">//接收到了数据</span><br>            m_requestDataSize=<span class="hljs-number">0</span>;<span class="hljs-comment">//清空大小</span><br>            m_isGetPartData=<span class="hljs-literal">false</span>;<span class="hljs-comment">//清空标志</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        数据接收成功，放置在receiveData中，可以做其他处理</span><br><span class="hljs-comment">                        doSomething(receiveData);</span><br><span class="hljs-comment">                        */</span><br>            <span class="hljs-comment">//            qDebug()&lt;&lt;&quot;receiveData type&quot;&lt;&lt;receiveData.Type;</span><br>            <span class="hljs-comment">//            qDebug()&lt;&lt;&quot;receiveData Description&quot;&lt;&lt;receiveData.Description;</span><br>            <span class="hljs-comment">//            qDebug()&lt;&lt;&quot;receiveData ByteData&quot;&lt;&lt;receiveData.ByteData;</span><br>            <span class="hljs-keyword">if</span>(receiveData.Type==<span class="hljs-number">1</span>)&#123;<br>                QString msg;<br>                <span class="hljs-function">QDataStream <span class="hljs-title">textStream</span><span class="hljs-params">(&amp;(receiveData.ByteData),QIODevice::ReadOnly)</span></span>;<br>                textStream&gt;&gt;msg;<br>                <span class="hljs-function">emit <span class="hljs-title">GetStrMsg</span><span class="hljs-params">(msg)</span></span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(receiveData.Type==<span class="hljs-number">2</span>)&#123;<br>                QImage image;<br>                <span class="hljs-function">QBuffer <span class="hljs-title">buffer</span><span class="hljs-params">(&amp;(receiveData.ByteData))</span></span>;<br>                buffer.<span class="hljs-built_in">open</span>(QIODevice::ReadOnly);<br>                image.<span class="hljs-built_in">load</span>(&amp;buffer,<span class="hljs-string">&quot;JPG&quot;</span>);<br><span class="hljs-comment">//                qDebug()&lt;&lt;image;</span><br>                <span class="hljs-function">emit <span class="hljs-title">GetImageMsg</span><span class="hljs-params">(image)</span></span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(receiveData.Type==<span class="hljs-number">3</span>)&#123;<br>                QImage image;<br>                <span class="hljs-function">QBuffer <span class="hljs-title">buffer</span><span class="hljs-params">(&amp;(receiveData.ByteData))</span></span>;<br>                buffer.<span class="hljs-built_in">open</span>(QIODevice::ReadOnly);<br>                image.<span class="hljs-built_in">load</span>(&amp;buffer,<span class="hljs-string">&quot;JPG&quot;</span>);<br><span class="hljs-comment">//                qDebug()&lt;&lt;image;</span><br>                <span class="hljs-function">emit <span class="hljs-title">GetVideoImageMsg</span><span class="hljs-params">(image)</span></span>;<br><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(receiveData.Type==<span class="hljs-number">100</span>)&#123;  <span class="hljs-comment">//接收到心跳包</span><br>                <span class="hljs-built_in">qDebug</span>()&lt;&lt;receiveData.Description;<br>                m_heartBeatCount=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">bytesAvailable</span>())<span class="hljs-comment">//如果缓存区还存在数据，递归执行</span><br>                <span class="hljs-built_in">handleGetRecieveData</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClientConnect::handleSocketConnected</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>   m_pHeartBeat-&gt;<span class="hljs-built_in">start</span>(<span class="hljs-number">3</span>*<span class="hljs-number">1000</span>);<br>   m_heartBeatCount=<span class="hljs-number">0</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClientConnect::handleSocketDisconnected</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_pHeartBeat-&gt;<span class="hljs-built_in">stop</span>();<br>    m_heartBeatCount=MAX_HEARTBEAT_COUNT+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClientConnect::handleSendHeartbeatMsg</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(m_heartBeatCount&lt;MAX_HEARTBEAT_COUNT)&#123;     <span class="hljs-comment">//没有超出心跳最大次数</span><br>        sendStruct sendtextData;<br>        sendtextData.Type=<span class="hljs-number">100</span>;<br>        sendtextData.Description=<span class="hljs-string">&quot;This is a heartbeat msg to server.&quot;</span>;<br>        <span class="hljs-function">QDataStream <span class="hljs-title">stream</span><span class="hljs-params">(&amp;sendtextData.ByteData,QIODevice::WriteOnly)</span></span>;<br>        stream&lt;&lt;<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-built_in">handleSendOutData</span>(sendtextData);<br>        m_heartBeatCount++;<br>    &#125;<span class="hljs-keyword">else</span>&#123;                                       <span class="hljs-comment">//超出心跳最大此处，重连</span><br>        <span class="hljs-built_in">disconnectFromServer</span>();<br>        <span class="hljs-built_in">connectToServer</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClientConnect::sendText</span><span class="hljs-params">(QString msg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//发送文字</span><br>    sendStruct sendtextData;<br>    sendtextData.Type=<span class="hljs-number">1</span>;<br>    sendtextData.Description=<span class="hljs-string">&quot;this is text&quot;</span>;<br>    <span class="hljs-function">QDataStream <span class="hljs-title">pointStream</span><span class="hljs-params">(&amp;sendtextData.ByteData,QIODevice::WriteOnly)</span></span>;<br>    pointStream&lt;&lt;msg;<br>    <span class="hljs-built_in">handleSendOutData</span>(sendtextData);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClientConnect::sendImage</span><span class="hljs-params">(<span class="hljs-type">const</span> QImage&amp; img)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//    发送图片</span><br>    sendStruct sendImageData;<br>    sendImageData.Type=<span class="hljs-number">2</span>;<br>    sendImageData.Description=<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;this is image&quot;</span>);<br><span class="hljs-comment">//    QImage image(QSize(640,480),QImage::Format_RGB888);</span><br><span class="hljs-comment">//    image.fill(Qt::red);</span><br>    <span class="hljs-function">QBuffer <span class="hljs-title">buffur</span><span class="hljs-params">(&amp;(sendImageData.ByteData))</span></span>;<br>    buffur.<span class="hljs-built_in">open</span>(QIODevice::ReadWrite);<br><br>    img.<span class="hljs-built_in">save</span>(&amp;buffur,<span class="hljs-string">&quot;JPG&quot;</span>);<br>    <span class="hljs-built_in">handleSendOutData</span>(sendImageData);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClientConnect::sendVideoImage</span><span class="hljs-params">(<span class="hljs-type">const</span> QImage&amp; img)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//    发送图片</span><br>    sendStruct sendImageData;<br>    sendImageData.Type=<span class="hljs-number">3</span>;<br>    sendImageData.Description=<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;this is video image&quot;</span>);<br><span class="hljs-comment">//    QImage image(QSize(640,480),QImage::Format_RGB888);</span><br><span class="hljs-comment">//    image.fill(Qt::red);</span><br>    <span class="hljs-function">QBuffer <span class="hljs-title">buffur</span><span class="hljs-params">(&amp;(sendImageData.ByteData))</span></span>;<br>    buffur.<span class="hljs-built_in">open</span>(QIODevice::ReadWrite);<br><br>    img.<span class="hljs-built_in">save</span>(&amp;buffur,<span class="hljs-string">&quot;JPG&quot;</span>);<br>    <span class="hljs-built_in">handleSendOutData</span>(sendImageData);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpClientConnect::connectToServer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_tcpsocket-&gt;<span class="hljs-built_in">connectToHost</span>(<span class="hljs-built_in">QHostAddress</span>(<span class="hljs-string">&quot;192.168.16.200&quot;</span>),<span class="hljs-number">6868</span>);<br>    <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">state</span>()!=QTcpSocket::ConnectedState)&#123;<br>        m_tcpsocket-&gt;<span class="hljs-built_in">waitForConnected</span>(<span class="hljs-number">1500</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">state</span>()==QTcpSocket::ConnectedState)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">TcpClientConnect::disconnectFromServer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_tcpsocket-&gt;<span class="hljs-built_in">disconnectFromHost</span>();<br>    <span class="hljs-keyword">if</span>(m_tcpsocket-&gt;<span class="hljs-built_in">state</span>()==QTcpSocket::UnconnectedState)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QTcpSocket</tag>
      
      <tag>QTcpServer</tag>
      
      <tag>心跳包</tag>
      
      <tag>序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QThread模板</title>
    <link href="/2019/03/22/QThread%E6%A8%A1%E6%9D%BF/"/>
    <url>/2019/03/22/QThread%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>由于某些特殊原因，我们有时候使用线程需要QThread（信号-槽机制）。但是QThread需要继承它然后重写run函数，假如我们需要在线程中干100件事，那么就需要写100个QThread的子类，然后单独实现run函数，这样过于复杂。为此我想到使用std::function&lt;&gt;和模板来减少代码，写一个通用的模板线程。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> WORKERTHREADTEMPLATE_H_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WORKERTHREADTEMPLATE_H_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QThread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>  T,<span class="hljs-keyword">typename</span> T1&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkerThread</span> :<span class="hljs-keyword">public</span> QThread<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">WorkerThread</span>(QObject *parent = <span class="hljs-literal">nullptr</span>)<br>        : <span class="hljs-built_in">QThread</span>(parent)<br>    &#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">( function&lt;T (T1)&gt; func,T1 arg)</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_Function=func;<br>        m_arg=arg;<br>        <span class="hljs-built_in">start</span>();<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">result</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> _result;&#125;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br><br>            _result =<span class="hljs-built_in">m_Function</span>(m_arg);<br><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    T1 m_arg;<br>    function&lt;T (T1)&gt; m_Function;<br>    T _result;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这个模板只适用于一个参数的的非void返回类型，具体使用例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;workerthreadtemplate.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> exitFlag=<span class="hljs-literal">true</span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myPrintf</span><span class="hljs-params">(QString str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(exitFlag)&#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;str;<br>        QThread::<span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    WorkerThread&lt;<span class="hljs-type">bool</span> ,QString&gt; workerThread;<br>    workerThread.<span class="hljs-built_in">work</span>(myPrintf,<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;测试&quot;</span>));<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果传入的是类的成员非静态函数，那么需要使用std::bind。由于上述是模板类，使用起来局限性很大，无法传入任意个参数的函数。下面是改进版，使用std::bind和std::forward结合，std::bind可以简单理解为把一个函数指针和参数绑定起来，返回一个函数类型对象（std::function），参数第一个为要调用的函数指针。std::forward是保持参数传递过程中左右值属性不变。代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QThread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> std::function&lt;<span class="hljs-type">void</span>()&gt; Functor;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkerThread</span> :<span class="hljs-keyword">public</span> QThread<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">WorkerThread</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span><br><span class="hljs-function">        : QThread(parent)</span><br><span class="hljs-function">    &#123;</span><br><br>    &#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">WorkerThread</span>()&#123;&#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>  T,<span class="hljs-keyword">typename</span>... Args&gt;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">(T func, Args... args)</span></span>&#123;<br><br>        m_function = std::<span class="hljs-built_in">bind</span>(std::forward&lt;T&gt;(func), std::forward&lt;Args&gt;(args)...);<br><br>        <span class="hljs-built_in">start</span>();<br>    &#125;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-built_in">m_function</span>();<br>        <span class="hljs-built_in">exec</span>();<br><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    Functor m_function;<br><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>用法如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> exitFlag=<span class="hljs-literal">true</span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myPrintf</span><span class="hljs-params">(QString str,<span class="hljs-type">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">while</span>(exitFlag)&#123;<br> <span class="hljs-built_in">qDebug</span>()&lt;&lt;str&lt;&lt;size;<br> QThread::<span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    WorkerThread *pWorkerThread=<span class="hljs-keyword">new</span> <span class="hljs-built_in">WorkerThread</span>();<br>    pWorkerThread-&gt;<span class="hljs-built_in">work</span>(myprintf,<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;test&quot;</span>),<span class="hljs-number">4</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QThread</tag>
      
      <tag>模板</tag>
      
      <tag>可变长参数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读写文件时字符串存在多个文件终止符解决方法</title>
    <link href="/2019/03/21/%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E7%BB%88%E6%AD%A2%E7%AC%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2019/03/21/%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E7%BB%88%E6%AD%A2%E7%AC%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h1><p>我在Linux使用openssl库的DES算法进行文件的加解密时遇到一个问题。我从文件读取明文，然后加密为密文，最后将密文写入文件时发现文件写入的字节数量小于加密完的密文字节数，经过一番验证，发现是加密完的字符串中间包含文件终止符（-1），导致写入的时候遇到文件终止符提前结束了，所以只写入了部分内容。</p><p>错误写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string outText;<span class="hljs-comment">//outText为输出的加密字符串 </span><br><span class="hljs-function">QFile <span class="hljs-title">file</span><span class="hljs-params">(filename)</span></span>;<br>file.<span class="hljs-built_in">open</span>(QFile::WriteOnly|QFile::Truncate);<br>file.<span class="hljs-built_in">write</span>(outText.<span class="hljs-built_in">data</span>());<br>file.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><p>正确写法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string outText;<span class="hljs-comment">//outText为输出的加密字符串</span><br><span class="hljs-function">QFile <span class="hljs-title">file</span><span class="hljs-params">(filename)</span></span>;<br>file.<span class="hljs-built_in">open</span>(QFile::WriteOnly|QFile::Truncate);<br>file.<span class="hljs-built_in">write</span>(outText.<span class="hljs-built_in">data</span>(),outText.<span class="hljs-built_in">size</span>());<br>file.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><p>此处唯一的区别在于写入的指定写入的大小，这样就能将全部字符串写入文件。</p><h1 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h1><p>将加密字符串存入文件之后，读取文件的内容也会遇到同样的问题，即文件读的时候遇到文件终止符会结束，导致读取的加密字符串不完整。这里我以c++的<ifsteam>操作说明如何解决该问题。ifstream的 &gt;&gt;buf和getLine(buf)都会遇见文件终止符结束，所以我才有get（）读取每一个字节，然后使用peek来判断是否结束，peek会预读文件指针下一个的内容。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string srcText = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">char</span> temp;<br>QList&lt;<span class="hljs-type">char</span>&gt; list;<br><span class="hljs-keyword">while</span>( in.<span class="hljs-built_in">peek</span>()!=EOF)&#123;<br><br>    in.<span class="hljs-built_in">get</span>(temp);<br>    list.<span class="hljs-built_in">push_back</span>(temp);<br><br>&#125;<br>srcText.<span class="hljs-built_in">assign</span>(list.<span class="hljs-built_in">begin</span>(),list.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>最后还有一个关于“\0”的问题，我解密出来的字符串除了下列情况 “泰安\0\0\0”，于是我想将去掉‘\0’，我使用的是Qt的QString。</p><p>错误用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QString out=<span class="hljs-string">&quot;泰安\0\0\0&quot;</span>;<br>out.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//错误用法一，这种用法会将“\0”转化成一个QString</span><br>out.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;\0&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//错误用法二，这个会导致重载函数的调用出现歧义，出现编译错误</span><br></code></pre></td></tr></table></figure><p>现象如下：<img src="/%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E7%BB%88%E6%AD%A2%E7%AC%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%5Cimg1.png" alt="读写文件时字符串存在多个文件终止符解决方法\img1"></p><p>正确用法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QString out=<span class="hljs-string">&quot;泰安\0\0\0&quot;</span>;<br>out.<span class="hljs-built_in">replace</span>(<span class="hljs-built_in">QChar</span>(<span class="hljs-string">&#x27;\0&#x27;</span>),<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>文件读写</tag>
      
      <tag>多文件终止符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP扩展开发之c与c++两种模式</title>
    <link href="/2019/03/19/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/03/19/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<hr><p>使用c或者c++开发php扩展的目的在于，利用c和c++的高效性提高性能，毕竟php只是一个脚本语言。php的msyqli等扩展就是一个例子，可以从其中了解php扩展的大概框架。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>下载相应的php源码</p></li><li><p>编译需要的库文件</p></li></ol><h1 id="开发扩展"><a href="#开发扩展" class="headerlink" title="开发扩展"></a>开发扩展</h1><h2 id="1-创建扩展项目"><a href="#1-创建扩展项目" class="headerlink" title="1.创建扩展项目"></a>1.创建扩展项目</h2><p>进入php源码的ext目录,生成一个名为test的扩展项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">./ext_skel <span class="hljs-literal">--extname</span>=test<br></code></pre></td></tr></table></figure><h2 id="2-编辑配置文件"><a href="#2-编辑配置文件" class="headerlink" title="2.编辑配置文件"></a>2.编辑配置文件</h2><p>进入test目录，里面存在一个config.m4和test.c。config.m4文件是扩展项目的编译配置文件，类似于Qt的pro文件。打开config.m4文件。打开其中三行的注释，dnl就是改行的注释删除即可：</p><p><img src="/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%5Cconfig1.png" alt="PHP扩展开发之c与c-两种模式\config1"></p><p>这三句话的意思就是在编译安装php的时候可以开启test扩展的支持。然后配置扩展依赖的的动态库或者静态库。示例如下：</p><p><img src="/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%5Cconfig2.png" alt="PHP扩展开发之c与c-两种模式\config2"></p><p>PHP_ADD_INCLUDE添加编译的头文件搜索路径。PHP_ADD_LIBRARY按照我的理解就是添加系统库路径下的库文件，比如&#x2F;usr&#x2F;lib路径。PHP_ADD_LIBRARY_PATH就是添加指定路径的第三方库。PHP_REQUIRE_CXX()指定c++编译,没有的话就是按照c编译。PHP_NEW_EXTENSION就是配置文件的关键，创建指定的扩展。第一个参数是扩展名，第二个参数是扩展用到的实现源码（不包含.h，可以包含多个，中间用空格隔开，例如 test1.cpp test2.cpp）。此处默认生成应该是wy_analyze.c，由于我的项目需要使用c++，所以我改成了.cpp，对应的文件的名称也应该改为.cpp。</p><h2 id="3-编写wy-analyze-cpp"><a href="#3-编写wy-analyze-cpp" class="headerlink" title="3.编写wy_analyze.cpp"></a>3.编写wy_analyze.cpp</h2><p>首先使用extern “C” {}包含该文件自动添加的.h头文件，如下：</p><p><img src="/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%5Cconfig3.png" alt="PHP扩展开发之c与c-两种模式\config3"></p><p>添加函数定义，参考自动生成的例子</p><p><img src="/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%5Cconfig4.png" alt="PHP扩展开发之c与c-两种模式\config4"></p><p>confirm_wy_analyze_compiled是php自动生成的测试函数（后续完成之后可以去掉），我们可以参照这个例子编写我们自己的函数，后面两个就是我定义的函数，类似于头文件的定义。</p><p>完成函数实现</p><p><img src="/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%5Cconfig5.png" alt="PHP扩展开发之c与c-两种模式\config5"></p><p>我们以测试参考例子来简单说明。arg是函数的传入参数，arg_len是参数长度，zend_parse_parameters是php校验函数参数的一个方法，第一个参数 ZEND_NUM_ARGS()表示参数的个数，第三个参数”s”表示只有一个字符串参数，如果是函数是两个字符串变量，那么这个参数声明和校验如下：</p><p><img src="/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%5Cconfig6.png" alt="PHP扩展开发之c与c-两种模式\config6"></p><p>其他类型的参数的格式请参考其他资料，这里就不详细说明了。</p><h2 id="4-编译安装扩展"><a href="#4-编译安装扩展" class="headerlink" title="4.编译安装扩展"></a>4.编译安装扩展</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> php/ext/your_extdir<br>phpize<br>./configure <span class="hljs-literal">--with-php-config</span>=php<span class="hljs-literal">-config</span><br>make <br>sudo make install <br></code></pre></td></tr></table></figure><p>编译链接生成完的.so会自动拷贝到php的扩展目录里面。如果修改了源码需要重新编译，可以清除。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">phpize <span class="hljs-literal">--clean</span> <span class="hljs-comment">#清除所有配置和编译产生的文件</span><br>make clean <span class="hljs-comment">#清除编译产生的文件，不需要重新configure</span><br></code></pre></td></tr></table></figure><h2 id="5-修改php-ini添加扩展信息"><a href="#5-修改php-ini添加扩展信息" class="headerlink" title="5.修改php.ini添加扩展信息"></a>5.修改php.ini添加扩展信息</h2><p>如果找不到php.ini的路径可以php-config 查看。在php.ini里面添加如下信息</p><p><img src="/PHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8Bc%E4%B8%8Ec-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%5Cconfig7.png" alt="PHP扩展开发之c与c-两种模式\config7"></p><p>同理添加php的自带扩展，只需要取消该扩展的注释即可。然后重启php就会生效。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo service nginx restart<br>sudo service php<span class="hljs-literal">-fpm</span> restart<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP扩展</tag>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>g++编译方法以及合并静态库</title>
    <link href="/2019/03/19/g++%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%90%88%E5%B9%B6%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <url>/2019/03/19/g++%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%90%88%E5%B9%B6%E9%9D%99%E6%80%81%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="g-编译源码"><a href="#g-编译源码" class="headerlink" title="g++编译源码"></a>g++编译源码</h1><p>一般g++的编译选项常用两种-c 和-o 。-c是源码编译但不链接，生成.o文件，-o是编译同时链接，生成可行性文件，如果不指定-o会生成默认的a.out可执行程序。假设以及存在一个main.cpp的源文件,示例如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">g++ <span class="hljs-literal">-c</span> main.cpp<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">g++ main.cpp <span class="hljs-literal">-o</span> test<br></code></pre></td></tr></table></figure><h1 id="生成和合并静态库"><a href="#生成和合并静态库" class="headerlink" title="生成和合并静态库"></a>生成和合并静态库</h1><p>生成静态库是将.o文件压缩为一个.a文件，方法如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ar crv libtest.a test.o<br></code></pre></td></tr></table></figure><p>g++使用静态库的方法如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">g++ main.cpp libtest.a <span class="hljs-literal">-o</span> output<br></code></pre></td></tr></table></figure><p>说明:此处main.cpp引用libtest.a 静态库直接接在main.cpp之后就行了</p><p>生成动态库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">g++ test.cpp <span class="hljs-literal">-fPIC</span> <span class="hljs-literal">-shared</span> <span class="hljs-literal">-o</span> libtest.so<br></code></pre></td></tr></table></figure><p>接下来讲解合并多个单独编译生成的.a静态库，思路就是先将.a拆分为.o，然后合并.o成为一个.o。假设已经存在a1.a(包含a1.o),a2.a(包含a2.o)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ar x a1.a<br>ar x a2.a<br>ar rc a3.a *.o<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>g++编译</tag>
      
      <tag>合并静态库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QThread的事件循环与生命周期</title>
    <link href="/2019/03/06/QThread%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2019/03/06/QThread%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<div >    想要使用QThread一般就是继承QThread。然后重写（override）run()函数，run函数就是线程启动实际运行的部分。这里顺便说一下Qt创建的实例所处的线程问题，一个实例在哪个线程里面创建，那他就是属于哪个线程。比如一般使用QThread的时候都是在主线程里面创建的。由此引发了一个区别，在QThead的构造函数里面创建的实例属于主线程，因为这个构造函数是在主线程中执行的。在run函数里面创建的实例则属于QThread启动的线程。讲这个主要是因为Qt信号-槽机制的跨线程问题，需要明白sender和receiver分别所处的线程。    run()函数就是QThread启动的线程的整个生命周期，一旦run函数结束，那么这个线程也结束了，此时会发送一个finished()的完成信号，告诉我们线程已经执行完毕了。此时我们绑定这个信号，然后销毁QThread实例即可。如果你的线程中有事件循环驱动的过程，那么就需要进入QThread的事件循环，调用exec()，调用这个函数之后会阻塞后续的代码执行。这个函数和QApplication的exec作用一样，都是进入调用对象的事件循环，类似于一个while死循环，只不过提供了退出循环的接口。进入了QThread的事件循环之后，线程就像是进入了一个死循环，如果想要结束线程，那么首先需要退出事件循环，调用quit()即可，此时就会继续执行exec()后面的代码，直到线程结束发出finished（）信号。</div>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QThread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QtCreator在Linux下断点调试无法访问变量的值</title>
    <link href="/2019/03/05/QtCreator%E5%9C%A8Linux%E4%B8%8B%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/"/>
    <url>/2019/03/05/QtCreator%E5%9C%A8Linux%E4%B8%8B%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="QtCreator调试无法获取当前变量值"><a href="#QtCreator调试无法获取当前变量值" class="headerlink" title="QtCreator调试无法获取当前变量值"></a>QtCreator调试无法获取当前变量值</h1><p>bug状态如下：</p><p><img src="/QtCreator%E5%9C%A8Linux%E4%B8%8B%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%5CQt_GDB.png" alt="QtCreator在Linux下断点调试无法访问变量的值\Qt_GDB"></p><p>这个原因是因为gdb没有获取到Qt的lib的路径，所以需要告诉gdb。在QtCreator的工具里面就可以设置调试器GDB，在额外的启动命令里面添加一条命令,后面的路径设置为你自己的目录即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> solib<span class="hljs-literal">-search-path</span>  /usr/local/Trolltech/Qt<span class="hljs-literal">-4</span>.<span class="hljs-number">8.6</span><span class="hljs-literal">-64</span>/lib/<br></code></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="/QtCreator%E5%9C%A8Linux%E4%B8%8B%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%5CQt_GDB1.png" alt="QtCreator在Linux下断点调试无法访问变量的值\Qt_GDB1"></p><p>添加后成功的状态图如下：</p><p><img src="/QtCreator%E5%9C%A8Linux%E4%B8%8B%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%5CQt_GDB2.png" alt="QtCreator在Linux下断点调试无法访问变量的值\Qt_GDB2"></p><h1 id="QtCreator无法调试"><a href="#QtCreator无法调试" class="headerlink" title="QtCreator无法调试"></a>QtCreator无法调试</h1><p>有一种情况，当调试的时候gdb提示GDB:Failed to set controlling terminal。解决办法是在项目-&gt;Run 勾选 Run in terminal。</p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt,GDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt编码解决思路</title>
    <link href="/2019/03/04/Qt%E7%BC%96%E7%A0%81%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
    <url>/2019/03/04/Qt%E7%BC%96%E7%A0%81%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Qt设置全局的编码格式"><a href="#Qt设置全局的编码格式" class="headerlink" title="Qt设置全局的编码格式"></a>Qt设置全局的编码格式</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QTextCodec *codec = QTextCodec::<span class="hljs-built_in">codecForName</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>QTextCodec::<span class="hljs-built_in">setCodecForTr</span>(codec);<br>QTextCodec::<span class="hljs-built_in">setCodecForLocale</span>(codec);<br>QTextCodec::<span class="hljs-built_in">setCodecForCStrings</span>(codec);<br></code></pre></td></tr></table></figure><p>说明：setCodecForLocale是设置程序运行的本地编码格式 ，例如QString data&#x3D;”测试”，根据上述代码，此处将data处理为UTF-8。setCodecForTr是设置tr（data）要处理的编码格式，例如上述代码tr(data)会处理utf8编码，此处显示则是正常的中文，因为local的编码也是UTF-8,两者一致。而如果此处data是gbk编码，那么会显示中文乱码。setCodecForCStrings(codec) 是给QString 设置对应的编码，同理tr函数。</p><h1 id="Qt解析GB2312编码xml转换GB2312-gt-UTF-8"><a href="#Qt解析GB2312编码xml转换GB2312-gt-UTF-8" class="headerlink" title="Qt解析GB2312编码xml转换GB2312-&gt;UTF-8"></a>Qt解析GB2312编码xml转换GB2312-&gt;UTF-8</h1><pre><code class="hljs">QFile file(filename);if(!file.open(QFile::ReadOnly | QFile::Text))&#123;  return;  &#125;QTextCodec *gbk=QTextCodec::codecForName(&quot;GBK&quot;);QTextStream stream(&amp;file);stream.setCodec(gbk);   //此处为重点QString data=stream.readAll();qDebug()&lt;&lt;data;QDomDocument document;QString error;int row = 0, column = 0;document.setContent(data, false, &amp;error, &amp;row, &amp;column);</code></pre><p>此处使用QtextStream读取QFile,因为它可以设置源文件的编码格式，然后read之后会自动将gbk编码转化成utf的QString。所以此处给我们一个思路，只要我们知道源数据的编码格式，读取的时候设置对应的编码即可，QT会自动转换成utf-8（前提是已经设置了上述全局）。</p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中文编码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu添加开机启动脚本</title>
    <link href="/2019/01/31/Ubuntu%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <url>/2019/01/31/Ubuntu%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>新建一个shell脚本，内容如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment">### BEGIN INIT INFO</span><br><span class="hljs-comment"># Provides:  protected_shell</span><br><span class="hljs-comment"># Required-Start:  $local_fs $remote_fs $network $syslog $named</span><br><span class="hljs-comment"># Required-Stop:  $local_fs $remote_fs $network $syslog $named</span><br><span class="hljs-comment"># Default-Start: 2 3 4 5</span><br><span class="hljs-comment"># Default-Stop:  0 1 6</span><br><span class="hljs-comment"># Short-Description: protect the gdwy_device_server</span><br><span class="hljs-comment">### END INIT INFO</span><br><br><span class="hljs-comment"># chkconfig: - 60 50</span><br><span class="hljs-comment"># description: service demo script</span><br><span class="hljs-comment"># processname: service_demo</span><br><br><span class="hljs-comment"># Source function library.</span><br><span class="hljs-comment">#./etc/init.d/functions</span><br><br><span class="hljs-comment"># Source networking configuration.</span><br><span class="hljs-comment">#./etc/sysconfig/network</span><br><br><span class="hljs-comment"># Check that networking is up.</span><br><span class="hljs-comment">#[ $&#123;NETWORKING&#125;=&quot;no&quot; ] &amp;&amp; exit 0</span><br><br><span class="hljs-comment">#进程名字可修改</span><br>PRO_NAME=/home/liurui/test1/<span class="hljs-built_in">build-test1</span><span class="hljs-literal">-64bit-Debug</span>/test1<br>CMD=<span class="hljs-string">&quot;<span class="hljs-variable">$PRO_NAME</span> &quot;</span><br><span class="hljs-comment">#exec permission</span><br>[ -<span class="hljs-type">x</span> <span class="hljs-variable">$PRO_NAME</span> ] || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">while</span> true ; <span class="hljs-keyword">do</span><br>     <span class="hljs-comment">#用ps获取$PRO_NAME进程数量</span><br>     NUM=`ps aux | grep <span class="hljs-literal">-w</span> <span class="hljs-variable">$</span>&#123;PRO_NAME&#125; | grep <span class="hljs-literal">-v</span> grep |wc <span class="hljs-literal">-l</span>`<br>     <span class="hljs-built_in">echo</span> <span class="hljs-variable">$NUM</span><br>     <span class="hljs-comment">#少于1，重启进程</span><br>     <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$</span>&#123;NUM&#125;&quot;</span> -<span class="hljs-type">lt</span> <span class="hljs-string">&quot;1&quot;</span> ];then<br>         <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$</span>&#123;PRO_NAME&#125; was killed&quot;</span><br>         <span class="hljs-variable">$CMD</span><br>    <span class="hljs-comment">#大于1，杀掉所有进程，重启</span><br>    elif [ <span class="hljs-string">&quot;<span class="hljs-variable">$</span>&#123;NUM&#125;&quot;</span> -<span class="hljs-type">gt</span> <span class="hljs-string">&quot;1&quot;</span> ];then<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;more than 1 <span class="hljs-variable">$</span>&#123;PRO_NAME&#125;,killall <span class="hljs-variable">$</span>&#123;PRO_NAME&#125;&quot;</span><br>        killall <span class="hljs-literal">-9</span>  <span class="hljs-variable">$PRO_NAME</span><br>        <span class="hljs-variable">$CMD</span><br>     fi<br>     <span class="hljs-comment">#kill僵尸进程</span><br>     NUM_STAT=`ps aux | grep <span class="hljs-literal">-w</span> <span class="hljs-variable">$</span>&#123;PRO_NAME&#125; | grep T | grep <span class="hljs-literal">-v</span> grep | wc <span class="hljs-literal">-l</span>`<br>     <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$</span>&#123;NUM_STAT&#125;&quot;</span> -<span class="hljs-type">gt</span> <span class="hljs-string">&quot;0&quot;</span> ];then<br>         killall <span class="hljs-literal">-9</span> <span class="hljs-variable">$</span>&#123;PRO_NAME&#125;<br>         <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;zombie was killed&quot;</span><br>         <span class="hljs-variable">$CMD</span><br>    fi<br>     <span class="hljs-built_in">sleep</span> <span class="hljs-number">5</span>s<br>done<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;shell was killed&quot;</span><br><span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>如果不添加前面的启动信息（BEGIN INIT INFO）会报错,如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">insserv: warning: script <span class="hljs-string">&#x27;protected_shell&#x27;</span> missing LSB tags and overrides<br><br>insserv: There is a loop between service watchdog and protected_shell <span class="hljs-keyword">if</span> stopped<br><br>insserv:  loop involving service protected_shell at depth <span class="hljs-number">2</span><br>insserv:  loop involving service watchdog at depth <span class="hljs-number">1</span><br><br>insserv: Stopping protected_shell depends on watchdog and therefore on system facility `$all<span class="hljs-string">&#x27; which can not be true!</span><br><span class="hljs-string"></span><br><span class="hljs-string">insserv: exiting now without changing boot order!</span><br><span class="hljs-string"></span><br><span class="hljs-string">update-rc.d: error: insserv rejected the script header</span><br></code></pre></td></tr></table></figure><p>主要是因为脚本的启动顺序和其它服务冲突导致，同时没有配置脚本启动的级别<br> 赋予执行权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">chmod +x test.sh<br><br>sudo <span class="hljs-built_in">mv</span> test.sh /etc/init.d/<br></code></pre></td></tr></table></figure><p>添加开机启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo <span class="hljs-built_in">update-rc</span>.d test.sh defaults<br></code></pre></td></tr></table></figure><p>取消开机启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo <span class="hljs-built_in">update-rc</span>.d <span class="hljs-operator">-f</span> test.sh remove<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>qtcreator无法输入中文</title>
    <link href="/2019/01/29/qtcreator%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/"/>
    <url>/2019/01/29/qtcreator%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</url>
    
    <content type="html"><![CDATA[<p>Linux如果使用搜狗输入法，那么QtCreator将无法输入中文，因为Qt没有自带的fcitx扩展支持，但是存在ibus的扩展支持，所以安装ibus。然后切换输入法为ibus即可。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo apt<span class="hljs-literal">-get</span> install ibus<span class="hljs-literal">-pinyin</span> ibus<span class="hljs-literal">-qt4</span><br>im<span class="hljs-literal">-config</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QtCreator 中文输入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux打包QT程序时提示找不到QMYSQL驱动</title>
    <link href="/2019/01/28/Linux%E6%89%93%E5%8C%85QT%E7%A8%8B%E5%BA%8F%E6%97%B6%E6%8F%90%E7%A4%BA%E6%89%BE%E4%B8%8D%E5%88%B0QMYSQL%E9%A9%B1%E5%8A%A8/"/>
    <url>/2019/01/28/Linux%E6%89%93%E5%8C%85QT%E7%A8%8B%E5%BA%8F%E6%97%B6%E6%8F%90%E7%A4%BA%E6%89%BE%E4%B8%8D%E5%88%B0QMYSQL%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>Linux Qt发布打包的程序到另外一个没有安装Qt环境的Linux系统，首先要将所有依赖的动态链接库全部找到，例如libQtCore.so和本次的重点libqsqlmysql.so。将上述文件全部拷贝到目标机器上以后，先要ldd libqsqlmysql.so看看是否依赖齐全，如果提示libmysqlclient.so找不到，那就安装libmysqlclient18或libmysqlclient.so（取决于提示）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo apt<span class="hljs-literal">-get</span> install libmysqlclient18<br></code></pre></td></tr></table></figure><p>因为启动Qt程序的时候，需要指定环境变量，解决办法1：将环境变量直接写进 &#x2F;etc&#x2F;profile里面，2，使用shell脚本启动，将环境变量写在脚本里面，本例采取这种方式（影响最小，环境变量是临时的）。run.sh脚本如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#!/bin/sh</span><br><br>bindir=`dirname <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>` <span class="hljs-comment">#获取当前shell脚本目录</span><br><br>libdir=`cd <span class="hljs-string">&quot;<span class="hljs-variable">$bindir</span>/lib&quot;</span>;<span class="hljs-built_in">pwd</span>`<br><br>QTDIR=<span class="hljs-variable">$</span>&#123;bindir&#125;       <span class="hljs-comment">#指定QT的目录和可执行程序一个目录</span><br><br>QT_PLUGIN_PATH=`cd <span class="hljs-string">&quot;<span class="hljs-variable">$bindir</span>/lib/plugins&quot;</span>;<span class="hljs-built_in">pwd</span>` <span class="hljs-comment">#指定QT查找plugins的目录，关键</span><br><br>LD_LIBRARY_PATH=<span class="hljs-variable">$</span>&#123;libdir&#125;:<span class="hljs-variable">$</span>&#123;LD_LIBRARY_PATH&#125;  <span class="hljs-comment">#指定QT依赖库的路径（eg libQtCore.so）</span><br><br>PATH=<span class="hljs-variable">$bindir:</span><span class="hljs-variable">$</span>&#123;PATH&#125;  <span class="hljs-comment">#给当前路径程序添加到PATH环境变量中</span><br><br>export PATH LD_LIBRARY_PATH QTDIR  QT_PLUGIN_PATH<br><br>exec <span class="hljs-string">&quot;<span class="hljs-variable">$bindir</span>/test&quot;</span>   <span class="hljs-comment">#启动程序</span><br></code></pre></td></tr></table></figure><p>值得注意的是目录结构，根据上述脚本，我们将qt的依赖库拷贝到lib下，然后在lib下新建文件夹plugins，在plugins下新建sqldrivers文件夹，然后将libqsqlmysql.so文件放在sqldrivers下，qt程序启动之后就会去该目录下查找可用的数据库驱动，同理libqsqlite.so。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WinScp连接Linux服务器错误：服务器拒绝了SFTP连接</title>
    <link href="/2019/01/22/WinScp%E8%BF%9E%E6%8E%A5Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%92%E7%BB%9D%E4%BA%86SFTP%E8%BF%9E%E6%8E%A5/"/>
    <url>/2019/01/22/WinScp%E8%BF%9E%E6%8E%A5Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%92%E7%BB%9D%E4%BA%86SFTP%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>检查Linux系统是否安装了sshd服务</p><p>service ssh status</p><p>如果没有安装</p><p>sudo apt-get install openssh-server</p><p>sudo service ssh start </p>]]></content>
    
    
    
    <tags>
      
      <tag>WinScp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP查找不到达梦数据库库路径</title>
    <link href="/2019/01/17/PHP%E6%9F%A5%E6%89%BE%E4%B8%8D%E5%88%B0%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%93%E8%B7%AF%E5%BE%84/"/>
    <url>/2019/01/17/PHP%E6%9F%A5%E6%89%BE%E4%B8%8D%E5%88%B0%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%93%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<p>PHP通过odbc连接达梦数据时需要依赖达梦提供的odbc驱动，路径为&#x2F;opt&#x2F;dmdbms&#x2F;bin,但是PHP的用户权限为root，设置了&#x2F;etc&#x2F;profile 和~&#x2F;.bashrc 的LD_LIBRARY_PATH还是无法获取该路径。最后将路径直接添加到&#x2F;etc&#x2F;ld.so.conf 路径下然后sudo ldconfig 使命令生效。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Qt数据库连接池</title>
    <link href="/2019/01/15/Qt%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <url>/2019/01/15/Qt%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p>.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;connectionpool.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QSettings&gt;</span></span><br>QMutex ConnectionPool::mutex;<br>QWaitCondition ConnectionPool::waitConnection;<br>ConnectionPool* ConnectionPool::instance = <span class="hljs-literal">NULL</span>;<br><br>ConnectionPool::<span class="hljs-built_in">ConnectionPool</span>() &#123;<br>    <span class="hljs-comment">// 创建数据库连接的这些信息在实际开发的时都需要通过读取配置文件得到，</span><br>    <span class="hljs-comment">// 这里为了演示方便所以写死在了代码里。</span><br><span class="hljs-comment">//    hostName     = &quot;192.168.16.200&quot;;</span><br><span class="hljs-comment">//    port=3306;</span><br><span class="hljs-comment">//    databaseName = &quot;web&quot;;</span><br><span class="hljs-comment">//    username     = &quot;root&quot;;</span><br><span class="hljs-comment">//    password     = &quot;zz191025ZZ&quot;;</span><br>    QString apppath=QCoreApplication::<span class="hljs-built_in">applicationDirPath</span>();<br>    QString mysqlconfig=apppath+<span class="hljs-string">&quot;/CFG/mysqlconfig.ini&quot;</span>;<br>    QSettings*  m_IniFile = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QSettings</span>(mysqlconfig, QSettings::IniFormat);<br>    m_IniFile -&gt;<span class="hljs-built_in">beginGroup</span>(<span class="hljs-string">&quot;mysqlserver&quot;</span>);     <span class="hljs-comment">// 设置当前节名，代表以下的操作都是在这个节中</span><br>    hostName= m_IniFile-&gt;<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;ip&quot;</span>).<span class="hljs-built_in">toString</span>();<br>    port=m_IniFile-&gt;<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;port&quot;</span>).<span class="hljs-built_in">toInt</span>();<br>    databaseName=m_IniFile-&gt;<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;database&quot;</span>).<span class="hljs-built_in">toString</span>();<br>    username=m_IniFile-&gt;<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-built_in">toString</span>();<br>    password=m_IniFile-&gt;<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;password&quot;</span>).<span class="hljs-built_in">toString</span>();<br>    m_IniFile-&gt;<span class="hljs-built_in">endGroup</span>();<br>    m_IniFile-&gt;<span class="hljs-built_in">deleteLater</span>();<br>    databaseType = <span class="hljs-string">&quot;QMYSQL&quot;</span>;<br>    testOnBorrow = <span class="hljs-literal">true</span>;<br>    testOnBorrowSql = <span class="hljs-string">&quot;SELECT 1&quot;</span>;<br>    waitInterval = <span class="hljs-number">1000</span>;<br>    maxConnectionCount  = <span class="hljs-number">10</span>;<br>    maxWaitTime  = waitInterval*maxConnectionCount;<br>&#125;<br><br>ConnectionPool::~<span class="hljs-built_in">ConnectionPool</span>() &#123;<br>    <span class="hljs-comment">// 销毁连接池的时候删除所有的连接</span><br>    foreach(QString connectionName, usedConnectionNames) &#123;<br>        QSqlDatabase::<span class="hljs-built_in">removeDatabase</span>(connectionName);<br>    &#125;<br><br>    foreach(QString connectionName, unusedConnectionNames) &#123;<br>        QSqlDatabase::<span class="hljs-built_in">removeDatabase</span>(connectionName);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">ConnectionPool&amp; <span class="hljs-title">ConnectionPool::getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == instance) &#123;<br>        <span class="hljs-function">QMutexLocker <span class="hljs-title">locker</span><span class="hljs-params">(&amp;mutex)</span></span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConnectionPool</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> *instance;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ConnectionPool::release</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">QMutexLocker <span class="hljs-title">locker</span><span class="hljs-params">(&amp;mutex)</span></span>;<br>    <span class="hljs-keyword">delete</span> instance;<br>    instance = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function">QSqlDatabase <span class="hljs-title">ConnectionPool::openConnection</span><span class="hljs-params">()</span> </span>&#123;<br>    ConnectionPool&amp; pool = ConnectionPool::<span class="hljs-built_in">getInstance</span>();<br>    QString connectionName;<br><br>    <span class="hljs-function">QMutexLocker <span class="hljs-title">locker</span><span class="hljs-params">(&amp;mutex)</span></span>;<br><br>    <span class="hljs-comment">// 已创建连接数</span><br>    <span class="hljs-type">int</span> connectionCount = pool.unusedConnectionNames.<span class="hljs-built_in">size</span>() + pool.usedConnectionNames.<span class="hljs-built_in">size</span>();<br><br>    <span class="hljs-comment">// 如果连接已经用完，等待 waitInterval 毫秒看看是否有可用连接，最长等待 maxWaitTime 毫秒</span><br><span class="hljs-comment">//    for (int i = 0;</span><br><span class="hljs-comment">//         i &lt; pool.maxWaitTime</span><br><span class="hljs-comment">//         &amp;&amp; pool.unusedConnectionNames.size() == 0 &amp;&amp; connectionCount == pool.maxConnectionCount;</span><br><span class="hljs-comment">//         i += pool.waitInterval) &#123;</span><br><span class="hljs-comment">//        waitConnection.wait(&amp;mutex, pool.waitInterval);</span><br><br><span class="hljs-comment">//        // 重新计算已创建连接数</span><br><span class="hljs-comment">//        connectionCount = pool.unusedConnectionNames.size() + pool.usedConnectionNames.size();</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-comment">//此处修改为当没有可用连接并且连接数超出最大连接数，则一直循环等待，直到别的线程释放</span><br>    <span class="hljs-keyword">while</span>(pool.unusedConnectionNames.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> &amp;&amp; connectionCount == pool.maxConnectionCount)&#123;<br>        waitConnection.<span class="hljs-built_in">wait</span>(&amp;mutex, pool.waitInterval);<br><br>        <span class="hljs-comment">// 重新计算已创建连接数</span><br>        connectionCount = pool.unusedConnectionNames.<span class="hljs-built_in">size</span>() + pool.usedConnectionNames.<span class="hljs-built_in">size</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pool.unusedConnectionNames.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 有已经回收的连接，复用它们</span><br>        connectionName = pool.unusedConnectionNames.<span class="hljs-built_in">dequeue</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (connectionCount &lt; pool.maxConnectionCount) &#123;<br>        <span class="hljs-comment">// 没有已经回收的连接，但是没有达到最大连接数，则创建新的连接</span><br>        connectionName = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;Connection-%1&quot;</span>).<span class="hljs-built_in">arg</span>(connectionCount + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 已经达到最大连接数</span><br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Cannot create more connections.&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">QSqlDatabase</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 创建连接</span><br>    QSqlDatabase db = pool.<span class="hljs-built_in">createConnection</span>(connectionName);<br><br>    <span class="hljs-comment">// 有效的连接才放入 usedConnectionNames</span><br>    <span class="hljs-keyword">if</span> (db.<span class="hljs-built_in">isOpen</span>()) &#123;<br>        pool.usedConnectionNames.<span class="hljs-built_in">enqueue</span>(connectionName);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> db;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ConnectionPool::closeConnection</span><span class="hljs-params">(QSqlDatabase connection)</span> </span>&#123;<br>    ConnectionPool&amp; pool = ConnectionPool::<span class="hljs-built_in">getInstance</span>();<br>    QString connectionName = connection.<span class="hljs-built_in">connectionName</span>();<br><br>    <span class="hljs-comment">// 如果是我们创建的连接，从 used 里删除，放入 unused 里</span><br>    <span class="hljs-keyword">if</span> (pool.usedConnectionNames.<span class="hljs-built_in">contains</span>(connectionName)) &#123;<br>        <span class="hljs-function">QMutexLocker <span class="hljs-title">locker</span><span class="hljs-params">(&amp;mutex)</span></span>;<br>        pool.usedConnectionNames.<span class="hljs-built_in">removeOne</span>(connectionName);<br>        pool.unusedConnectionNames.<span class="hljs-built_in">enqueue</span>(connectionName);<br>        waitConnection.<span class="hljs-built_in">wakeOne</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function">QSqlDatabase <span class="hljs-title">ConnectionPool::createConnection</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;connectionName)</span> </span>&#123;<br>    <span class="hljs-comment">// 连接已经创建过了，复用它，而不是重新创建</span><br>    <span class="hljs-keyword">if</span> (QSqlDatabase::<span class="hljs-built_in">contains</span>(connectionName)) &#123;<br>        QSqlDatabase db1 = QSqlDatabase::<span class="hljs-built_in">database</span>(connectionName);<br><br>        <span class="hljs-keyword">if</span> (testOnBorrow) &#123;<br>            <span class="hljs-comment">// 返回连接前访问数据库，如果连接断开，重新建立连接</span><br><span class="hljs-comment">//            qDebug() &lt;&lt; &quot;Test connection on borrow, execute:&quot; &lt;&lt; testOnBorrowSql &lt;&lt; &quot;, for&quot; &lt;&lt; connectionName;</span><br>            <span class="hljs-function">QSqlQuery <span class="hljs-title">query</span><span class="hljs-params">(testOnBorrowSql, db1)</span></span>;<br><br>            <span class="hljs-keyword">if</span> (query.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">type</span>() != QSqlError::NoError &amp;&amp; !db1.<span class="hljs-built_in">open</span>()) &#123;<br>                <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Open datatabase error:&quot;</span> &lt;&lt; db1.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>();<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">QSqlDatabase</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> db1;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建一个新的连接</span><br>    QSqlDatabase db = QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(databaseType, connectionName);<br>    db.<span class="hljs-built_in">setHostName</span>(hostName);<br>    db.<span class="hljs-built_in">setPort</span>(port);<br>    db.<span class="hljs-built_in">setDatabaseName</span>(databaseName);<br>    db.<span class="hljs-built_in">setUserName</span>(username);<br>    db.<span class="hljs-built_in">setPassword</span>(password);<br><br>    <span class="hljs-keyword">if</span> (!db.<span class="hljs-built_in">open</span>()) &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Open datatabase error:&quot;</span> &lt;&lt; db.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">QSqlDatabase</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> db;<br>&#125;<br></code></pre></td></tr></table></figure><p>.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONNECTIONPOOL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONNECTIONPOOL_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtSql&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QQueue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QString&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QMutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QMutexLocker&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionPool</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">release</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 关闭所有的数据库连接</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> QSqlDatabase <span class="hljs-title">openConnection</span><span class="hljs-params">()</span></span>;                 <span class="hljs-comment">// 获取数据库连接</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">closeConnection</span><span class="hljs-params">(QSqlDatabase connection)</span></span>; <span class="hljs-comment">// 释放数据库连接回连接池</span><br><br>    ~<span class="hljs-built_in">ConnectionPool</span>();<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> ConnectionPool&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-built_in">ConnectionPool</span>();<br>    <span class="hljs-built_in">ConnectionPool</span>(<span class="hljs-type">const</span> ConnectionPool &amp;other);<br>    ConnectionPool&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> ConnectionPool &amp;other);<br>    <span class="hljs-function">QSqlDatabase <span class="hljs-title">createConnection</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;connectionName)</span></span>; <span class="hljs-comment">// 创建数据库连接</span><br><br>    QQueue&lt;QString&gt; usedConnectionNames;   <span class="hljs-comment">// 已使用的数据库连接名</span><br>    QQueue&lt;QString&gt; unusedConnectionNames; <span class="hljs-comment">// 未使用的数据库连接名</span><br><br>    <span class="hljs-comment">// 数据库信息</span><br>    QString hostName;<br>    <span class="hljs-type">int</span> port;<br>    QString databaseName;<br>    QString username;<br>    QString password;<br>    QString databaseType;<br><br>    <span class="hljs-type">bool</span>    testOnBorrow;    <span class="hljs-comment">// 取得连接的时候验证连接是否有效</span><br>    QString testOnBorrowSql; <span class="hljs-comment">// 测试访问数据库的 SQL</span><br><br>    <span class="hljs-type">int</span> maxWaitTime;  <span class="hljs-comment">// 获取连接最大等待时间</span><br>    <span class="hljs-type">int</span> waitInterval; <span class="hljs-comment">// 尝试获取连接时等待间隔时间</span><br>    <span class="hljs-type">int</span> maxConnectionCount; <span class="hljs-comment">// 最大连接数</span><br><br>    <span class="hljs-type">static</span> QMutex mutex;<br>    <span class="hljs-type">static</span> QWaitCondition waitConnection;<br>    <span class="hljs-type">static</span> ConnectionPool *instance;<br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// CONNECTIONPOOL_H</span></span><br></code></pre></td></tr></table></figure><p>QSqldatabase：：addDatabase(“connectionname”)创建的数据库连接对象，只能在同一个线程中使用，但是一旦按照某个连接名创建了连接，那么按照QSqldatabase::database(“connectionname”)获取的连接实例可以跨线程使用，但是注意跨线程时不同线程同时使用一个连接名创建的连接，则会引起资源竞争，导致意外的错误，具体的错误为：2006：server has gone away 或者2013 lost connection，需要mutex锁保护一下，或者使用数据库连接池的概念，保证每次使用的连接没有和其他线程产生竞争。</p>]]></content>
    
    
    <categories>
      
      <category>Qt学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库连接池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>银河麒麟64bit编译32bit-Qt4.8.6</title>
    <link href="/2019/01/15/%E9%93%B6%E6%B2%B3%E9%BA%92%E9%BA%9F64bit%E7%BC%96%E8%AF%9132bit-Qt4-8-6/"/>
    <url>/2019/01/15/%E9%93%B6%E6%B2%B3%E9%BA%92%E9%BA%9F64bit%E7%BC%96%E8%AF%9132bit-Qt4-8-6/</url>
    
    <content type="html"><![CDATA[<h1 id="配置32bit的编译环境"><a href="#配置32bit的编译环境" class="headerlink" title="配置32bit的编译环境"></a>配置32bit的编译环境</h1><p>这个配置在前面的博客里面提到过，所以此处不再叙述。</p><h1 id="安装libX-32bit库"><a href="#安装libX-32bit库" class="headerlink" title="安装libX* 32bit库"></a>安装libX* 32bit库</h1><p>编译错误信息</p><p>Basic XLib functionality test failed!</p><p>You might need to modify the include and library search paths by editing</p><p>QMAKE_INCDIR_X11 and QMAKE_LIBDIR_X11 in &#x2F;home&#x2F;zhu&#x2F;Qt&#x2F;qt-x11-opensource-src-4.5.2&#x2F;mkspecs&#x2F;Linux-g++</p><p>解决这个问题只需要几个库就可以了，实际上只要安装两个库：</p><p>sudo yum install libXau-dev:i386</p><p>sudo yum install ibX11-dev:i386 （打印信息显示，该package已经安装）</p><p>sudo yum install libXext-dev:i386</p><p>sudo yum install libXtst-dev:i386  (无法安装就不装)</p><p>运行qt程序报错,缺少libX库</p><p>X Error: BadDrawable (invalid Pixmap or Window parameter) 9</p><p>  Major opcode: 62 (X_CopyArea)</p><p>  Resource id:  0x0</p><p>Sudo yum install libXrandr-dev:i386</p><h1 id="编译Qt4-8-6-32bit"><a href="#编译Qt4-8-6-32bit" class="headerlink" title="编译Qt4.8.6-32bit"></a>编译Qt4.8.6-32bit</h1><ol><li><p>下载源码</p></li><li><p>解压缩</p></li><li><p>cd 源码目录</p></li><li><p>配置qt</p></li><li><pre><code class="powershell">./configure -platform linux-g++-32 -nomake examples -nomake demos -no-webkit -qt-zlib -qt-libtiff -qt-libpng -qt-libmng -qt-libjpeg -qt-freetype -fontconfiggmake -j4  #多线程编译sudo gmake install<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>fontconfig参数是为了更好的支持系统的字体，不然会出现中文显示不全或者不显示的问题。<br><br><span class="hljs-comment"># 配置环境变量</span><br><br>```powershell<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">QTDIR</span>=/usr/local/Trolltech/Qt-4.8.6<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$QTDIR</span>/bin:$PATH<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">MANPATH</span>=<span class="hljs-variable">$QTDIR</span>/man:$MANPAT<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LD_LIBRARY_PATH</span>=<span class="hljs-variable">$QTDIR</span>/lib:$LD_LIBRARY_PATH<br></code></pre></td></tr></table></figure></code></pre></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>银河麒麟64bit配置64bit达梦和qt4.8.6-32bit</title>
    <link href="/2019/01/15/%E9%93%B6%E6%B2%B3%E9%BA%92%E9%BA%9F64bit%E9%85%8D%E7%BD%AE64bit%E8%BE%BE%E6%A2%A6%E5%92%8Cqt4-8-6-32bit/"/>
    <url>/2019/01/15/%E9%93%B6%E6%B2%B3%E9%BA%92%E9%BA%9F64bit%E9%85%8D%E7%BD%AE64bit%E8%BE%BE%E6%A2%A6%E5%92%8Cqt4-8-6-32bit/</url>
    
    <content type="html"><![CDATA[<p>本次使用银河麒麟64操作系统以及64位达梦数据库，但是由于Qt程序依赖32位的库，所以需要配置32位unixodbc连接达梦数据库。</p><h1 id="安装达梦数据库64bit"><a href="#安装达梦数据库64bit" class="headerlink" title="安装达梦数据库64bit"></a>安装达梦数据库64bit</h1><p>达梦数据库使用Java开发，所以依赖jdk，系统自带的是openjdk64bit，所以下载64bit的达梦镜像iso文件，直接解压缩。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> 解压缩文件夹<br>chmod <span class="hljs-number">777</span> DMINSTALL<br>./DMINSTALL<br></code></pre></td></tr></table></figure><p>这里推荐使用普通用户安装，默认安装在&#x2F;home&#x2F;user&#x2F;dmdbms&#x2F;,如果采用root用户安装，那么安装路径会在&#x2F;opt&#x2F;dmdbms下，安装完成之后配置环境变量LD_LIBRARY_PATH，达梦数据库会自动创建一个dmdba的系统用户，密码默认和用户名一样，这个用户是用来管理达梦数据库的，达梦数据库安装是user和group都是使用它自己的，所以在你的账户是无法使用他的管理工具，但是对后续的配置没有影响。</p><h1 id="安装达梦数据库32bit"><a href="#安装达梦数据库32bit" class="headerlink" title="安装达梦数据库32bit"></a>安装达梦数据库32bit</h1><h2 id="安装32bit的jdk"><a href="#安装32bit的jdk" class="headerlink" title="安装32bit的jdk"></a>安装32bit的jdk</h2><ol><li><p>去官网下载32bit的jdk安装包</p></li><li><p>解压</p></li><li><p>配置环境变量 sudo vi &#x2F;etc&#x2F;profile</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">export JAVA_HOME=/usr/lib/jvm/jdk7<br>export JRE_HOME=<span class="hljs-variable">$</span>&#123;JAVA_HOME&#125;/jre<br>export CLASSPATH=.:<span class="hljs-variable">$</span>&#123;JAVA_HOME&#125;/lib:<span class="hljs-variable">$</span>&#123;JRE_HOME&#125;/lib<br>export PATH=<span class="hljs-variable">$</span>&#123;JAVA_HOME&#125;/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>4.source &#x2F;etc&#x2F;profile生效</p></li></ol><h2 id="配置默认jdk"><a href="#配置默认jdk" class="headerlink" title="配置默认jdk"></a>配置默认jdk</h2><p>一些linux环境可能存在默认的jdk配置，这时候需要我们进行默认jdk的配置（相当于同时保留32bit和64bit的jdk方便切换）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo <span class="hljs-built_in">update-alternatives</span> <span class="hljs-literal">--config</span> java  <span class="hljs-comment">#查看当前java配置并选择</span><br>sudo <span class="hljs-built_in">update-alternatives</span> <span class="hljs-literal">--install</span> /usr/bin/java java /usr/lib/jvm/jdk7/bin/java <span class="hljs-number">300</span><br>sudo <span class="hljs-built_in">update-alternatives</span> <span class="hljs-literal">--install</span> /usr/bin/javac javac /usr/lib/jvm/jdk7/bin/javac <span class="hljs-number">300</span><br>sudo <span class="hljs-built_in">update-alternatives</span> <span class="hljs-literal">--config</span> java <span class="hljs-comment">#查看当前java配置并选择</span><br>java <span class="hljs-literal">-version</span>                    <span class="hljs-comment">#测试是否成功</span><br></code></pre></td></tr></table></figure><h2 id="安装32bit的达梦数据库"><a href="#安装32bit的达梦数据库" class="headerlink" title="安装32bit的达梦数据库"></a>安装32bit的达梦数据库</h2><p>类似于安装64bit，只不过在运行安装程序时虽然前面已经配置了32bit的jdk，但是还缺少32bit的libXtst.so.6</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo apt<span class="hljs-literal">-get</span> install libxtst<span class="hljs-literal">-dev</span>:i386 <span class="hljs-comment">#x小写</span><br></code></pre></td></tr></table></figure><p>此时会提示libxi:i386依赖没有安装，所以强行安装libxi-dev:i386(会破坏系统某些库的依赖，导致系统的home按钮无法使用，但是有终端就ok了，不影响)。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo apt<span class="hljs-literal">-get</span> install libxi<span class="hljs-literal">-dev</span>:i386<br>sudo apt<span class="hljs-literal">-get</span> install libxtst<span class="hljs-literal">-dev</span>:i386<br></code></pre></td></tr></table></figure><p>然后运行32bit的达梦数据库安装包，只安装驱动即可。安装完配置驱动库的环境变量。</p><h1 id="安装系统32bit编译环境"><a href="#安装系统32bit编译环境" class="headerlink" title="安装系统32bit编译环境"></a>安装系统32bit编译环境</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo dpkg <span class="hljs-literal">--add-architecture</span> i386<br>sudo apt<span class="hljs-literal">-get</span> update<br>sudo apt<span class="hljs-literal">-get</span> dist<span class="hljs-literal">-upgrade</span> <br>sudo apt<span class="hljs-literal">-get</span> install gcc<span class="hljs-literal">-multilib</span> g++multilib<br></code></pre></td></tr></table></figure><h1 id="安装unixodbc-32bit"><a href="#安装unixodbc-32bit" class="headerlink" title="安装unixodbc-32bit"></a>安装unixodbc-32bit</h1><ol><li><p>去官网下载unixodbc 32bit的包</p></li><li><p>tar -zxvf unixodbc.tar.gz</p></li><li><pre><code class="powershell">cd CFLAGS=-m32 LDFLAGS=-m32 CXXFLAGS=-m32 ./configure --prefix==/usr/local/unixODBC-32bit --includedir=/usr/include --libdir=/usr/lib -bindir=/usr/bin --sysconfdir=/etcmakesudo make install<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><br>## 配置<span class="hljs-keyword">odbc</span>环境变量以及达梦数据库数据源<br><br>这里的-m32是指使用32bit的编译器，所以以后编译32bit的软件都可以参考此思路，本质就是使用gcc main.c -m32，但是这种集成化安装方式只能在configure 里面设置编译参数。因为前面的配置参数里面把<span class="hljs-keyword">odbc</span>的安装路径都设置到了系统的环境变量里面了，所以<span class="hljs-keyword">odbc</span>的环境变量就不需要设置了。<br><br>```powershell<br>odbcinst -j #查看<span class="hljs-keyword">odbc</span>的ini配置路径<br></code></pre></td></tr></table></figure></code></pre></li></ol><p>配置达梦驱动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo vi /etc/odbcinst.ini<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[DM7]</span>   <br><br><span class="hljs-attr">Description</span> = dm odbc<br><span class="hljs-attr">Driver</span> = /opt/dmdbms/bin/libdodbc.so  <span class="hljs-comment">#此处是32bit的达梦驱动</span><br></code></pre></td></tr></table></figure><p>配置达梦数据源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo vi /etc/odbc.ini<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[DM7]</span><br><br><span class="hljs-attr">Description</span> = dm7 dsn<br><span class="hljs-attr">Driver</span> = DM7<br><span class="hljs-attr">SERVER</span> =<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">UID</span> = SYSDBA<br><span class="hljs-attr">PWD</span> = SYSDBA<br><span class="hljs-attr">TCP_PORT</span> = <span class="hljs-number">5236</span><br></code></pre></td></tr></table></figure><p>测试是否成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">isql DM7 <span class="hljs-literal">-v</span>      <span class="hljs-comment">#如果失败-v会提示错误信息</span><br></code></pre></td></tr></table></figure><h1 id="编译32bit的libqsqlodbc-so驱动"><a href="#编译32bit的libqsqlodbc-so驱动" class="headerlink" title="编译32bit的libqsqlodbc.so驱动"></a>编译32bit的libqsqlodbc.so驱动</h1><p>32位qt的编译此处略过不谈。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> qt<span class="hljs-literal">-everywhere-qt4</span>.<span class="hljs-number">8.6</span>/src/plugins/sqldrivers/odbc<br>qmake    <span class="hljs-comment">#本来此处是依赖odbc的include和lib的，但是前面已经将odbc安装到系统路径，所以不需要添加INCLUDEPATH 和LIBS</span><br>make <br>sudo make install <span class="hljs-comment">#此处会自动将libqsqlodbc.so 拷贝到QTDIR的数据库驱动文件夹</span><br></code></pre></td></tr></table></figure><p>##使用Qt代码测试连接</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QSqlDatabase db=QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(<span class="hljs-string">&quot;QODBC&quot;</span>);<br>db.<span class="hljs-built_in">setDatabaseName</span>(<span class="hljs-string">&quot;DM7&quot;</span>);  #DM7就是前面配置的odbc数据源名称<br>db.<span class="hljs-built_in">setHostName</span>(<span class="hljs-string">&quot;localhost&quot;</span>);<br>db.<span class="hljs-built_in">setPort</span>(<span class="hljs-number">5236</span>);<br>db.<span class="hljs-built_in">setUserName</span>(<span class="hljs-string">&quot;SYSDBA&quot;</span>);<br>db.<span class="hljs-built_in">setPassword</span>(<span class="hljs-string">&quot;123456789&quot;</span>);<br><span class="hljs-keyword">if</span>(!db.<span class="hljs-built_in">open</span>())&#123;<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;db.<span class="hljs-built_in">lastError</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
